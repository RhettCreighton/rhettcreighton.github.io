{"version":3,"names":[],"mappings":"","sources":["multiplan-geo-model.js"],"sourcesContent":["\n(function() {\n\t\n\tModel.Game.cbBoardGeometryMultiplan = function(width,height,floors) {\n\t\tfunction C(pos) {\n\t\t\treturn pos%width;\n\t\t}\n\t\tfunction R(pos) {\n\t\t\treturn Math.floor((pos%(width*height))/width);\n\t\t}\n\t\tfunction F(pos) {\n\t\t\treturn Math.floor(pos/(width*height));\n\t\t}\n\t\tfunction POS(c,r,f) {\n\t\t\treturn f*width*height+r*width+c;\n\t\t}\n\t\tfunction Graph(pos,delta) {\n\t\t\tvar c0=C(pos);\n\t\t\tvar r0=R(pos);\n\t\t\tvar f0=F(pos);\n\t\t\tvar c=c0+delta[0];\n\t\t\tvar r=r0+delta[1];\n\t\t\tvar f=f0+delta[2];\n\t\t\tif(c<0 || c>=width || r<0 || r>=height || f<0 || f>=floors)\n\t\t\t\treturn null;\n\t\t\treturn POS(c,r,f);\n\t\t}\n\t\tfunction PosName(pos) {\n\t\t\t return \"\"+String.fromCharCode((\"A\".charCodeAt(0))+F(pos))+String.fromCharCode((\"a\".charCodeAt(0))+C(pos)) + (R(pos)+1);\n\t\t}\n\t\tfunction PosByName(str) {\n\t\t\tvar m=/^([A-Z]+)([a-z])([0-9]+)$/.exec(str);\n\t\t\tif(!m)\n\t\t\t\treturn -1;\n\t\t\tvar f=m[1].charCodeAt(0)-\"A\".charCodeAt(0);\n\t\t\tvar c=m[2].charCodeAt(0)-\"a\".charCodeAt(0);\n\t\t\tvar r=parseInt(m[3])-1;\n\t\t\treturn POS(c,r,f);\n\t\t}\n\t\tfunction CompactCrit(pos,index) {\n\t\t\tif(index==0)\n\t\t\t\treturn String.fromCharCode((\"a\".charCodeAt(0))+C(pos));\n\t\t\telse if(index==1)\n\t\t\t\treturn (R(pos)+1);\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\tfunction GetDistances() {\n\t\t\tvar dist=[];\n\t\t\tfor(var pos1=0;pos1<width*height*floors;pos1++) {\n\t\t\t\tvar dist1=[];\n\t\t\t\tdist.push(dist1);\n\t\t\t\tfor(var pos2=0;pos2<width*height*floors;pos2++) {\n\t\t\t\t\tvar r1=R(pos1), c1=C(pos1), f1=F(pos1), r2=R(pos2), c2=C(pos2), f2=F(pos2);\n\t\t\t\t\tdist1.push(Math.max(Math.abs(r1-r2),Math.abs(c1-c2),Math.abs(f1-f2)));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dist;\n\t\t}\n\t\tfunction DistEdges() {\n\t\t\tvar dist=[];\n\t\t\tfor(var pos=0;pos<width*height*floors;pos++) {\n\t\t\t\tvar c=C(pos);\n\t\t\t\tvar r=R(pos);\n\t\t\t\tdist[pos]=Math.min(\n\t\t\t\t\tc, Math.abs(width-c-1),\n\t\t\t\t\tr, Math.abs(height-r-1)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn dist;\n\t\t}\n\t\tfunction Corners() {\n\t\t\tvar corners={};\n\t\t\tcorners[POS(0,0,0)]=1;\n\t\t\tcorners[POS(0,height-1,0)]=1;\n\t\t\tcorners[POS(width-1,0,0)]=1;\n\t\t\tcorners[POS(width-1,height-1,0)]=1;\n\t\t\tcorners[POS(0,0,floors-1)]=1;\n\t\t\tcorners[POS(0,height-1,floors-1)]=1;\n\t\t\tcorners[POS(width-1,0,floors-1)]=1;\n\t\t\tcorners[POS(width-1,height-1,floors-1)]=1;\n\t\t\treturn corners;\n\t\t}\n\t\tfunction FenRowPos(rowIndex,colIndex) {\n\t\t\tvar floor = floors - 1 - Math.floor(rowIndex/height);\n\t\t\tvar row = height - 1 - rowIndex % height;\n\t\t\treturn POS(colIndex,row,floor);\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tboardSize: width*height*floors,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tfloors: floors,\n\t\t\tfenHeight: height * floors,\n\t\t\tC: C,\n\t\t\tR: R,\n\t\t\tF: F,\n\t\t\tPOS: POS,\n\t\t\tGraph: Graph, \n\t\t\tPosName: PosName,\n\t\t\tPosByName: PosByName,\n\t\t\tCompactCrit: CompactCrit,\n\t\t\tGetDistances: GetDistances,\n\t\t\tdistEdge: DistEdges(),\n\t\t\tcorners: Corners(),\n\t\t\tFenRowPos: FenRowPos,\n\t\t};\n\t}\n\t\n\tvar CT = Model.Game.cbConstants;\n\t\n\tvar rsRookDeltas = [[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]];\n\tvar rsBishopDeltas = [[1,1,0],[1,-1,0],[-1,1,0],[-1,-1,0],[1,0,1],[-1,0,1],[0,1,1],[0,-1,1],[1,0,-1],[-1,0,-1],[0,1,-1],[0,-1,-1]];\n\tvar rsUnicornDeltas = [[1,1,1],[1,-1,1],[-1,1,1],[-1,-1,1],[1,1,-1],[1,-1,-1],[-1,1,-1],[-1,-1,-1]];\n\tvar rsKnightDeltas = [[2,1,0],[2,-1,0],[-2,1,0],[-2,-1,0],[1,2,0],[-1,2,0],[1,-2,0],[-1,-2,0],\n\t                      [2,0,1],[2,0,-1],[-2,0,1],[-2,0,-1],[1,0,2],[-1,0,2],[1,0,-2],[-1,0,-2],\n\t                      [0,1,2],[0,-1,2],[0,1,-2],[0,-1,-2],[0,2,1],[0,2,-1],[0,-2,1],[0,-2,-1],\n\t];\n\n\t\n\t\n\tModel.Game.cbRSKingGraph = function(geometry) {\n\t\treturn this.cbShortRangeGraph(geometry,rsRookDeltas.concat(rsUnicornDeltas,rsBishopDeltas));\n\t}\n\n\tModel.Game.cbRSQueenGraph = function(geometry) {\n\t\treturn this.cbLongRangeGraph(geometry,rsRookDeltas.concat(rsUnicornDeltas,rsBishopDeltas));\n\t}\n\n\tModel.Game.cbRSKnightGraph = function(geometry) {\n\t\treturn this.cbShortRangeGraph(geometry,rsKnightDeltas);\n\t}\n\n\tModel.Game.cbRSRookGraph = function(geometry) {\n\t\treturn this.cbLongRangeGraph(geometry,rsRookDeltas);\n\t}\n\n\tModel.Game.cbRSBishopGraph = function(geometry) {\n\t\treturn this.cbLongRangeGraph(geometry,rsBishopDeltas);\n\t}\n\n\tModel.Game.cbRSUnicornGraph = function(geometry) {\n\t\treturn this.cbLongRangeGraph(geometry,rsUnicornDeltas);\n\t}\n\n\tModel.Game.cbRSPawnGraph = function(geometry,side) {\n\t\tvar moveGraph = this.cbShortRangeGraph(geometry,[[0,side,0],[0,0,side]],null,CT.FLAG_MOVE);\n\t\tvar captGraph = this.cbShortRangeGraph(geometry,[[side,side,0],[-side,side,0],[0,side,side],[-side,0,side],[side,0,side]],null,CT.FLAG_CAPTURE);\n\t\tvar graph = [];\n\t\tfor(var pos=0;pos<geometry.boardSize;pos++)\n\t\t\tgraph[pos] = moveGraph[pos].concat(captGraph[pos]); \n\t\treturn graph;\n\t}\n\n\tModel.Game.cb3DPawnGraph = function(geometry,side,range) {\n\t\tvar moveGraph = this.cbLongRangeGraph(geometry,[[0,side,0]],null,CT.FLAG_MOVE,range);\n\t\tvar captGraph = this.cbLongRangeGraph(geometry,[[1,side,0],[-1,side,0],[0,side,1],[0,side,-1]],null,CT.FLAG_CAPTURE,1);\n\t\treturn this.cbMergeGraphs(geometry,moveGraph,captGraph);\n\t}\n\n\tModel.Game.cb3DKingGraph = function(geometry) {\n\t\tvar moveGraph = this.cbLongRangeGraph(geometry,[[1,-1,0],[1,0,0],[1,1,0],[0,1,0],[0,-1,0],[-1,-1,0],[-1,0,0],[-1,1,0]],null,CT.FLAG_MOVE|CT.FLAG_CAPTURE,1);\n\t\tvar captGraph = this.cbLongRangeGraph(geometry,[[0,0,-1],[0,1,-1],[0,-1,-1],[1,0,-1],[-1,0,-1],\n\t\t                                                [0,0,1],[0,1,1],[0,-1,1],[1,0,1],[-1,0,1]],null,CT.FLAG_CAPTURE,1);\n\t\treturn this.cbMergeGraphs(geometry,moveGraph,captGraph);\n\t}\n\t\n})();\n"],"file":"raumschach-model.js"}