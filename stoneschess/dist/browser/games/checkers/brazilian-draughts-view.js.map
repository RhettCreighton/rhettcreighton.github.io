{"version":3,"names":[],"mappings":"","sources":["checkers-xd-view.js"],"sourcesContent":["/*\n *\n * Copyright (c) 2013 - Jocly - www.jocly.com\n * \n * This file is part of the Jocly game platform and cannot be used outside of this context without the written permission of Jocly.\n * \n */\n\n(function() {\n\t\n\tvar CLASSIC3D_FLOOR_Z = 1 ;\n\t\n\tfunction drawAdancedPattern(ctx,img,xCenter,yCenter,cx,cy,fillColor,compMode,rotationDeg){\n\t\tvar bInvert\n\t\tvar buffCz=512;\n\t\tvar tmpCanvas = document.createElement('canvas');\n\t\ttmpCanvas.width=tmpCanvas.height=buffCz;\n\t\tctxTmp=tmpCanvas.getContext('2d');\n        ctxTmp.fillStyle=fillColor;\n        ctxTmp.fillRect(0,0,buffCz,buffCz);\n        ctxTmp.translate(buffCz/2,buffCz/2);\n        if (rotationDeg)\n        ctxTmp.rotate(rotationDeg/180*Math.PI);\n        ctxTmp.globalCompositeOperation=compMode;\n\t\tctxTmp.drawImage(img,0,0,img.width,img.height,-buffCz/2,-buffCz/2,buffCz,buffCz);\n\t\t// now paste the result in diffuse canvas\n        ctx.drawImage(tmpCanvas,0,0,buffCz,buffCz,xCenter-cx/2,yCenter-cy/2,cx,cy);\n\t}\n\t\n\tfunction drawFilledPattern(ctx,img,xCenter,yCenter,cx,cy,fillColor,rotationDeg){\n\t\tdrawAdancedPattern(ctx,img,xCenter,yCenter,cx,cy,fillColor,'destination-in',rotationDeg);\n\t}\n\tfunction drawInvertedFilledPattern(ctx,img,xCenter,yCenter,cx,cy,fillColor,rotationDeg){\n\t\tdrawAdancedPattern(ctx,img,xCenter,yCenter,cx,cy,fillColor,'destination-out',rotationDeg);\n\t}\n\t\n\tvar currentGame;\n\t\n\tvar WIDTH, HEIGHT, SIZE, PCOUNT, SWIDTH;\n\tvar CLASSIC_WHITE = 0xbbaa99;\n\tvar CLASSIC_BLACK = 0x222222;\n\t\n\tvar colors=[\"black\",\"red\"];\n\tvar reflexivities=[0.5,0.7];\n\tvar sphereGeometry, textures, textureCube;\n\t\n\tView.Game.xdInitExtra = function(xdv) {\n\t}\n\n\tView.Game.xdPreInit = function(xdv) {\n\t}\n\t\n\t// useful to initialize pieces and board while the real meshes aren't loaded yet\n\tView.Game.chMakeDummyMesh = function(xdv) {\n\t\tif(typeof THREE != \"undefined\")\n\t\t    return new THREE.Mesh( new THREE.CubeGeometry( .001,.001,.001 ), \n\t\t\t\t\t      new THREE.MeshLambertMaterial() );\n\t\telse\n\t\t\treturn null;\n\t}\n\t\n\tvar pieces = {};\n\t\n\tView.Game.chMakeTokenPiece = function(avatar,type,who,callback) {\n\t\t\n\t\tvar fullPath=this.mViewOptions.fullPath;\n\t\t\n\t\tfunction loadResources(type,who,callback){\n\t\t\tvar bumpMap;\n\t\t\tvar diffuseMap;\n\t\t\tvar pieceGeo;\n\t\t\tvar queenMask;\n\t\t\tvar nbRes=4;\n\t\t\tvar TEXTURE_CANVAS_SZ=256;\n\t\t\t\n\t\t\tfunction checkLoaded(){\n\t\t\t\tnbRes--;\n\t\t\t\tif (nbRes==0){\n\t\t\t\t\tfunction blackenCtxIfNeeded(ctx){\n\t\t\t\t\t\tif(who<0){\n\t\t\t\t\t\t\t//ctx.globalCompositeOperation=\"multiply\";\n\t\t\t\t\t\t\tctx.fillStyle=\"rgba(0,0,0,0.9)\";\n\t\t\t\t\t\t\tctx.fillRect(0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// piecetop\n\t\t\t\t\tvar canvasDiffuse=document.createElement('canvas');\n\t\t\t\t\tcanvasDiffuse.width=canvasDiffuse.height=TEXTURE_CANVAS_SZ;\n\t\t\t\t\tvar textureDiff =  new THREE.Texture(canvasDiffuse);\n\t\t\t\t\tvar canvasBump=document.createElement('canvas');\n\t\t\t\t\tcanvasBump.width=canvasBump.height=TEXTURE_CANVAS_SZ;\n\t\t\t\t\tvar textureBump =  new THREE.Texture(canvasBump);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar ctx=canvasDiffuse.getContext(\"2d\");\n\t\t\t\t\tctx.drawImage(diffuseMap,0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\tblackenCtxIfNeeded(ctx);\n\t\t\t\t\t\n\t\t\t\t\tif (type==1)\n\t\t\t\t\t\tdrawFilledPattern(ctx,queenMask,\n\t\t\t\t\t\t\tTEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ,\n\t\t\t\t\t\t\t(who>0)?\"rgba(0,0,0,0.9)\":\"rgba(221, 193, 148, 1)\",\n\t\t\t\t\t\t\t0);\n\n\t\t\t\t\tvar ctxBump=canvasBump.getContext(\"2d\");\n\t\t\t\t\tctxBump.drawImage(bumpMap,0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\t\n\t\t\t\t\ttextureDiff.needsUpdate=true;\n\t\t\t\t\ttextureBump.needsUpdate=true;\n\t\t\t\t\t\n\t\t\t\t\t// piece border\n\t\t\t\t\tvar canvasDiffuseB=document.createElement('canvas');\n\t\t\t\t\tcanvasDiffuseB.width=canvasDiffuseB.height=TEXTURE_CANVAS_SZ;\n\t\t\t\t\tvar textureDiffB =  new THREE.Texture(canvasDiffuseB);\n\t\t\t\t\tvar ctxB=canvasDiffuseB.getContext(\"2d\");\n\t\t\t\t\tctxB.drawImage(diffuseMap,0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\tblackenCtxIfNeeded(ctxB);\n\t\t\t\t\ttextureDiffB.needsUpdate=true;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar specular=\"#050505\",shininess=50,color=0xdddddd;\n\t\t\t\t\tif (who<0) {\n\t\t\t\t\t\tspecular=\"#111111\";\n\t\t\t\t\t\tshininess=10;\n\t\t\t\t\t}\n\t\t\t\t\tvar mattop=new THREE.MeshPhongMaterial({name:\"piecetop\",\n\t\t\t\t\t\tcolor : color,\n\t\t\t\t\t\tspecular:specular,\n\t\t\t\t\t\tshininess:shininess,\n\t\t\t\t\t\tmap:textureDiff,\n\t\t\t\t\t\tbumpMap:textureBump,\n\t\t\t\t\t\tbumpScale:0.06\n\t\t\t\t\t\t});\n\t\t\t\t\tvar matborder=new THREE.MeshPhongMaterial({name:\"pieceborders\",\n\t\t\t\t\t\tcolor : color,\n\t\t\t\t\t\tspecular:specular,\n\t\t\t\t\t\tshininess:shininess,\n\t\t\t\t\t\tmap:textureDiffB});\n\t\t\t\t\t\n\t\t\t\t\tvar pieceMat=new THREE.MultiMaterial([matborder,mattop]);\n\t\t\t\t\t\n\t\t\t\t\tcallback({geometry:pieceGeo,material:pieceMat});\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tavatar.getResource(\"smoothedfilegeo|0|\"+fullPath+\"/res/xd-view/meshes/piece-v2.js\",\n\t\t\t\tfunction(geometry , materials){\n\t\t\t\t\tpieceGeo=geometry;\n\t\t\t\t\t//pieceMat=materials;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t\tavatar.getResource(\"image|\"+fullPath+\"/res/xd-view/meshes/piecetop-bump.jpg\",\n\t\t\t\tfunction(img){\n\t\t\t\t\tbumpMap=img;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t\tavatar.getResource(\"image|\"+fullPath+\"/res/xd-view/meshes/piecediff.jpg\",\n\t\t\t\tfunction(img){\n\t\t\t\t\tdiffuseMap=img;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t\tavatar.getResource(\"image|\"+fullPath+\"/res/xd-view/meshes/piecetop-queen-mask.png\",\n\t\t\t\tfunction(img){\n\t\t\t\t\tqueenMask=img;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\tvar key=\"_\"+type+\"_\"+who+\"_\";\n\t\t\t\n\t\tvar piece=pieces[key];\n\t\tif(Array.isArray(piece))\n\t\t\tpiece.push(callback);\n\t\telse if(!piece) {\n\t\t\tpieces[key] = [ callback ];\n\t\t\tloadResources(type,who,function(resources) {\n\t\t\t\tvar callbacks = pieces[key];\n\t\t\t\tpieces[key] = {\n\t\t\t\t\tgeometry: resources.geometry,\n\t\t\t\t\tmaterial: resources.material,\n\t\t\t\t}\n\t\t\t\tcallbacks.forEach(function(callback) {\n\t\t\t\t\tcallback(new THREE.Mesh(resources.geometry,resources.material));\n\t\t\t\t});\n\t\t\t});\n\t\t} else \n\t\t\tcallback(new THREE.Mesh(piece.geometry,piece.material));\t\t\t\t\n\t}\n\n\n\tView.Game.xdInit = function(xdv) {\n\t\t\t\t\n\t\tvar $this=this;\n\t\t\n\t\tthis.g.getColumn=function(c,r) {\n\t\t\treturn 2*c+(r%2);\t\t\t\n\t\t}\n\t\tthis.g.dimensions={\n\t\t\twidth: this.mOptions.width, \n\t\t\tsquareWidth: 2*this.mOptions.width, \n\t\t\theight: this.mOptions.height, \n\t\t}\n\n\t\tthis.xdPreInit();\n\t\t\n\t\tvar fullPath=this.mViewOptions.fullPath;\n\t\tvar lightcellDistance=this.g.lightcellDistance;\n\t\tvar INITIAL=this.mOptions.initial;\n\t\tWIDTH=this.g.dimensions.width;\n\t\tSWIDTH=this.g.dimensions.squareWidth;\n\t\tHEIGHT=this.g.dimensions.height;\n\t\tSIZE=Math.floor(12000/SWIDTH,12000/HEIGHT);\n\t\t\n\t\tif(typeof THREE!=\"undefined\") {\n\t\t\tsphereGeometry = new THREE.SphereGeometry(1,32,16);\n\t\t\ttextures=[\"black.png\",\"white.png\",\"red.png\"];\t\n\t\t\tvar path = fullPath+\"/res/xd-view/meshes/skybox/\";\n\t\t\tvar format = '.jpg';\n\t\t\tvar urls = [\n\t\t\t\tpath + 'px' + format, path + 'nx' + format,\n\t\t\t\tpath + 'py' + format, path + 'ny' + format,\n\t\t\t\tpath + 'pz' + format, path + 'nz' + format\n\t\t\t];\n\t\t\t//textureCube = THREE.ImageUtils.loadTextureCube( urls );\n\t\t\ttextureCube = new THREE.CubeTextureLoader( ).load( urls );\n\t\t}\n\n\t\txdv.createGadget(\"board\", {\n\t\t\t\"2d\" : {\n\t\t\t\ttype : \"image\",\n\t\t\t},\n\t\t});\n\n\t\txdv.createGadget(\"lightside\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar backlight = new THREE.PointLight( 0xaaaaff, 1, 30 );\n\t\t\t\t\treturn backlight;\n\t\t\t\t},\n\t\t\t\tz: 10000,\n\t\t\t\tx: 10000,\n\t\t\t\tcastShadow: false,\n\t\t\t},\n\t\t\t\"turtles3d\": {\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar backlight = new THREE.PointLight( 0xaaaaff, 3, 30 , 2);\n\t\t\t\t\treturn backlight;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"lightback\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar backlight = new THREE.PointLight( 0xaaccff, 0.7, 30 );\n\t\t\t\t\treturn backlight;\n\t\t\t\t},\n\t\t\t\tz: 10000,\n\t\t\t\ty: -10000,\n\t\t\t\tcastShadow: false,\n\t\t\t},\n\t\t\t\"turtles3d\" : {\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar backlight = new THREE.PointLight( 0xaaccff, 3, 30 , 2);\n\t\t\t\t\treturn backlight;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t\n\t\t\n\t\t/*function createSkyball(style){\n\t\t\tvar graphGeometry = new THREE.SphereGeometry( 50 , 50, 50 );\n\t\t\tvar material = new THREE.MeshBasicMaterial( { \n\t\t        color: 0x00ff00, \n\t\t        wireframe: false,\n\t\t        side: THREE.DoubleSide\n\t\t    } );\n\t\t\tgraphGeometry.computeBoundingBox();\n\t\t\tzMin = graphGeometry.boundingBox.min.z;\n\t\t\tzMax = graphGeometry.boundingBox.max.z;\n\t\t\tzRange = zMax - zMin;\n\t\t\tvar color, point, face, numberOfSides, vertexIndex;\n\t\t\t// faces are indexed using characters\n\t\t\tvar faceIndices = [ 'a', 'b', 'c', 'd' ];\n\t\t\t// first, assign colors to vertices as desired\n\t\t\tfor ( var i = 0; i < graphGeometry.vertices.length; i++ ) \n\t\t\t{\n\t\t\t\tpoint = graphGeometry.vertices[ i ];\n\t\t\t\tcolor = new THREE.Color( 0x000000 );\n\t\t\t\t\n\t\t\t\tvar delta=(zMax - point.z)/zRange;\n\t\t\t\tif(style==\"turtles3d\"){\n\t\t\t\t\tcolor.b = 1+delta;\n\t\t\t\t\tcolor.g = 0.5+0.4*delta;\n\t\t\t\t\tcolor.r = 0.3*delta;\n\t\t\t\t}else{\n\t\t\t\t\tcolor.g = color.b = color.r = delta/6;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tgraphGeometry.colors[i] = color; // use this array for convenience\n\t\t\t}\n\t\t\t// copy the colors as necessary to the face's vertexColors array.\n\t\t\tfor ( var i = 0; i < graphGeometry.faces.length; i++ ) \n\t\t\t{\n\t\t\t\tface = graphGeometry.faces[ i ];\n\t\t\t\tnumberOfSides = ( face instanceof THREE.Face3 ) ? 3 : 4;\n\t\t\t\tfor( var j = 0; j < numberOfSides; j++ ) \n\t\t\t\t{\n\t\t\t\t\tvertexIndex = face[ faceIndices[ j ] ];\n\t\t\t\t\tface.vertexColors[ j ] = graphGeometry.colors[ vertexIndex ];\n\t\t\t\t}\n\t\t\t}\n\t\t\t///////////////////////\n\t\t\t// end vertex colors //\n\t\t\t///////////////////////\n\t\t\t// \"wireframe texture\"\n\t\t\tvar wireTexture = new THREE.ImageUtils.loadTexture( fullPath + \"/res/xd-view/meshes/square.png\" );\n\t\t\twireTexture.wrapS = wireTexture.wrapT = THREE.RepeatWrapping; \n\t\t\twireTexture.repeat.set( 40, 40 );\n\t\t\tvar wireMaterial = new THREE.MeshBasicMaterial( { map: wireTexture, vertexColors: THREE.VertexColors, side:THREE.DoubleSide } );\n\n\t\t\twireMaterial.map.repeat.set( 20, 60 );\t\n\t\t\t\n\t\t\tvar mesh = new THREE.Mesh( graphGeometry , wireMaterial );\n\t\t\tmesh.doubleSided = true;\n\t\t\treturn mesh;\n\t\t}\n\t\t\n\t\txdv.createGadget(\"skyball\", {\n\t\t\t\"turtles3d\" : {\n\t\t\t\ttype : \"custommesh3d\",\t\t\n\t\t\t\trotate: 135,\n\t\t\t\trotateX: -60,\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn createSkyball(\"turtles3d\");\n\t\t\t\t},\n\t\t\t\topacity:1,\n\t\t\t},\n\t\t});*/\n\n\t\tfor(var pos=0; pos<this.g.Coord.length;pos++) {\n\t\t\t(function(pos) {\n\t\t\t\txdv.createGadget(\"text#\"+pos, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\twidth : SIZE*.2,\n\t\t\t\t\t\theight : SIZE*.2,\n\t\t\t\t\t\tinitialClasses: \"notation\",\n\t\t\t\t\t\tcss : {\n\t\t\t\t\t\t\t\"text-align\" : \"center\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tz : 4,\n\t\t\t\t\t\tdisplay : function(element, width, height) {\n\t\t\t\t\t\t\telement.css({\n\t\t\t\t\t\t\t\t\"font-size\" : (height * .6) + \"pt\",\n\t\t\t\t\t\t\t\t\"line-height\" : (height * 1) + \"px\",\n\t\t\t\t\t\t\t}).text($this.checkersPosToString(pos));\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"alquerque3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\tz: -SIZE*.05,\n\t\t\t\t\t\trotateX: -90,\n\t\t\t\t\t\tcreate: function() {\n                            var _this = this;\n                            this.getResource('font|'+fullPath+\n                                '/res/xd-view/fonts/helvetiker_regular.typeface.json',\n                                function(font) {\n                                var gg=new THREE.TextGeometry(\"\"+($this.checkersPosToString(pos)),{\n                                    size: 0.2,\n                                    height: 0.05,\n                                    curveSegments: 6,\n                                    font: font,\n\n                                });\n                                var gm=new THREE.MeshBasicMaterial();\n                                var mesh= new THREE.Mesh( gg , gm );\n                                _this.objectReady(mesh);\n                            });\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\txdv.createGadget(\"cell#\"+pos, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\tinitialClasses: \"xd-choice\",\n\t\t\t\t\t\twidth: SIZE,//*1.1,\n\t\t\t\t\t\theight: SIZE,//*1.1,\n\t\t\t\t\t\tz: 1,\n\t\t\t\t\t},/*\n\t\t\t\t\t\"2d-wood-alquerque\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\tinitialClasses: \"xd-choice\",\n\t\t\t\t\t\twidth: SIZE*0.9,\n\t\t\t\t\t\theight: SIZE*0.9,\n\t\t\t\t\t\tz: 1,\n\t\t\t\t\t}, */\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"meshfile\",\n\t\t\t\t\t\tfile : fullPath+\"/res/xd-view/meshes/ring-target.js\",\n\t\t\t\t\t\tflatShading: true,\n\t\t\t\t\t\tsmooth : 0,\n\t\t\t\t\t\tz : 0,\n\t\t\t\t\t\tscale:[8/SWIDTH,8/SWIDTH,8/SWIDTH],\n\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\"square\" : {\n\t\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\t\tcolor : 0xffffff,\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\t\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t\t})(pos);\n\t\t}\n\t\tfunction createTurtle(avatar,callback,type,who){\n\t\t\tvar piecesParts=[\"turtle-legs-smoothed\",\"turtle-head-smoothed\",\"turtle-tail-smoothed\",\"turtle-hotel\",\"turtle-house\"];\n\t\t\t\n\t\t\tvar resCount=piecesParts.length;\n\t\t\tvar parentObject;\n\t\t\tvar childObjects=[];\n\t\t\tfunction checkLoaded(){\n\t\t\t\tif (--resCount==0){\t\t\n\t\t\t\t\tfor (var n=0 ; n < childObjects.length ; n++) parentObject.add(childObjects[n]);\n\t\t\t\t\tcallback(parentObject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(var p=0 ; p < piecesParts.length ; p++){\n\t\t\t\tvar smooth=0;\n\t\t\t\tvar shadow=false;\n\t\t\t\tvar flatShading=false;\n\t\t\t\tvar visible=true;\n\t\t\t\tif ((piecesParts[p]===\"turtle-hotel\") || (piecesParts[p]===\"turtle-house\")){\n\t\t\t\t\tsmooth=0;\n\t\t\t\t} \n\t\t\t\tif (piecesParts[p]===\"turtle-hotel\")\n\t\t\t\t\tvisible=false;\n\t\t\t\tvar url=\"smoothedfilegeo|\"+smooth+\"|\"+fullPath+\"/res/xd-view/meshes/\"+piecesParts[p]+\".js\";\n\t\t\t\t(function(p){\n\t\t\t\t\tavatar.getResource(url,function(geometry , materials){\n\t\t\t\t\t \tvar materials0=[];\n                        var tasks = 1;\n                        function Done() {\n                            if(--tasks==0) {\n                                if(p==0){\n                                    parentObject = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n                                    parentObject.castShadow=true;\n                                    parentObject.receiveShadow=shadow;\n                                }\n                                else{\n                                    var mesh=new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n                                    mesh.castShadow=true;\n                                    mesh.receiveShadow=shadow;\n                                    mesh.visible=visible;\n                                    mesh.title=piecesParts[p];\n                                    childObjects.push(mesh);\n                                }\n                                checkLoaded();\n                            }\n                        }\n \t\t\t\t\t\tfor(var m=0;m<materials.length;m++){\n                            (function(m) {\n                                tasks++;\n                                var mat=materials[m].clone();\n                                if (mat.name===\"mat.turtle\")\n                                    mat.emissive={r:0,g:0,b:0}; // mat.emissive={r:.7,g:.7,b:.7};\n                                if ((mat.name===\"mat.turtle\")||(mat.name===\"mat.buildings\")){\n                                    mat.shininess = 10;\n                                    mat.specular={r:0,g:0,b:0};\n                                    var matUrl;\n                                    if (who==-1)\n                                        matUrl = fullPath+\"/res/xd-view/meshes/turtle-black.png\";\n                                    else\n                                        matUrl = fullPath+\"/res/xd-view/meshes/turtle.png\";\n                                    avatar.getMaterialMap(matUrl,function(matMap) {\n                                        mat.map = matMap;\n                                        if (mat.name===\"mat.buildings\")\n                                            mat.shading=THREE.FlatShading;\n                                        materials0[m] = mat;\n                                        Done();\n                                    });\n                                } else {\n                                    if (mat.name===\"mat.buildings\")\n                                        mat.shading=THREE.FlatShading;\n                                    materials0[m] = mat;\n                                    Done();\n                                }\n                            })(m);\n \t\t\t\t\t\t}\n                        Done();\n\t\t\t\t\t});\n\t\t\t\t})(p);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction CreatePiece(side,index) {\n\t\t\tvar scaleFactor=1;\n\t\t\txdv.createGadget(\"piece#\"+index, {\n\t\t\t\t\"2d\" : {\n\t\t\t\t\ttype : \"sprite\",\n\t\t\t\t\tz : 4,\n\t\t\t\t\tfile : fullPath+\"/res/images/basic-pieces-v2x200.png\",\n\t\t\t\t\tclipx: 0,\n\t\t\t\t\tclipy: side==1?0:100,\n\t\t\t\t\tclipwidth: 100,\n\t\t\t\t\tclipheight: 100,\n\t\t\t\t\twidth: SIZE,//*.9,\n\t\t\t\t\theight: SIZE,//*.9,\n\t\t\t\t\topacity: 1,\n\t\t\t\t},\n\t\t\t\t\"green\":{\n\t\t\t\t\tfile : fullPath+\"/res/images/basic2.png\",\n\t\t\t\t},\n\t\t\t\t\"2d-wood-alquerque\" : {\n\t\t\t\t\ttype : \"sprite\",\n\t\t\t\t\tz : 4,\n\t\t\t\t\tfile : fullPath+\"/res/images/basic-alquerque2.png\",\n\t\t\t\t\tclipx: 0,\n\t\t\t\t\tclipy: side==1?0:150,\n\t\t\t\t\tclipwidth: 150,\n\t\t\t\t\tclipheight: 150,\n\t\t\t\t\twidth: SIZE*.9,\n\t\t\t\t\theight: SIZE*.9,\n\t\t\t\t\topacity: 1,\n\t\t\t\t},\n\t\t\t\t\"kids\":{\n\t\t\t\t\ttype : \"sprite\",\n\t\t\t\t\tz : 4,\n\t\t\t\t\tfile : fullPath+\"/res/images/pieces-kids200x200.png\",\n\t\t\t\t\tclipx: 0,\n\t\t\t\t\tclipy: side==1?0:100,\n\t\t\t\t\tclipwidth: 100,\n\t\t\t\t\tclipheight: 100,\n\t\t\t\t\twidth: SIZE*.9,\n\t\t\t\t\theight: SIZE*.9,\n\t\t\t\t\topacity: 1,\n\t\t\t\t},\n\t\t\t\t\"classic3d\" : {\n\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\tcreate: function(callback){\n\t\t\t\t\t\tthis._pKey=\"dummy\";\n\t\t\t\t\t\treturn $this.chMakeDummyMesh(xdv);\n\t\t\t\t\t},\n\t\t\t\t\tdisplay: function(force,options,delay){\n\t\t\t\t\t\tvar key=\"_\"+options.checkersType+\"_\"+options.checkersSide+\"_\";\n\t\t\t\t\t\tif (key!=this._pKey){\n\t\t\t\t\t\t\tthis._pKey=key;\n\t\t\t\t\t\t\tvar avat=this;\n\t\t\t\t\t\t\tcurrentGame.chMakeTokenPiece(avat,options.checkersType,options.checkersSide,function(mesh){\n\t\t\t\t\t\t\t\tavat.replaceMesh(mesh,options,delay);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tscale: [0.5*10/SWIDTH,0.5*10/SWIDTH,0.5*10/SWIDTH],\n\t\t\t\t\tz : CLASSIC3D_FLOOR_Z,\t\t\t\n\t\t\t\t},\n\t\t\t\t\"turkish3d\":{\n\t\t\t\t\ttype: \"meshfile\",\n\t\t\t\t\tscale: [1,1,1],\n\t\t\t\t\tsmooth : 0,\n\t\t\t\t\tz : CLASSIC3D_FLOOR_Z,\t\t\t\n\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\t\tcolor : side==1?CLASSIC_WHITE:CLASSIC_BLACK,\n\t\t\t\t\t\t\tshininess : side==1?10:20, //side==1?255:10,\n\t\t\t\t\t\t\tspecular:side==1?{r:.5,g:.5,b:.5}:{r:.6,g:.3,b:0},\n\t\t\t\t\t\t\treflectivity: 0.5,\n\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"alquerque3d\":{\n\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\tscale: [scaleFactor,scaleFactor,scaleFactor],\n\t\t\t\t\t//opacity: opacity,\n\t\t\t\t\tcreate: function() {\n\t\t\t\t\t\tvar shininess = 500, specular = 0x050505, bumpScale = 0.005, shading = THREE.SmoothShading, transparent=false, opacity=1;\n\t\t\t\t\t\tvar sphereMaterial = new THREE.MeshPhongMaterial( {\n\t\t\t\t\t\t\tname: \"ball\",\n\t\t\t\t\t\t\tspecular: specular,\n\t\t\t\t\t\t\tshininess: shininess,\n\t\t\t\t\t\t\tshading: shading,\n\t\t\t\t\t\t\topacity: opacity,\n\t\t\t\t\t\t\ttransparent: transparent,\n\t\t\t\t\t\t\tenvMap: textureCube,\n\t\t\t\t\t\t\treflectivity: 0.2,\n\t\t\t\t\t\t\tcombine: THREE.MixOperation, \n\t\t\t\t\t\t} );\n\t\t\t\t\t\tvar geometry = sphereGeometry.clone();\n\t\t\t\t\t\tfor (var i = 0; i < geometry.faces.length; i++) {\n\t\t\t\t\t\t\tgeometry.faces[i].materialIndex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar sphere = new THREE.Mesh(geometry,new THREE.MultiMaterial( [sphereMaterial] ));\n\t\t\t\t\t\treturn sphere;\n\t\t\t\t\t},\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\"turtles3d\" :{\n\t\t\t\t\ttype : \"custommesh3d\",\n\t\t\t\t\tcreate: function(callback){\n\t\t\t\t\t\t\t\tcreateTurtle(this,callback,\"pawn\",side);\n\t\t\t\t\t\t\t},\n\t\t\t\t\trotate: side==1?180:0,\n\t\t\t\t\tscale: [0.5,0.5,0.5],\n\t\t\t\t\tcheckersType: 0,\n\t\t\t\t\tz : CLASSIC3D_FLOOR_Z,\t\t\t\n\t\t\t\t\tdisplay: function(force,options){\n\t\t\t\t\t\tif(this.object3d.children){\n\t\t\t\t\t\t\tfor(var i=0;i<this.object3d.children.length;i++){\n\t\t\t\t\t\t\t\tvar child=this.object3d.children[i];\n\t\t\t\t\t\t\t\tswitch (child.title){\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"turtle-hotel\":\n\t\t\t\t\t\t\t\t\t\tchild.joclyVisible=(options.checkersType==1 || (this.options.checkersType==1 && options.checkersType!==0));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"turtle-house\":\n\t\t\t\t\t\t\t\t\t\tchild.joclyVisible=(options.checkersType==0 || (this.options.checkersType==0 && options.checkersType!==1));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t}\n\t\tfunction createFrame(avatar,cx,cy){\n\t\t\t\n\t\t\tfunction setupShapeSquare(cx,cy){\n\t\t\t\tvar sh = new THREE.Shape();\n\t\t\t\tsh.moveTo(-cx/2 , -cy/2);\n\t\t\t\tsh.lineTo(cx/2 , -cy/2);\n\t\t\t\tsh.lineTo(cx/2 , cy/2);\n\t\t\t\tsh.lineTo(-cx/2 , cy/2);\n\t\t\t\treturn sh;\t\t\n\t\t\t}\t\t\t\t\t\n\t\t\tvar bevelSize = .1;\n\t\t\tvar frameWidth=0.5;\n\t\t\tvar frameShape = setupShapeSquare(cx+frameWidth+bevelSize, cy+frameWidth+bevelSize);\n\t\t\tvar holeShape = setupShapeSquare(cx+bevelSize,cy+bevelSize);\n\t\t\tframeShape.holes.push(holeShape);\n\n\t\t\tvar extrudeSettings = {\n\t\t\t\tamount: .4 , // main extrusion thickness\n\t\t\t\tsteps: 1 , // nb of main extrusion steps\n\t\t\t\tbevelSize: bevelSize, \n\t\t\t\tbevelThickness:.04,\n\t\t\t\tbevelSegments: 1, // nb of bevel segment\n\t\t\t};\n\n\t\t\tvar frameGeo = new THREE.ExtrudeGeometry( frameShape, extrudeSettings );\n\t\t\t\n\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\tmatrix.makeRotationX(-Math.PI/2)\n\t\t\tframeGeo.applyMatrix(matrix);\n\t\t\tvar frameColor=\"#000000\";\n\t\t\tif (avatar.options.frameColorFill) frameColor=avatar.options.frameColorFill;\n\t\t\tframeMat = new THREE.MeshPhongMaterial({\n\t\t\t\tcolor: frameColor,\n\t\t\t\tshininess: 500,\n\t\t\t\tspecular: '#444444',\n\t\t\t\t//ambient: '#000000',\n\t\t\t});\n\t\t\tvar frameObj = new THREE.Mesh( frameGeo , frameMat);\n\t\t\tframeObj.position.y=-extrudeSettings.amount-.01;\n\t\t\treturn frameObj;\n\t\t}\n\n\t\tfunction createGridBoard(avatar,callback, notations, viewAs){\n\t\n\t\t\tvar parent=new THREE.Object3D();\t\n\t\t\tvar TEXTURE_CANVAS_SZ=1024;\n\t\t\t\n\t\t\tvar canvasDiffuse=document.createElement('canvas');\n\t\t\tcanvasDiffuse.width=canvasDiffuse.height=TEXTURE_CANVAS_SZ;\n\t\t\tvar textureDiff =  new THREE.Texture(canvasDiffuse);\t\t\t\t\t\n\t\t\tvar canvasBump=document.createElement('canvas');\n\t\t\tcanvasBump.width=canvasBump.height=TEXTURE_CANVAS_SZ;\n\t\t\tvar textureBump =  new THREE.Texture(canvasBump);\n\t\t\tvar margin=5; //prct\n\t\t\tif (avatar.options.margin!==undefined) margin=avatar.options.margin;\n\t\t\t\n\t\t\t\n\t\t\tfunction paintNotations(ctx,cellCx,cellCy,fillStyle){\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t\tctx.font = Math.ceil(cellCx / 5) + 'px Monospace';\n\t\t\t\tfor(var pos=0; pos<$this.g.Coord.length;pos++){\n\t\t\t\t\tvar rcCoord=$this.g.Coord[pos];\n\t\t\t\t\t//var rcCoord=$this.getCCoord(pos);\n\t\t\t\t\tvar r=rcCoord[0];\n\t\t\t\t\tvar c=$this.g.getColumn(rcCoord[1],r);\n\t\t\t\t\tif ($this.mViewAs>0) r=HEIGHT-1-r;\n\t\t\t\t\tif ($this.mViewAs<0) c=SWIDTH-1-c;\n\t\t\t\t\tvar text=$this.checkersPosToString(pos);\n\t\t\t\t\tvar x = (c+(1-SWIDTH)/2)*cellCx-cellCx / 3;\n\t\t\t\t\tvar y = (r+(1-HEIGHT)/2)*cellCy-cellCy / 3;\n\t\t\t\t\tctx.fillText(text,x,y);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tavatar.getResource(\"image|\"+fullPath+\"/res/images/wood-chipboard-5.jpg\",function(img){\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar blackColor=\"rgba(159, 76, 12,0.2)\";\n\t\t\t\tvar whiteColor=\"rgba(246, 222, 174,0.5)\"\n\t\t\t\t\n\t\t\t\tif (avatar.options.blackCellFill!==undefined) blackColor=avatar.options.blackCellFill;\n\t\t\t\tif (avatar.options.whiteCellFill!==undefined) whiteColor=avatar.options.whiteCellFill;\n\t\t\t\t// create board floor\n\t\t\t\tvar ctx=canvasDiffuse.getContext(\"2d\");\n\t\t\t\tctx.translate(TEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ/2);\n\t\t\t\tctx.drawImage(img,-TEXTURE_CANVAS_SZ/2,-TEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t//TEXTURE_CANVAS_SZ=(1+2*margin/100)*SWIDTH*cellCx\n\t\t\t\t\n\t\t\t\tfunction drawCell(ctx,fillStyle,xCenter,yCenter,cx,cy){\n\t\t\t\t\tctx.fillStyle=fillStyle;\n\t\t\t\t\tctx.fillRect(xCenter-cx/2,yCenter-cy/2,cx,cy);\n\t\t\t\t}\n\t\t\t\tfunction drawLines(ctx){\n\t\t\t\t\tctx.strokeStyle=\"#000000\";\n\t\t\t\t\tctx.lineWidth=\"2\";\n\t\t\t\t\tfor(var r=0;r<HEIGHT;r++){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo((-SWIDTH/2)*cellCx,(-HEIGHT/2+r)*cellCy);\n\t\t\t\t\t\tctx.lineTo((SWIDTH/2)*cellCx,(-HEIGHT/2+r)*cellCy);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t\tfor(var c=0;c<SWIDTH;c++) {\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo((-SWIDTH/2+c)*cellCx,(-HEIGHT/2)*cellCy);\n\t\t\t\t\t\tctx.lineTo((-SWIDTH/2+c)*cellCx,(HEIGHT/2)*cellCy);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t\tctx.lineWidth=\"4\";\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo((-SWIDTH/2)*cellCx,(-HEIGHT/2)*cellCy);\n\t\t\t\t\tctx.lineTo((SWIDTH/2)*cellCx,(-HEIGHT/2)*cellCy);\n\t\t\t\t\tctx.lineTo((SWIDTH/2)*cellCx,(HEIGHT/2)*cellCy);\n\t\t\t\t\tctx.lineTo((-SWIDTH/2)*cellCx,(HEIGHT/2)*cellCy);\n\t\t\t\t\tctx.lineTo((-SWIDTH/2)*cellCx,(-HEIGHT/2)*cellCy);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// pre paint with black fill color\n\t\t\t\tctx.fillStyle=blackColor;\n\t\t\t\tctx.fillRect(-TEXTURE_CANVAS_SZ/2,-TEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t// paint diffuse cells\n\t\t\t\tvar cellCx=TEXTURE_CANVAS_SZ/(SWIDTH*(1+2*margin/100));\n\t\t\t\tvar cellCy=TEXTURE_CANVAS_SZ/(HEIGHT*(1+2*margin/100));\n\t\t\t\tfor(var r=0;r<HEIGHT;r++)\n\t\t\t\t\tfor(var c=0;c<SWIDTH;c++) {\n\t\t\t\t\t\t(function(r,c){\n\t\t\t\t\t\t\tvar i=r+c;\n\t\t\t\t\t\t\tdrawCell(ctx,i%2?blackColor:whiteColor,(c+(1-SWIDTH)/2)*cellCx,(r+(1-HEIGHT)/2)*cellCy,cellCx,cellCy);\n\t\t\t\t\t\t})(r,c);\n\t\t\t\t\t}\n\t\t\t\t// paint diffuse lines\n\t\t\t\tdrawLines(ctx);\n\t\t\t\tvar notationColor=whiteColor;\n\t\t\t\tif (avatar.options.notationColor!==undefined) notationColor=avatar.options.notationColor;\n\t\t\t\tif (notations) \n\t\t\t\t\tpaintNotations(ctx,cellCx,cellCy,notationColor);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// paint bump white + lines\n\t\t\t\tvar ctxBump=canvasBump.getContext(\"2d\");\n\t\t\t\tctxBump.translate(TEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ/2);\n\t\t\t\tctxBump.fillStyle=\"#ffffff\";\n\t\t\t\tctxBump.fillRect(-TEXTURE_CANVAS_SZ/2,-TEXTURE_CANVAS_SZ/2,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\tdrawLines(ctxBump);\n\t\t\t\tif (notations) \n\t\t\t\t\tpaintNotations(ctxBump,cellCx,cellCy,\"#000000\");\n\n\t\t\t\t\n\t\t\t\ttextureDiff.needsUpdate=true;\n\t\t\t\ttextureBump.needsUpdate=true;\n\t\t\t\t\n\t\t\t\tvar bsp=\"#010101\";\n\t\t\t\tif (avatar.options.boardSpecular!==undefined) bsp=avatar.options.boardSpecular;\n\t\t\t\t\n\t\t\t\tvar geo=new THREE.PlaneGeometry((1+2*margin/100)*SWIDTH*SIZE/1000,(1+2*margin/100)*HEIGHT*SIZE/1000);\n\t\t\t\tvar mesh=new THREE.Mesh(geo, new THREE.MeshPhongMaterial({map:textureDiff,bumpMap:textureBump,bumpScale:0.005,specular:bsp,shininess:400}));\n\t\t\t\tmesh.rotation.x=-Math.PI/2;\t\n\t\t\t\tmesh.receiveShadow=true;\n\t\t\t\tparent.add(mesh);\t\t\t\t\t\t\t\t\n\n\t\n\t\t\t\t// add border frame\n\t\t\t\tvar cx=(1+2*margin/100)*SWIDTH*SIZE/1000;\n\t\t\t\tvar cy=(1+2*margin/100)*HEIGHT*SIZE/1000;\n\t\t\t\tvar frameObj = createFrame(avatar,cx,cy);\n\t\t\t\tparent.add(frameObj);\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\tcallback(parent);\n\t\t\t});\t\t\t\n\t\t}\n\n\t\tfunction createLewebBoard(avatar,callback){\n\t\t\tvar webGeo=new THREE.IcosahedronGeometry(15,3);\n\t\t\tvar webMat=new THREE.MeshPhongMaterial({color: 0xffffff, wireframe: true, shininess:30, abient:0x333333, specular:0x0088ff});\n\t\t\t\n\t\t\tif (leweblook==\"flat\"){\n\t\t\t\tvar delta=10;\n\t\t\t\tfor (var i =0 ; i < webGeo.vertices.length; i++){\n\t\t\t\t\twebGeo.vertices[i].add(new THREE.Vector3(-delta/2+Math.random()*delta,-delta/2+Math.random()*delta,0));\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tvar mesh=new THREE.Mesh(webGeo,webMat);\n\t\t\tcallback(mesh);\n\t\t}\n\t\tif(this.mInitial) {\n\t\t\tfor(var i=0;i<this.mInitial.pieces.length;i++) {\n\t\t\t\tvar piece=this.mInitial.pieces[i];\n\t\t\t\tCreatePiece(piece.s,i);\n\t\t\t}\n\t\t\tPCOUNT=0;\n\t\t\tfor(var i in INITIAL.a)\n\t\t\t\tif(INITIAL.a.hasOwnProperty(i))\n\t\t\t\t\tPCOUNT++;\n\t\t\tfor(var i in INITIAL.b)\n\t\t\t\tif(INITIAL.b.hasOwnProperty(i))\n\t\t\t\t\tPCOUNT++;\n\t\t} else {\n\t\t\tvar index=0;\n\t\t\tfor(var i in INITIAL.a)\n\t\t\t\tif(INITIAL.a.hasOwnProperty(i))\n\t\t\t\t\tCreatePiece(JocGame.PLAYER_A,index++);\n\t\t\tfor(var i in INITIAL.b)\n\t\t\t\tif(INITIAL.b.hasOwnProperty(i))\n\t\t\t\t\tCreatePiece(JocGame.PLAYER_B,index++);\n\t\t\tPCOUNT=INITIAL.a.length+INITIAL.b.length;\n\t\t}\n\n\t\tfunction createAlquerqueBoard(avatar,callback){\n\t\t\tvar piecesParts=[\"board-alquerque-external-frame\",\"board-checkers-triangle\",\"board-checkers-slot\"];\n\t\t\tvar metalMat=new THREE.MeshPhongMaterial({color: 0x222222, shininess:10, specular:0x444444});\t\t\t\n\t\t\tvar resCount=piecesParts.length;\n\t\t\tvar parentObject;\n\t\t\tvar childObjects=[];\n\t\t\tfunction checkLoaded(){\n\t\t\t\tif (--resCount==0){\t\t\n\t\t\t\t\tfor (var n=0 ; n < childObjects.length ; n++) parentObject.add(childObjects[n]);\n\t\t\t\t\tcallback(parentObject);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(var p=0 ; p < piecesParts.length ; p++){\n\t\t\t\tvar smooth=0;\n\t\t\t\tvar shadow=true;\n\t\t\t\tvar flatShading=false;\n\t\t\t\tvar visible=true;\n\t\t\t\tif (piecesParts[p]==\"board-checkers-slot\")\n\t\t\t\t\tsmooth=0;\n\t\t\t\tvar url=\"smoothedfilegeo|\"+smooth+\"|\"+fullPath+\"/res/xd-view/meshes/\"+piecesParts[p]+\".js\";\n\t\t\t\t(function(p){\n\t\t\t\t\tavatar.getResource(url,function(geometry , materials){\n\t\t\t\t\t \tvar materials0=[];\n \t\t\t\t\t\tfor(var m=0;m<materials.length;m++){\n \t\t\t\t\t\t\tvar mat=materials[m].clone();\n \t\t\t\t\t\t\tif (mat.name != \"mat.slot\") mat.shading=THREE.FlatShading;\n \t\t\t\t\t\t\tmaterials0.push(mat);\n \t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(p==0){\n\t\t\t\t\t\t\tmaterials0[0].specular={r:0,g:0,b:0};\n\t\t\t\t\t\t\tparentObject = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n\t\t\t\t\t\t\tmargin=-4;\n\t\t\t\t\t\t\tvar cx=(1+2*margin/100)*SWIDTH*SIZE/1000;\n\t\t\t\t\t\t\tvar cy=(1+2*margin/100)*HEIGHT*SIZE/1000;\n\t\t\t\t\t\t\tvar frameObj = createFrame(avatar,cx,cy);\n\t\t\t\t\t\t\tframeObj.position.y+=.2;\n\t\t\t\t\t\t\tframeObj.scale.y*=1.2;\n\t\t\t\t\t\t\tparentObject.add(frameObj);\n\t\t\t\t\t\t\tparentObject.receiveShadow=true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tvar b3dSize=2; // cell size in blender\n\t\t\t\t\t\t\tmaterials0[0].shininess = 500;\n\t\t\t\t\t\t\tmaterials0[0].specular.setHex(0x020202);\n\t\t\t\t\t\t\tswitch(piecesParts[p]) {\n\t\t\t\t\t\t\t\tcase \"board-checkers-triangle\":\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar flowersPos=[{x:1,y:1},{x:1,y:-1},{x:-1,y:-1},{x:-1,y:1}];\n\t\t\t\t\t\t\t\t\tvar bcolors=[0x001144,0x220000];\n\t\t\t\t\t\t\t\t\tfor (var i=0 ; i < 4 ; i++){\n\t\t\t\t\t\t\t\t\t\tfor (var j=0 ; j < 4 ; j++){\n\t\t\t\t\t\t\t\t\t\t\tfor (var k=0 ; k < 2 ; k++){\n\t\t\t\t\t\t\t\t\t\t\t\t//materials0[0].ambiant=0xff0000;\n\t\t\t\t\t\t\t\t\t\t\t\tvar mesh;\n\t\t\t\t\t\t\t\t\t\t\t\tif (k==0) \n\t\t\t\t\t\t\t\t\t\t\t\t\tmesh = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\tmesh = new THREE.Mesh( geometry , metalMat);\n\t\t\t\t\t\t\t\t\t\t\t\tmesh.receiveShadow=shadow;\n\t\t\t\t\t\t\t\t\t\t\t\tmesh.position.x=b3dSize*flowersPos[i].x;\n\t\t\t\t\t\t\t\t\t\t\t\tmesh.position.z=b3dSize*flowersPos[i].y;\n\t\t\t\t\t\t\t\t\t\t\t\tmesh.rotation.y=Math.PI/2*j;\n\t\t\t\t\t\t\t\t\t\t\t\tif (k>0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tmesh.rotation.x=Math.PI;\n\t\t\t\t\t\t\t\t\t\t\t\t\tmesh.position.y=0.28;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tchildObjects.push(mesh);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"board-checkers-slot\": \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfor (var r=0 ; r < 5 ; r++){\n\t\t\t\t\t\t\t\t\t\tfor (var c=0 ; c < 5 ; c++){\n\t\t\t\t\t\t\t\t\t\t\tvar mesh=new THREE.Mesh( geometry , metalMat); //new THREE.MultiMaterial( materials0 ) );\n\t\t\t\t\t\t\t\t\t\t\tmesh.receiveShadow=shadow;\n\t\t\t\t\t\t\t\t\t\t\tmesh.position.x=b3dSize*(c-2);\n\t\t\t\t\t\t\t\t\t\t\tmesh.position.z=b3dSize*(r-2);\n\t\t\t\t\t\t\t\t\t\t\tchildObjects.push(mesh);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar mesh=new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n\t\t\t\t\t\t\t\t\tmesh.receiveShadow=shadow;\n\t\t\t\t\t\t\t\t\tmesh.title=piecesParts[p];\n\t\t\t\t\t\t\t\t\tchildObjects.push(mesh);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcheckLoaded();\n\t\t\t\t\t});\n\t\t\t\t})(p);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar turkishBoardOptions= {\n\t\t\tblackCellFill:\"rgba(140, 41, 41,0.4)\",\n\t\t\twhiteCellFill:\"rgba(140, 41, 41,0.4)\",\n\t\t\tnotationColor:\"#000000\",\n\t\t};\n\t\tvar turtlesBoardOptions={\n\t\t\tblackCellFill:\"rgba(0,100,0,0.5)\",\n\t\t\twhiteCellFill:\"rgba(255,255,255,1)\",\n\t\t\tframeColorFill:\"#ffffff\",\n\t\t\tboardSpecular:\"#000000\",\n\t\t\tmargin:10,\n\t\t}\n\n\t\txdv.createGadget(\"boardframeNotations\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\tcreate: function(callback){\n\t\t\t\t\tcreateGridBoard(this,callback,true,1);\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"turkish3d\": turkishBoardOptions,\n\t\t\t\"turtles3d\": turtlesBoardOptions,\n\t\t});\n\t\txdv.createGadget(\"boardframeNotationsB\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\tcreate: function(callback){\n\t\t\t\t\tcreateGridBoard(this,callback,true,-1);\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"turkish3d\": turkishBoardOptions,\n\t\t\t\"turtles3d\": turtlesBoardOptions,\n\t\t});\n\t\txdv.createGadget(\"boardframeB\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\tcreate: function(callback){\n\t\t\t\t\tcreateGridBoard(this,callback,false,-1);\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"turkish3d\": turkishBoardOptions,\n\t\t\t\"turtles3d\": turtlesBoardOptions,\n\t\t});\n\t\n\t\txdv.createGadget(\"boardframe\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\tcreate: function(callback){\n\t\t\t\t\tcreateGridBoard(this,callback,false,1);\n\t\t\t\t},\t\n\t\t\t},\n\t\t\t\"turkish3d\": turkishBoardOptions,\n\t\t\t\"turtles3d\": turtlesBoardOptions,\n\t\t\t\"alquerque3d\":{\n\t\t\t\ttype : \"custommesh3d\",\n\t\t\t\tcreate: function(callback){\n\t\t\t\t\tcreateAlquerqueBoard(this,callback);\n\t\t\t\t},\n\t\t\t\tscale: [1.2,1.2,1.2],\n\t\t\t\tcheckersType: 0,\n\t\t\t\tz : -320,\n\t\t\t},\n\t\t});\n\t\t\n\t\txdv.createGadget(\"turtlesworld\", {\n\t\t\t\"turtles3d\":{\n                harbor: false,\n\t\t\t\ttype : \"custommesh3d\",\n\t\t\t\tcolor: 0x668800,\n\t\t\t\tz:-850,\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar $this=this;\n\t\t\t\t\tvar smooth=0;\n\t\t\t\t\tvar gg=new THREE.CylinderGeometry(150,150,1, 64, 1, false);\t\t\t\t\t\n\t\t\t\t\tvar gm=new THREE.MeshPhongMaterial( { color: 0xff0000 /*, ambient : 0x000000 */} );\n\t\t\t\t\tvar board = new THREE.Mesh( gg , gm );\n\t\t\t\t\tboard.receiveShadow=true;\n\t\t\t\t\t\n\t\t\t\t\tthis.getResource(\"smoothedfilegeo|\"+smooth+\"|\"+fullPath+\"/res/xd-view/meshes/rainbowflat.js\",function(geometry , materials) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tmaterials[0].transparent=true;\n\t\t\t\t\t\tmaterials[0].opacity=.8;\n\t\t\t\t\t\tmaterials[0].side = THREE.DoubleSide;\n\t\t\t\t\t\tmaterials[0].shininess = 10;\n\t\t\t\t\t\tmaterials[0].specular.setHex(0x222222);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar rainbow = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials ) );\n\t\t\t\t\t\trainbow.scale.set(7,7,7);\n\t\t\t\t\t\trainbow.position.set(7,0,-7);\n\t\t\t\t\t\trainbow.rotation.y=-45;\n\t\t\t\t\t\tboard.add(rainbow);\n\t\t\t\t\t\t$this.objectReady(board);\n\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t\t\n\t\txdv.createGadget(\"flowers\", {\n\t\t\t\"turtles3d\" : {\n                harbor: false,\n\t\t\t\ttype : \"custommesh3d\",\t\t\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar $this=this;\n\t\t\t\t\tvar container=new THREE.Object3D();\n\t\t\t\t\tvar catCount=1;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tvar texPath = fullPath + \"/res/xd-view/meshes/star.png\" ;\n\t\t\t\t\t\n\t\t\t\t\tvar textureLoader = new THREE.TextureLoader();\n\t\t\t\t\ttextureLoader.setCrossOrigin(\"anonymous\");\n\t\t\t\t\ttextureLoader.load(texPath,\n\t\t\t\t\t\t\tfunction(texture){\t\t\n\t\t\t\t\t\t\t\tvar starSprite = texture ; \n\t\t\t\t\t\t\t\tfor(var i=0;i<catCount;i++) {\n\t\t\t\t\t\t\t\t\tvar material = new THREE.PointsMaterial( { size: 0.5, map: starSprite, blending: THREE.NormalBlending,  depthTest: true, transparent : true } );\n\t\t\t\t\t\t\t\t\tvar geometry = new THREE.Geometry();\n\t\t\t\t\t\t\t\t\tfor(var i=0;i<1000;i++) {\n\t\t\t\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\t\t\t\t\tvar r=12+Math.random()*40;\n\t\t\t\t\t\t\t\t\t\tvar a=Math.random()*2*Math.PI;\n\t\t\t\t\t\t\t\t\t\tvertex.x = r*Math.cos(a);\n\t\t\t\t\t\t\t\t\t\tvertex.z = r*Math.sin(a);\n\t\t\t\t\t\t\t\t\t\tvertex.y = 0.2;\n\t\t\t\t\t\t\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tmaterial.color.setHex( 0xffffff );\n\t\t\t\t\t\t\t\t\tvar particles = new THREE.Points( geometry, material);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tcontainer.add(particles)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this.objectReady(container);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t// Function called when download progresses\n\t\t\t\t\t\t\tfunction ( xhr ) {\n\t\t\t\t\t\t\t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t// Function called when download errors\n\t\t\t\t\t\t\tfunction ( xhr ) {\n\t\t\t\t\t\t\t\tconsole.log( 'An error happened' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t\txdv.createGadget(\"rocks\", {\n\t\t\t\"turtles3d\" : {\n                harbor: false,\n\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\tz: -200,\n\t\t\t\tscale: [1,1,1],\n\t\t\t\tflatShading: true,\n\t\t\t\tcreate: function() {\t\t\t\t\t\n\t\t\t\t\tvar $this=this;\n\t\t\t\t\tthis.getResource(\"smoothedfilegeo|\"+0+\"|\"+fullPath+\"/res/xd-view/meshes/rocksmoothed.js\",function(geometry , materials) {\n\t\t\t\t\t\tvar rocks=new THREE.Object3D();\n\t\t\t\t\t\tfor (var i=0;i<100;i++){\n\t\t\t\t\t\t\tvar rock=new THREE.Mesh(geometry,new THREE.MultiMaterial( materials ));\n\t\t\t\t\t\t\tvar r=20+Math.random()*40;\n\t\t\t\t\t\t\tvar a=Math.random()*2*Math.PI;\n\t\t\t\t\t\t\tvar sz=0.3+Math.random()*2;\n\t\t\t\t\t\t\trock.scale.set(sz,sz,sz);\n\t\t\t\t\t\t\trock.position.x = r*Math.cos(a);\n\t\t\t\t\t\t\trock.position.z = r*Math.sin(a);\n\t\t\t\t\t\t\trock.rotation.y=Math.random()*2*Math.PI;\n\t\t\t\t\t\t\trock.castShadow=true;\n\t\t\t\t\t\t\trocks.add(rock);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this.objectReady(rocks);\n\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t\txdv.createGadget(\"fences\", {\n\t\t\t\"turtles3d\" : {\n                harbor: false,\n\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\tz: -200,\n\t\t\t\tscale: [2,2,2],\n\t\t\t\tflatShading: true,\n\t\t\t\tcreate: function() {\t\t\t\t\t\n\t\t\t\t\tvar $this=this;\n\t\t\t\t\tthis.getResource(\"smoothedfilegeo|\"+0+\"|\"+fullPath+\"/res/xd-view/meshes/turtle-fences.js\",function(geometry , materials) {\n\t\t\t\t\t\n\t\t\t\t\t\tvar fenceMat = new THREE.MeshPhongMaterial({color : 0xffffff , specular:0x222222 , shininess:100, shading:THREE.FlatShading});\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar fences=new THREE.Mesh(geometry,fenceMat);\n\t\t\t\t\t\tfor (var i=0;i<3;i++){\n\t\t\t\t\t\t\tvar fence=new THREE.Mesh(geometry,fenceMat);\n\t\t\t\t\t\t\tfence.rotation.y=(i+1)*(Math.PI/2);\n\t\t\t\t\t\t\tfence.castShadow=true;\n\t\t\t\t\t\t\tfences.add(fence);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this.objectReady(fences);\n\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t\tfor(var r=0;r<HEIGHT;r++)\n\t\t\tfor(var c=0;c<SWIDTH;c++) {\n\t\t\t\tvar i=r*SWIDTH+c;\n\t\t\t\txdv.createGadget(\"square#\"+i, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\tz : 2,\n\t\t\t\t\t\tclasses : \"\",\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\":{\t\n\t\t\t\t\t\treceiveShadow:true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\txdv.saveGadgetProps(\"square#\"+i,[\"color\"],\"initial\");\n\t\t\t}\n\t\t\n\t\tfunction createScreen(videoTexture) {\n\t\t\tvar $this=this;\n\t\t\tvar smooth=0;\n\t\t\tthis.getResource(\"smoothedfilegeo|\"+smooth+\"|\"+fullPath+\"/res/xd-view/meshes/flatscreen.js\",function(geometry , materials) {\n \t\t\t\tvar materials0=[];\n \t\t\t\t\n \t\t\t\tfor(var i=0;i<materials.length;i++){\n                    if (materials[i].name==\"screen\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n \t\t\t\t\t\tmat.map=videoTexture;\n \t\t\t\t\t\tmat.emissive={r:1,g:1,b:1},\n \t\t\t\t\t\tmat.overdraw = true;\n \t\t\t\t\t\t//mat.side = THREE.DoubleSide;\n \t\t\t\t\t\tmaterials0.push(mat);\n                    }else if (materials[i].name==\"boomer\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n\t \t\t\t\t\tmat.shading=THREE.FlatShading;\n\t \t\t\t\t\tmaterials0.push(mat);\n                    }else if (materials[i].name==\"tv\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n\t \t\t\t\t\tmat.shading=THREE.FlatShading;\n\t \t\t\t\t\tmaterials0.push(mat);\n \t\t\t\t\t}else{\n \t\t\t\t\t\tmaterials0.push(materials[i]);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tvar mesh = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n \t\t\t\t\n \t\t\t\tmesh.visible = false;\n \t\t\t\t$this.objectReady(mesh);\n\t\t\t});\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\txdv.createGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\tcreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\tcreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t\n\t\tthis.xdInitExtra(xdv);\n\t}\n\t\n\tView.Game.xdBuildScene = function(xdv) {\n\t\t\n\t\tcurrentGame=this;\n\t\tvar $this=this;\n\t\t\n\t\txdv.updateGadget(\"fences\",{\n\t\t\t\"turtles3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"rocks\",{\n\t\t\t\"turtles3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"flowers\",{\n\t\t\t\"turtles3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"turtlesworld\",{\n\t\t\t\"turtles3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\n\t\tvar screenZoom=2;\n\t\txdv.updateGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tscale:[screenZoom,screenZoom,screenZoom],\n\t\t\t\trotate: this.mViewAs==1?180:0,\n\t\t\t\trotateX: this.mViewAs==1?30:-30,\n\t\t\t\tz: 3000,\n\t\t\t\ty: this.mViewAs==1?12000:-12000,\n\t\t\t\tplayerSide: 1,\n\t\t\t},\n\t\t});\n\n\t\txdv.updateGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tscale:[screenZoom,screenZoom,screenZoom],\n\t\t\t\trotate: this.mViewAs==1?0:180,\n\t\t\t\trotateX: this.mViewAs==1?-30:30,\n\t\t\t\tz: 3000,\n\t\t\t\ty: this.mViewAs==1?-12000:12000,\n\t\t\t\tplayerSide: -1,\n\t\t\t},\n\t\t});\n\n\t\txdv.updateGadget(\"board\",{\n\t\t\t\"2d\": {\n\t\t\t\tvisible: true,\n\t\t\t\trotate: this.mViewAs==JocGame.PLAYER_A?0:180,\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: SWIDTH*SIZE,\n\t\t\t\theight: HEIGHT*SIZE,\n\t\t\t},\n\t\t});\n\t\t\n\t\txdv.updateGadget(\"boardframe\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: !this.mNotation && (this.mViewAs>0),\n\t\t\t},\n\t\t\t\"alquerque3d\":{\n\t\t\t\tvisible: true,\n\t\t\t}\n\t\t});\n\t\txdv.updateGadget(\"boardframeNotations\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: this.mNotation && (this.mViewAs>0),\n\t\t\t},\n\t\t\t\"alquerque3d\":{\n\t\t\t\tvisible: false,\n\t\t\t}\n\t\t});\n\t\txdv.updateGadget(\"boardframeB\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: !this.mNotation && (this.mViewAs<0),\n\t\t\t},\n\t\t\t\"alquerque3d\":{\n\t\t\t\tvisible: false,\n\t\t\t}\n\t\t});\n\t\txdv.updateGadget(\"boardframeNotationsB\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: this.mNotation && (this.mViewAs<0),\n\t\t\t},\n\t\t\t\"alquerque3d\":{\n\t\t\t\tvisible: false,\n\t\t\t}\n\t\t});\n\n\t\txdv.updateGadget(\"lightside\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"lightback\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\t/*xdv.updateGadget(\"skyball\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});*/\n\t\t\n\t\tfor(var r=0;r<HEIGHT;r++)\n\t\t\tfor(var c=0;c<SWIDTH;c++) {\n\t\t\tvar i=r*SWIDTH+c;\n\t\t\tvar black=(r+c)%2;\n\t\t\tvar coord=this.getVCoord(r,c);\n\t\t\txdv.updateGadget(\"square#\"+i, {\n\t\t\t\tbase : {\n\t\t\t\t\tx : coord[0],\n\t\t\t\t\ty : coord[1],\n\t\t\t\t},\n\t\t\t\t\"2d\" : {\n\t\t\t\t\tinitialClasses : black?\"cell-black\":\"cell-white\",\n\t\t\t\t\twidth : SIZE,\n\t\t\t\t\theight : SIZE,\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tvisible: true,\n\t\t\t\t\tscale: [1,1,1],\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t}\n\t\tfor(var pos=0;pos<this.g.Coord.length;pos++) {\n\t\t\tvar coord=this.getCCoord(pos);\n\t\t\txdv.updateGadget(\"text#\"+pos, {\n\t\t\t\tbase : {\n\t\t\t\t\tvisible: this.mNotation,\n\t\t\t\t},\n\t\t\t\t\"2d\" : {\n\t\t\t\t\tx: coord[0]-SIZE*.42,\n\t\t\t\t\ty: coord[1]-SIZE*.42,\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tx: coord[0]-SIZE*.47,\n\t\t\t\t\ty: coord[1]+SIZE*.47,\n\t\t\t\t},\n\t\t\t\t\"alquerque3d\" : {\n\t\t\t\t\tz: SIZE*.02,\n\t\t\t\t},\n\t\t\t\t\"turtles3d\" : {\n\t\t\t\t\tz: SIZE*.02,\n\t\t\t\t}\n\t\t\t});\n\t\t\txdv.updateGadget(\"cell#\"+pos,{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: false,\n\t\t\t\t\tx: coord[0],\n\t\t\t\t\ty: coord[1],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\tView.Game.getVCoord = function() {\n\t\tvar r,c;\n\t\tif(arguments.length==1) {\n\t\t\tvar pos=arguments[0];\n\t\t\tvar rcCoord=this.g.Coord[pos];\n\t\t\tr=rcCoord[0];\n\t\t\tc=rcCoord[1];\n\t\t} else {\n\t\t\tr=arguments[0];\n\t\t\tc=arguments[1];\n\t\t}\n\t\tr=HEIGHT-1-r;\n\t\tif (this.mViewAs == JocGame.PLAYER_B) {\n\t\t\tr=HEIGHT-1-r;\n\t\t\tc=SWIDTH-1-c;\n\t\t}\n\t\tvar vx=(c-(SWIDTH-1)/2)*SIZE;\n\t\tvar vy=(r-(HEIGHT-1)/2)*SIZE;\n\t\treturn [vx,vy];\n\t}\n\t\n\tView.Game.getCCoord=function(pos) {\n\t\tvar rcCoord=this.g.Coord[pos];\n\t\tvar r=rcCoord[0];\n\t\tvar c=this.g.getColumn(rcCoord[1],r);\n\t\treturn this.getVCoord(r,c);\n\t}\n\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\tfor(var i=0;i<this.pieces.length;i++) {\n\t\t\tvar piece=this.pieces[i];\n\t\t\tif(!piece)\n\t\t\t\txdv.updateGadget(\"piece#\"+i,{\n\t\t\t\t\tbase : {\n\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\telse {\n\t\t\t\tvar coord=aGame.getCCoord(piece.p);\n\t\t\t\txdv.updateGadget(\"piece#\"+i,{\n\t\t\t\t\tbase : {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\tclipx: piece.t==0?0:100,\n\t\t\t\t\t\tclipy: piece.s==1?0:100,\n\t\t\t\t\t\topacity : 1,\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t\t\"2d-wood-alquerque\" : {\n\t\t\t\t\t\tclipy: piece.s==1?0:150,\n\t\t\t\t\t\tclipx: piece.t==0?0:150,\n\t\t\t\t\t},\n\t\t\t\t\t\"kids\":{\n\t\t\t\t\t\tclipy: piece.s==1?0:100,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\" : {\t\t\t\t\t\n\t\t\t\t\t\tcheckersType: piece.t,\n\t\t\t\t\t\tcheckersSide: piece.s,\n\t\t\t\t\t},\n\t\t\t\t\t\"classic3d\":{\n\t\t\t\t\t\tz: CLASSIC3D_FLOOR_Z,\n\t\t\t\t\t},\n\t\t\t\t\t\"alquerque3d\" : {\n\t\t\t\t\t\tz : SIZE*0.3,\n\t\t\t\t\t\tscale : [ SIZE * .0003, SIZE * .0003, SIZE * .0003 ],\n\t\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\t\"ball\": {\n\t\t\t\t\t\t\t\tmap: aGame.mViewOptions.fullPath+\"/res/xd-view/meshes/\"+(piece.s===JocGame.PLAYER_A?\"red\":\"black\")+(piece.t==0?\"\":\"-king\")+\".png\",\n\t\t\t\t\t\t\t\treflectivity: (piece.s===JocGame.PLAYER_A)?0.6:0.6, // reflexivities[this.board[pos]],\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"turkish3d\": {\n\t\t\t\t\t\tscale : [ SIZE * .0003, SIZE * .0003, SIZE * .0003 ],\n\t\t\t\t\t\t//file : aGame.mViewOptions.fullPath+\"/res/xd-view/meshes/turkish-piece\"+(piece.t==0?\"\":\"-queen\")+\".js\",\n\t\t\t\t\t\tfile : aGame.mViewOptions.fullPath+\"/res/xd-view/meshes/turkish\"+(piece.t==0?\"\":\"-queen\")+\".js\",\n\t\t\t\t\t\tz: CLASSIC3D_FLOOR_Z,\n\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"turtles3d\": {\n\t\t\t\t\t\tscale : [ SIZE * .0003, SIZE * .0003, SIZE * .0003 ],\n\t\t\t\t\t\tz : CLASSIC3D_FLOOR_Z,\t\t\t\n\t\t\t\t\t\tcheckersType: piece.t,\n\t\t\t\t\t\trotate: \n\t\t\t\t\t\t\tthis.CheckersAngle(aGame,piece,piece.plp,piece.p),\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfor(var i=this.pieces.length;i<PCOUNT;i++)\n\t\t\txdv.updateGadget(\"piece#\"+i,{\n\t\t\t\tbase : {\n\t\t\t\t\tvisible: false,\n\t\t\t\t}\n\t\t\t});\n\t\txdv.updateGadget(\"boardframe\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"playera\" : {\n\t\t\t\t\t\tcolor : aGame.mViewAs==JocGame.PLAYER_A?CLASSIC_WHITE:CLASSIC_BLACK,\n\t\t\t\t\t}, \n\t\t\t\t\t\"playerb\" : {\n\t\t\t\t\t\tcolor : aGame.mViewAs==JocGame.PLAYER_B?CLASSIC_WHITE:CLASSIC_BLACK,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"turkish3d\":{\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"mainframe\" : {\n\t\t\t\t\t\tcolor : 0x111111,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"turtles3d\":{\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"mainframe\" : {\n\t\t\t\t\t\tcolor : 0x55ff88,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videoa\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"tv\" : {\n\t\t\t\t\t\tcolor : CLASSIC_WHITE,\n\t\t\t\t\t}, \n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videob\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"tv\" : {\n\t\t\t\t\t\tcolor : CLASSIC_BLACK,\n\t\t\t\t\t}, \n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\t\n\tView.Board.xdInput = function(xdv, aGame) {\n\t\treturn {\n\t\t\tinitial: {\n\t\t\t\tpos: [],\n\t\t\t},\n\t\t\tgetActions: function(moves,currentInput) {\n\t\t\t\tvar actions={};\n\t\t\t\tvar actionIndex=currentInput.pos.length;\n\t\t\t\tmoves.forEach(function(move) {\n\t\t\t\t\tif(actionIndex>=move.pos.length)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar matching=true;\n\t\t\t\t\tcurrentInput.pos.forEach(function(pos,index) {\n\t\t\t\t\t\tif(move.pos[index]!=pos)\n\t\t\t\t\t\t\tmatching=false;\n\t\t\t\t\t});\n\t\t\t\t\tif(!matching)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar pos1=move.pos[actionIndex];\n\t\t\t\t\tvar action=actions[pos1];\n\t\t\t\t\tif(action===undefined) {\n\t\t\t\t\t\tvar pieceIndex1;\n\t\t\t\t\t\tif(actionIndex>0)\n\t\t\t\t\t\t\tpieceIndex1=this.board[move.pos[0]];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpieceIndex1=this.board[pos1]<0?null:this.board[pos1];\n\t\t\t\t\t\tvar widgets=[\"cell#\"+pos1];\n\t\t\t\t\t\tif(pieceIndex1!=null)\n\t\t\t\t\t\t\twidgets.push(\"piece#\"+pieceIndex1);\n\t\t\t\t\t\taction=actions[pos1]={\n\t\t\t\t\t\t\tmoves: [],\n\t\t\t\t\t\t\tview: [\"cell#\"+pos1],\n\t\t\t\t\t\t\tclick: widgets,\n\t\t\t\t\t\t\thighlight: function(mode) {\n\t\t\t\t\t\t\t\txdv.updateGadget(\"cell#\"+pos1,{\n\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\tclasses: mode==\"cancel\"?\"xd-cancel\":\"xd-choice-view\",\n\t\t\t\t\t\t\t\t\t\topacity: aGame.mShowMoves || mode==\"cancel\"?.5:0,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\t\t\t\t\t\tcolor : mode==\"cancel\"?0xff4400:0xffffff,\n\t\t\t\t\t\t\t\t\t\t\t\topacity: aGame.mShowMoves || mode==\"cancel\"?1:0,\n\t\t\t\t\t\t\t\t\t\t\t\ttransparent: aGame.mShowMoves || mode==\"cancel\"?false:true,\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\t\n\t\t\t\t\t\t\t\t\t\tcastShadow: aGame.mShowMoves || mode==\"cancel\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tunhighlight: function() {\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalidate: {\n\t\t\t\t\t\t\t\tpos: currentInput.pos.concat([pos1]),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texecute: function(callback) {\n\t\t\t\t\t\t\t\tif(actionIndex==0) {\n\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar captPiece=move.capt[actionIndex]!=null?this.board[move.capt[actionIndex]]:null;\n\t\t\t\t\t\t\t\tthis.checkersAnimateMove(xdv,aGame,\n\t\t\t\t\t\t\t\t\t\tthis.board[currentInput.pos[0]],\n\t\t\t\t\t\t\t\t\t\tmove.pos[actionIndex],\n\t\t\t\t\t\t\t\t\t\tcaptPiece,function() {\n\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tunexecute: function() {\n\t\t\t\t\t\t\t\tvar pieceIndex=this.board[move.pos[0]];\n\t\t\t\t\t\t\t\tvar coord=aGame.getCCoord(move.pos[actionIndex]);\n\t\t\t\t\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex,{\n\t\t\t\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar captPiece=move.capt[actionIndex]!=null?this.board[move.capt[actionIndex]]:null;\n\t\t\t\t\t\t\t\tif(captPiece!=null)\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"piece#\"+captPiece,{\n\t\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\t\topacity : 1,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"3d\" : {\n\t\t\t\t\t\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\t\t\t\t\t\"queen\" : {\n\t\t\t\t\t\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\taction.moves.push(move);\n\t\t\t\t},this);\n\t\t\t\treturn actions;\n\t\t\t},\n\t\t}\n\t}\n\t\n\tView.Board.checkersAnimateMove = function(xdv, aGame, pieceIndex, pos, captPiece, callback) {\n\t\tif(captPiece===null) aGame.PlaySound(\"move\"+(1+Math.floor(Math.random()*4)));\n\t\tvar animCount=1;\n\t\tvar duration=400;\n\t\tfunction EndAnim() {\n\t\t\tif(captPiece!==null) aGame.PlaySound(\"tac\"+(1+Math.floor(Math.random()*3)));\n\t\t\tanimCount--;\n\t\t\tif(animCount==0) {\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex,{ \"3d\": {\tpositionEasingUpdate: null,\t}});\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\tvar coord=aGame.getCCoord(pos);\n\t\tvar z0=CLASSIC3D_FLOOR_Z,z1=SIZE;\n\t\tvar a=-4*(z1-0);\n\t\tvar fromPos=captPiece!==null?this.pieces[captPiece].p:this.pieces[pieceIndex].p;\n\t\txdv.updateGadget(\"piece#\"+pieceIndex,{\n\t\t\tbase: {\n\t\t\t\tx: coord[0],\n\t\t\t\ty: coord[1],\n\t\t\t},\n\t\t\t\"3d\": {\n\t\t\t\tpositionEasingUpdate: function(ratio) {\n\t\t\t\t\tif(captPiece!==null)\n\t\t\t\t\t\tthis.object3d.position.y=(a*ratio*ratio-a*ratio+z0)*this.SCALE3D;\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"alquerque3d\": {\n\t\t\t\tpositionEasingUpdate: function(ratio) {\n\t\t\t\t\tz0=SIZE*0.3;\n\t\t\t\t\tif(captPiece!==null)\n\t\t\t\t\t\tthis.object3d.position.y=(a*ratio*ratio-a*ratio+z0)*this.SCALE3D;\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"turtles3d\": {\n\t\t\t\trotate: this.CheckersAngle(aGame,this.pieces[pieceIndex],fromPos,pos),\n\t\t\t},\n\t\t},duration,EndAnim);\n\t\tif(captPiece!==null) {\n\t\t\tanimCount++;\n\t\t\tvar coord1=aGame.getCCoord(this.pieces[captPiece].p);\n\t\t\txdv.updateGadget(\"piece#\"+captPiece,{\n\t\t\t\t\"2d\": {\n\t\t\t\t\topacity : 0.3,\n\t\t\t\t\tvisible: !aGame.g.captureInstantRemove\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tvisible: !aGame.g.captureInstantRemove,\n\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\t\topacity: .3,\n\t\t\t\t\t\t}, \n\t\t\t\t\t\t\"queen\" : {\n\t\t\t\t\t\t\topacity: .3,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},duration,EndAnim);\n\t\t}\n\n\t}\n\t\n\tView.Board.checkersVanishCapts = function(xdv, aGame, capts, callback) {\n\t\tvar animCount=0;\n\t\tfunction EndAnim() {\n\t\t\tanimCount--;\n\t\t\tif(animCount==0)\n\t\t\t\tcallback();\n\t\t}\n\t\tfor(var capt in capts) \n\t\t\tif(capts.hasOwnProperty(capt)) {\n\t\t\t\tanimCount++;\n\t\t\t\txdv.updateGadget(\"piece#\"+capt,{\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tz: - SIZE*.24,\n\t\t\t\t\t},\n\t\t\t\t\t\"turkish3d\": {\n\t\t\t\t\t\tz: - SIZE,\n\t\t\t\t\t},\n\t\t\t\t\t\"kids3d\": {\n\t\t\t\t\t\tz: - SIZE*.5,\n\t\t\t\t\t},\n\t\t\t\t},500,EndAnim);\n\t\t\t}\n\t\tif(animCount==0)\n\t\t\tcallback();\n\t}\n\t\n\tView.Board.xdPlayedMove = function(xdv, aGame, aMove) {\n\t\tvar $this=this;\n\t\tvar board=aGame.mOldBoard;\n\t\tvar pieceIndex=board.board[aMove.pos[0]];\n\t\tvar capts={};\n\t\tvar index=1;\n\t\tfunction Animate() {\n\t\t\tvar captPiece=null;\n\t\t\tvar capture=aMove.capt[index];\n\t\t\tif(capture!==null) {\n\t\t\t\tcaptPiece=board.board[capture];\n\t\t\t\tcapts[captPiece]=true;\n\t\t\t\thaveCapts=true;\n\t\t\t}\n\t\t\tboard.checkersAnimateMove(xdv,aGame,pieceIndex,aMove.pos[index],captPiece, function() {\n\t\t\t\tindex++;\n\t\t\t\tif(index==aMove.pos.length)\n\t\t\t\t\t$this.checkersVanishCapts(xdv,aGame,capts,function() {\n\t\t\t\t\t\tif(board.pieces[board.board[aMove.pos[0]]].t==0) {\n\t\t\t\t\t\t\tvar r=aGame.g.Coord[aMove.pos[aMove.pos.length-1]][0];\n\t\t\t\t\t\t\tif(($this.mWho==1 && r==HEIGHT-1) || ($this.mWho==-1 && r==0))\n\t\t\t\t\t\t\t\taGame.PlaySound(\"promo\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\taGame.MoveShown();\n\t\t\t\t\t});\n\t\t\t\telse\n\t\t\t\t\tAnimate();\n\t\t\t});\n\t\t}\n\t\tAnimate();\n\t\treturn false;\n\t}\n\t\n\tView.Board.CheckersAngle = function(aGame,piece,from,to) {\n\t\tvar $this=this;\n\t\tif(from!=to) {\n\t\t\tvar angle;\n\t\t\taGame.CheckersEachDirection(from,function(pos,dir) {\n\t\t\t\twhile(pos!==null) {\n\t\t\t\t\tif(pos==to) {\n\t\t\t\t\t\tswitch(dir)  {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tangle=135;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tangle=45;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tangle=-45;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tangle=-135;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tangle=aGame.mViewAs==piece.s?180:0\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tpos=aGame.g.Graph[pos][dir];\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif(angle!==undefined)\n\t\t\t\treturn aGame.mViewAs==1?angle:angle+180;\n\t\t}\n\t\treturn aGame.mViewAs==piece.s?180:0;\n\t}\n\t\n})();\n\n"],"file":"brazilian-draughts-view.js"}