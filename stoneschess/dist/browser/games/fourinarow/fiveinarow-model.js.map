{"version":3,"names":[],"mappings":"","sources":["fiarbase-model.js"],"sourcesContent":["/*\n * Copyright (c) 2013 - Jocly - www.jocly.com - All rights reserved\n */\n\nModel.Game.InitGame = function() {\n\tvar width=this.mOptions.width;\n\tvar height=this.mOptions.height;\n\tvar lines=this.mOptions.lines;\n\tvar directions=[[-1,-1],[0,-1],[1,-1],[-1,0]];\n\tvar tuples=[];\n\tfor(var r=0;r<height;r++)\n\t\tfor(var c=0;c<width;c++) {\n\t\t\tfor(var d=0;d<directions.length;d++) {\n\t\t\t\tvar dx=directions[d][0];\n\t\t\t\tvar dy=directions[d][1];\n\t\t\t\tvar i;\n\t\t\t\tvar tuple=[];\n\t\t\t\tfor(i=0;i<lines;i++) {\n\t\t\t\t\tvar pos;\n\t\t\t\t\tif(this.mOptions.torus)\n\t\t\t\t\t\tpos=(r+dy*i)*width+(c+dx*i+width)%width;\n\t\t\t\t\telse\n\t\t\t\t\t\tpos=(r+dy*i)*width+c+dx*i;\n\n\t\t\t\t\tif(this.mOptions.torus && (r+dy*i<0 || r+dy*i>=height))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if(!this.mOptions.torus && (c+dx*i<0 || c+dx*i>=width || r+dy*i<0 || r+dy*i>=height))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t\ttuple.push(pos);\n\t\t\t\t}\n\t\t\t\tif(i==lines) {\n\t\t\t\t\ttuples.push(tuple);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tthis.g.TuplesList=tuples;\n\tvar tuplesMap={};\n\tfor(var i=0;i<tuples.length;i++) {\n\t\tvar tuple=tuples[i];\n\t\tfor(var j=0;j<tuple.length;j++) {\n\t\t\tvar pos=tuple[j];\n\t\t\tif(tuplesMap[pos]===undefined)\n\t\t\t\ttuplesMap[pos]=[];\n\t\t\ttuplesMap[pos].push(tuple);\n\t\t}\n\t}\n\tthis.g.Tuples=tuplesMap;\n\tthis.zobrist=new JocGame.Zobrist({\n\t\tboard: {\n\t\t\ttype: \"array\",\n\t\t\tsize: this.mOptions.width*this.mOptions.height,\n\t\t\tvalues: [\"1\",\"-1\"],\n\t\t}\n\t});\n}\n\nModel.Move.Init = function(args) {\n\tthis.op=args.op;\n\tthis.col=args.col;\n}\n\nModel.Move.CopyFrom=function(move) {\n\tthis.Init(move);\n}\n\nModel.Move.ToString=function() {\n\tvar str=\"\";\n\tswitch(this.op) {\n\tcase '+': str+='+'; break;\n\tcase '-': str+='-'; break;\n\tdefault: str+='?';\n\t}\n\tstr+=String.fromCharCode(65+this.col);\n\treturn str;\n}\n\nModel.Board.Init = function(aGame) {\n\tthis.zSign=0;\n}\n\nModel.Board.InitialPosition = function(aGame) {\n\tthis.board=[];\n\tvar width=aGame.mOptions.width;\n\tvar height=aGame.mOptions.height;\n\tfor(var r=0;r<height;r++) {\n\t\tfor(var c=0;c<width;c++)\n\t\t\tthis.board.push(0);\n\t}\n\tthis.tuples={}\n\tfor(var i=1;i<=aGame.mOptions.lines;i++) {\n\t\tthis.tuples[i]=0;\n\t\tthis.tuples[-i]=0;\n\t}\n\tthis.cols=[];\n\tfor(var c=0;c<width;c++)\n\t\tthis.cols.push(0);\n\tif(aGame.mOptions.fillSides) {\n\t\tfor(var i=0;i<height;i++) {\n\t\t\tvar pos=i*width;\n\t\t\tvar who=(i%2)?-1:1;\n\t\t\tvar col=0;\n\t\t\tthis.board[pos]=who;\n\t\t\tthis.cols[col]++;\n\t\t\tthis.tuples[who]++;\n\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",who,pos);\n\t\t\t\n\t\t\tvar pos=i*width+width-1;\n\t\t\tvar who=(i%2)?1:-1;\n\t\t\tvar col=width-1;\n\t\t\tthis.board[pos]=who;\n\t\t\tthis.cols[col]++;\n\t\t\tthis.tuples[who]++;\n\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",who,pos);\t\t\n\t\t}\n\t}\n}\n\nModel.Board.GenerateMoves = function(aGame) {\n\tvar moves=[],maxHeight=aGame.mOptions.height;\n\tfor(var c=0;c<aGame.mOptions.width;c++)\n\t\tif(this.cols[c]<maxHeight)\n\t\t\tmoves.push({\n\t\t\t\top: '+',\n\t\t\t\tcol: c,\n\t\t\t});\n\tif(aGame.mOptions.remove)\n\t\tfor(var c=0;c<aGame.mOptions.width;c++)\n\t\t\tif(this.board[c]==this.mWho)\n\t\t\t\tmoves.push({\n\t\t\t\t\top: '-',\n\t\t\t\t\tcol: c,\n\t\t\t\t});\n\tthis.mMoves=moves;\n\t//console.log(\"GenerateMoves\",moves.length,moves);\n\tif(moves.length==0) {\n\t\tthis.mFinished=true;\n\t\tthis.mWinner=JocGame.DRAW;\n\t}\n\t\t\n}\n\nModel.Board.Evaluate = function(aGame) {\n\tthis.mEvaluation=0;\n\tthis.mWinner=0;\n\tif(aGame.mOptions.preventRepeat && aGame.GetRepeatOccurence(this)>2) {\n\t\tthis.mFinished=true;\n\t\tthis.mWinner=JocGame.DRAW;\n\t\treturn;\n\t}\n\tif(this.tuples[aGame.mOptions.lines]>0) {\n\t\tthis.mFinished=true;\n\t\tthis.mWinner=1;\n\t}\n\tif(this.tuples[-aGame.mOptions.lines]>0) {\n\t\tthis.mFinished=true;\n\t\tif(this.mWinner)\n\t\t\tthis.mWinner=JocGame.DRAW;\n\t\telse\n\t\t\tthis.mWinner=-1;\n\t\treturn;\n\t}\n\tif(this.mFinished)\n\t\treturn;\n\tvar evParam=aGame.mOptions.levelOptions;\n\tfor(var i=1;i<aGame.mOptions.lines;i++) {\n\t\tthis.mEvaluation+=this.tuples[i]*evParam['evalTuple'+i];\n\t\tthis.mEvaluation-=this.tuples[-i]*evParam['evalTuple'+i];\n\t}\n}\n\nModel.Board.ApplyMove = function(aGame,move) {\n\t//console.log(\"+ApplyMove\",move)\n\tvar $this=this;\n\tif(move.op=='+') {\n\t\tvar c=move.col;\n\t\tvar r=this.cols[c];\n\t\tvar pos=r*aGame.mOptions.width+c;\n\t\tfor(var i=0;i<aGame.g.Tuples[pos].length;i++) {\n\t\t\tvar tuple=aGame.g.Tuples[pos][i];\n\t\t\tvar counter={\n\t\t\t\t'1': 0,\n\t\t\t\t'0': 0,\n\t\t\t\t'-1': 0,\n\t\t\t}\n\t\t\tfor(var j=0;j<tuple.length;j++)\n\t\t\t\tcounter[this.board[tuple[j]]]++;\n\t\t\tif(counter[1]>0 && counter[-1]==0)\n\t\t\t\tthis.tuples[counter[1]]--;\n\t\t\telse if(counter[-1]>0 && counter[1]==0)\n\t\t\t\tthis.tuples[-counter[-1]]--;\n\t\t\tcounter[this.mWho]++;\n\t\t\tif(counter[1]>0 && counter[-1]==0)\n\t\t\t\tthis.tuples[counter[1]]++;\n\t\t\telse if(counter[-1]>0 && counter[1]==0)\n\t\t\t\tthis.tuples[-counter[-1]]++;\n\t\t}\t\t\n\t\tthis.board[pos]=this.mWho;\n\t\tthis.cols[c]++;\n\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",this.mWho,pos);\n\t} else if(move.op=='-') {\n\t\tfor(var r=0;r<this.cols[move.col];r++) {\n\t\t\tvar pos=r*aGame.mOptions.width+move.col;\n\t\t\tfor(var i=0;i<aGame.g.Tuples[pos].length;i++) {\n\t\t\t\tvar tuple=aGame.g.Tuples[pos][i];\n\t\t\t\tvar counter={\n\t\t\t\t\t'1': 0,\n\t\t\t\t\t'0': 0,\n\t\t\t\t\t'-1': 0,\n\t\t\t\t}\n\t\t\t\tfor(var j=0;j<tuple.length;j++)\n\t\t\t\t\tcounter[this.board[tuple[j]]]++;\n\t\t\t\tif(counter[1]>0 && counter[-1]==0)\n\t\t\t\t\tthis.tuples[counter[1]]--;\n\t\t\t\telse if(counter[-1]>0 && counter[1]==0)\n\t\t\t\t\tthis.tuples[-counter[-1]]--;\n\t\t\t}\n\t\t}\n\t\tfor(var i=0;i<this.cols[move.col];i++) {\n\t\t\tvar pos=i*aGame.mOptions.width+move.col;\n\t\t\tvar pos1=pos+aGame.mOptions.width;\n\t\t\tvar whoAbove=0;\n\t\t\tif(pos1<this.board.length)\n\t\t\t\twhoAbove=this.board[pos1];\n\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",this.board[pos],pos);\n\t\t\tif(whoAbove)\n\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",whoAbove,pos);\t\t\t\n\t\t\tthis.board[pos]=whoAbove;\n\t\t}\n\t\tthis.cols[move.col]--;\n\t\tfor(var r=0;r<this.cols[move.col];r++) {\n\t\t\tvar pos=r*aGame.mOptions.width+move.col;\n\t\t\tfor(var i=0;i<aGame.g.Tuples[pos].length;i++) {\n\t\t\t\tvar tuple=aGame.g.Tuples[pos][i];\n\t\t\t\tvar counter={\n\t\t\t\t\t'1': 0,\n\t\t\t\t\t'0': 0,\n\t\t\t\t\t'-1': 0,\n\t\t\t\t}\n\t\t\t\tfor(var j=0;j<tuple.length;j++)\n\t\t\t\t\tcounter[this.board[tuple[j]]]++;\n\t\t\t\tif(counter[1]>0 && counter[-1]==0)\n\t\t\t\t\tthis.tuples[counter[1]]++;\n\t\t\t\telse if(counter[-1]>0 && counter[1]==0)\n\t\t\t\t\tthis.tuples[-counter[-1]]++;\n\t\t\t}\n\t\t}\n\t} else\n\t\tconsole.error(\"Invalid move\",move);\n\t//console.log(\"-ApplyMove\")\n}\n\nModel.Board.CopyFrom = function(aBoard) {\n\tthis.tuples={};\n\tfor(var i in aBoard.tuples)\n\t\tthis.tuples[i]=aBoard.tuples[i];\n\tthis.board=[];\n\tfor(var pos=0;pos<aBoard.board.length;pos++)\n\t\tthis.board.push(aBoard.board[pos]);\n\tthis.cols=[];\n\tfor(var col=0;col<aBoard.cols.length;col++)\n\t\tthis.cols.push(aBoard.cols[col]);\n\tthis.mWho=aBoard.mWho;\n\tthis.zSign=aBoard.zSign;\n}\n\nModel.Board.GetSignature = function() {\n\treturn this.zSign;\n}\t\n\n"],"file":"fiveinarow-model.js"}