{"version":3,"names":[],"mappings":"","sources":["hunt-xd-view.js"],"sourcesContent":["/*\n *\n * Copyright (c) 2013 - Jocly - www.jocly.com\n * \n * This file is part of the Jocly game platform and cannot be used outside of this context without the written permission of Jocly.\n * \n */\n\n(function() {\n\n\tvar fullPath;\n\tvar WIDTH, HEIGHT, SSIZE;\n\tvar nbBoardLights=4;\n\t\n\tView.Game.xdInitExtra = function(xdv) {\n\t}\n\n\tView.Game.xdPreInit = function(xdv) {\n\t}\n\n\tView.Game.xdInit = function(xdv) {\n\t\t\t\t\n\n\t\tthis.g.huntGameData={};\n\t\t// init defaults\n\t\tthis.g.huntGameData.sceneXtras=[];\n\t\tthis.g.huntGameData.preyJumpsAtWalk=false;\n\t\tthis.g.huntGameData.clipwidth=155;\n\t\tthis.g.huntGameData.clipheight=155;\n\t\tthis.g.huntGameData.lightsIntensity=0.55;\n\t\tthis.g.huntGameData.jumpEatScale=1.0; // unit = cell size\n\t\tthis.g.huntGameData.jumpMoveScale=0.5; // unit = cell size\n\t\tthis.g.huntGameData.killPieceZTempo=-0.3; // unit = cell size\n\t\tthis.g.huntGameData.killPieceZFinal=-1; // unit = cell size\n\t\tthis.g.huntGameData.boardColOffset=0; // to center exotic boards\n\t\tthis.g.huntGameData.boardRowOffset=0; // to center exotic boards\n\t\tthis.g.huntGameData.targetColorSelected=0xddffdd; // to center exotic boards\n\t\tthis.g.huntGameData.soundMove=null; // to center exotic boards\n\t\tthis.g.huntGameData.soundJump=null; // to center exotic boards\n\t\tthis.g.huntGameData.soundEndJump=null; // to center exotic boards\n\t\tthis.g.huntGameData.boardSize=1;\n\t\tthis.g.huntGameData.boardStretch=true;\n\t\t\n\t\t\n\t\tthis.xdPreInit();\n\n\t\tvar huntGameData=this.g.huntGameData;\n\n\t\t\n\t\tvar hl=this.g.huntLayout;\n\t\tvar width0=hl.left+hl.boardWidth+hl.right;\n\t\tvar height0=hl.header+hl.boardHeight+hl.footer;\n\t\tSSIZE=Math.floor(Math.min(\n\t\t\t12000/width0,\n\t\t\t12000/height0\n\t\t));\n\t\tWIDTH=width0*SSIZE;\n\t\tHEIGHT=height0*SSIZE;\n\n\t\tthis.HuntMakeCoord();\n\n\t\tfor (var l=0;l<nbBoardLights;l++){\n\t\t\tvar r=8000;\n\t\t\tvar angle=Math.PI/4+(2*Math.PI/nbBoardLights)*l;\n\t\t\txdv.createGadget(\"blight#\"+l, {\n\t\t\t\t\"3d\": {\n\t\t\t\t\ttype: \"custom3d\",\n\t\t\t\t\tcreate: function() {\n\t\t\t\t\t\tvar light = new THREE.SpotLight( 0xffffff, huntGameData.lightsIntensity );\n\t\t\t\t\t\tlight.castShadow = false;\n\t\t\n\t\t\t\t\t\tlight.shadow.camera.near = 3;\n\t\t\t\t\t\tlight.shadow.camera.far = 20;\n\t\t\t\t\t\tlight.shadow.camera.fov = 90;\n\t\t\t\t\t\tlight.shadow.mapSize.width = 1024;\n\t\t\t\t\t\tlight.shadow.mapSize.height = 1024;\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*light.shadowCascade = true;\n\t\t\t\t\t\tlight.shadowCascadeCount = 3;\n\t\t\t\t\t\tlight.shadowCascadeNearZ = [ -1.000, 0.995, 0.998 ];\n\t\t\t\t\t\tlight.shadowCascadeFarZ  = [  0.995, 0.998, 1.000 ];\n\t\t\t\t\t\tlight.shadowCascadeWidth = [ 1024, 1024, 1024 ];\n\t\t\t\t\t\tlight.shadowCascadeHeight = [ 1024, 1024, 1024 ];*/\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar object3d = new THREE.Object3D();\n\t\t\t\t\t\tvar target = new THREE.Object3D();\n\t\t\t\t\t\tobject3d.add(target);\n\t\t\t\t\t\tlight.target = target;\n\t\t\t\t\t\tobject3d.add(light);\n\n\t\t\t\t\t\treturn object3d;\n\t\t\t\t\t},\n\t\t\t\t\ty: r*Math.sin(angle),\n\t\t\t\t\tx: r*Math.cos(angle),\n\t\t\t\t\tz: 6000,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tfor (var i=0;i<huntGameData.sceneXtras.length;i++){\n\t\t\txdv.createGadget(\n\t\t\t\thuntGameData.sceneXtras[i].id, \n\t\t\t\thuntGameData.sceneXtras[i].gadgetData\n\t\t\t);\n\t\t}\n\n\t\tvar ratio=(hl.header+hl.boardHeight+hl.footer)/(hl.left+hl.boardWidth+hl.right);\n\n\t\tfullPath=this.mViewOptions.fullPath;\n\t\txdv.createGadget(\"board\", {\n\t\t\t\"2d\" : {\n\t\t\t\ttype : \"image\",\n\t\t\t},\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"custommesh3d\",\n\t\t\t\trotateX: -90,\n\t\t\t\tcreate: function() {\n\t\t\t\t\tif (huntGameData.fieldMap!==undefined){\n\n\t\t\t\t\t\tvar $this = this ;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar nbToBeLoaded = 1;\n\t\t\t\t\t\tif (huntGameData.fieldSpecMap!==undefined) nbToBeLoaded++;\n\t\t\t\t\t\tvar nbLoaded = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar gg=new THREE.PlaneGeometry(12/((ratio>1)?ratio:1),12*((ratio<1)?ratio:1),1,1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar diffuseMap=null;\n\t\t\t\t\t\tvar specMap=null;\n\t\t\t\t\t\tvar specColor=0x000000;\n\t\t\t\t\t\tvar shininess=0;\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunction checkAllLoaded(){\n\t\t\t\t\t\t\tnbLoaded++;\n\t\t\t\t\t\t\tif (nbLoaded==nbToBeLoaded){\n\t\t\t\t\t\t\t\tvar gm=new THREE.MeshPhongMaterial( {\n\t\t\t\t\t\t\t\t\tcolor: 0xffffff, \n\t\t\t\t\t\t\t\t\tmap: diffuseMap,\n\t\t\t\t\t\t\t\t\tspecularMap: specMap,\n\t\t\t\t\t\t\t\t\tspecular: specColor,\n\t\t\t\t\t\t\t\t\tshininess: shininess,\n\t\t\t\t\t\t\t\t } );\n\t\t\t\t\t\t\t\tvar mesh=new THREE.Mesh(gg,gm);\n\t\t\t\t\t\t\t\tmesh.rotation.z=Math.PI/2;\n\t\t\t\t\t\t\t\tmesh.receiveShadow=true;\n\t\t\t\t\t\t\t\t$this.objectReady(mesh);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar textureLoaderDiff = new THREE.TextureLoader();\n\t\t\t\t\t\t//textureLoaderDiff.setCrossOrigin(\"anonymous\"); \t\t\t\t\t\t\n\t\t\t\t\t\ttextureLoaderDiff.load(\n\t\t\t\t\t\t\tfullPath+huntGameData.fieldMap,\n\t\t\t\t\t\t\tfunction(texture){\n\t\t\t\t\t\t\t\tdiffuseMap = texture ;\n\t\t\t\t\t\t\t\tdiffuseMap.wrapS = diffuseMap.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\t\t\tdiffuseMap.format = THREE.RGBFormat;\n\t\t\t\t\t\t\t\tcheckAllLoaded();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (huntGameData.fieldSpecMap!==undefined){\n\t\t\t\t\t\t\tvar textureLoaderSpec = new THREE.TextureLoader();\n\t\t\t\t\t\t\t//textureLoaderSpec.setCrossOrigin(\"anonymous\"); \t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttextureLoaderSpec.loadTexture( \n\t\t\t\t\t\t\t\tfullPath+huntGameData.fieldSpecMap ,\n\t\t\t\t\t\t\t\tfunction(texture){\n\t\t\t\t\t\t\t\t\tspecMap = texture ;\n\t\t\t\t\t\t\t\t\tspecMap.wrapS = specMap.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\t\t\t\tspecMap.format = THREE.RGBFormat;\n\t\t\t\t\t\t\t\t\tshininess=170;\n\t\t\t\t\t\t\t\t\tspecColor=0xffffff;\n\t\t\t\t\t\t\t\t\tcheckAllLoaded();\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t});\n\t\t\n\t\txdv.createGadget(\"boardframe\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"meshfile\",\n\t\t\t\tfile : fullPath+huntGameData.boardJSFile,\n\t\t\t\tflatShading: true,\n\t\t\t\tz : huntGameData.boardZ,\n\t\t\t\treceiveShadow : true,\n\t\t\t\tscale : [\n\t\t\t\t\thuntGameData.boardSize/((ratio>1 && huntGameData.boardStretch)?ratio:1),\n\t\t\t\t\thuntGameData.boardSize*((ratio<1 && huntGameData.boardStretch)?ratio:1),\n\t\t\t\t\thuntGameData.boardSize],\t\t\t\t\n\t\t\t},\n\t\t});\n\n\t\tvar pieceIndex=0;\n\t\tfor(var who=0;who<2;who++) {\n\t\t\tfor(var i=0;i<this.g.initialPos[who].length;i++) {\n\t\t\t\tvar pos=this.g.initialPos[who][i];\n\t\t\t\tvar hunter= (this.g.catcher==1 && who==1) || (this.g.catcher==-1 && who==0); \n\t\t\t\tvar jsFile= hunter?(this.mViewOptions.fullPath + huntGameData.hunterJSFile):(this.mViewOptions.fullPath + huntGameData.preyJSFile);\n\t\t\t\tvar pieceScale= hunter?huntGameData.hunterScale:huntGameData.preyScale;\n\t\t\t\tvar pieceMorph= hunter?huntGameData.hunterMorph:huntGameData.preyMorph;\n\t\t\t\tvar z0=hunter?huntGameData.hunterZ0:huntGameData.preyZ0;\n\t\t\t\tvar preloadMat=hunter?huntGameData.hunterMaterialsPreload:huntGameData.preyMaterialsPreload;\n\t\t\t\tvar $this=this;\n\t\t\t\t(function(jsf,preloadMat) {\t\n\t\t\t\t\txdv.createGadget(\"piece#\"+(pieceIndex++), {\n\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\ttype : \"sprite\",\n\t\t\t\t\t\t\tclipx : hunter?155:0,\n\t\t\t\t\t\t\tclipy : 0,\n\t\t\t\t\t\t\tclipwidth : huntGameData.clipwidth, \n\t\t\t\t\t\t\tclipheight : huntGameData.clipheight, \n\t\t\t\t\t\t\twidth: SSIZE*.8,\n\t\t\t\t\t\t\theight: SSIZE*.8,\n\t\t\t\t\t\t\tfile : $this.mViewOptions.fullPath + huntGameData.sprites,\n\t\t\t\t\t\t\tz : hunter?3:4, // to let preys jump over hunters\n\t\t\t\t\t\t},\t\n\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\ttype:\"custommesh3d\",\n\t\t\t\t\t\t\tscale:[pieceScale,pieceScale,pieceScale],\n\t\t\t\t\t\t\tmorphing: pieceMorph,\n\t\t\t\t\t\t\tz: z0,\n\t\t\t\t\t\t\tcreate: function(cb){ \n\t\t\t\t\t\t\t\tvar smooth=0;\n\t\t\t\t\t\t\t\tvar url=\"smoothedfilegeo|\"+smooth+\"|\"+jsf;\n\t\t\t\t\t\t\t\tvar $this=this;\n\t\t\t\t\t\t\t\tthis.getResource(url,function(geometry0 , materials0){\n                                    //geometry.computeVertexNormals(); // needed in normals not exported in js file!\n                                    var materials1=[];\n                                    function Done() {\n                                        if(--tasks==0) {\n                                            var mesh = new THREE.Mesh( geometry0 , new THREE.MultiMaterial(materials1) ) ;\n                                            cb(mesh);\n                                        }\n                                    }\n                                    var tasks = 1;\n                                    for(var m=0;m<materials0.length;m++) {\n                                        (function(m) {\n                                            tasks++;\n                                            var newmat=materials0[m].clone();\n                                            if (newmat.name===preloadMat.matName){\n                                                $this.getMaterialMap(fullPath + preloadMat.matMap,function(matMap) {\n                                                    newmat.map = matMap;\n                                                    materials1[m] = newmat;\n                                                    Done();\n                                                });\n                                            } else {\n                                                materials1[m] = newmat;\n                                                Done();\n                                            }\n                                        })(m);\n                                    }\n                                    Done();\n                                });\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, \n\t\t\t\t\t});\n\t\t\t\t})(jsFile,preloadMat);\n\t\t\t}\n\t\t}\n\n\t\tfor(var pos=0;pos<this.g.Graph.length;pos++) {\n\t\t\tvar coord=this.getCCoord(pos);\n\t\t\txdv.createGadget(\"cell#\"+pos, {\n\t\t\t\t\"base\":{\n\t\t\t\t\tx : coord[0],\n\t\t\t\t\ty : coord[1],\n\t\t\t\t},\n\t\t\t\t\"2d\": {\n\t\t\t\t\ttype : \"element\",\n\t\t\t\t\tx : coord[0],\n\t\t\t\t\ty : coord[1],\n\t\t\t\t\tz : 2,\n\t\t\t\t\twidth : SSIZE*.9,\n\t\t\t\t\theight : SSIZE*.9,\n\t\t\t\t\tclasses : \"\",\n\t\t\t\t},\t\t\t\t\t\n\t\t\t\t\"3d\" : {\n\t\t\t\t\ttype: \"meshfile\",\n\t\t\t\t\tfile : fullPath+huntGameData.targetJSFile,\n\t\t\t\t\tflatShading: true,\n\t\t\t\t\tsmooth : 0,\n\t\t\t\t\tz : -50,\n\t\t\t\t\tcastShadow: false,\n\t\t\t\t\tscale: [0.8,0.8,0.8],\n\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\"square\" : {\n\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\tcolor : 0xffffff,\n\t\t\t\t\t\t\t//specular : 0x050505,\n\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\t(function(pos) {\n\t\t\t\txdv.createGadget(\"text#\"+pos, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\tinitialClasses: \"xd-notation\",\n\t\t\t\t\t\tdisplay : function(element, width, height) {\n\t\t\t\t\t\t\telement.css({\n\t\t\t\t\t\t\t\t\"font-size\" : (height * .6) + \"pt\",\n\t\t\t\t\t\t\t\t\"line-height\" : (height * 1) + \"px\",\n\t\t\t\t\t\t\t}).text(pos+1);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tx : coord[0]-SSIZE*.3,\n\t\t\t\t\t\ty : coord[1]-SSIZE*.3,\n\t\t\t\t\t\tz : 1,\n\t\t\t\t\t\twidth : SSIZE*.2,\n\t\t\t\t\t\theight : SSIZE*.2,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\t//z: -cellSide*.05,\n\t\t\t\t\t\trotateX: -90,\n\t\t\t\t\t\tcreate: function() {\n                            var $this = this;\n                            this.getResource('font|'+fullPath+\n                                '/res/xd-view/fonts/helvetiker_regular.typeface.json',\n                                function(font) {\n                                    var gg=new THREE.TextGeometry(\"\"+(pos+1),{\n                                        size: 0.2,\n                                        height: 0.05,\n                                        curveSegments: 6,\n                                        font: font,\n\n                                    });\n                                    var gm=new THREE.MeshPhongMaterial();\n                                    var mesh= new THREE.Mesh( gg , gm );\n                                    $this.objectReady(mesh);\n                            });\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcolor: 0x888888,\n\t\t\t\t\t\tx : coord[0]-SSIZE*.2,\n\t\t\t\t\t\ty : coord[1]-SSIZE*.2,\n\t\t\t\t\t\tz : 100,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})(pos);\n\t\t}\n\t\t\t\t\n\t\tfunction createScreen(videoTexture) {\n\t\t\tvar $this=this;\n\t\t\tthis.getResource(\"smoothedfilegeo|0|\"+fullPath+\"/res/xd-view/meshes/stade-screen.js\",function(geometry , materials) {\n \t\t\t\tvar materials0=[];\n \t\t\t\t\n \t\t\t\tfor(var i=0;i<materials.length;i++){\n                    if (materials[i].name==\"mat.screen\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n \t\t\t\t\t\tmat.map=videoTexture;\n \t\t\t\t\t\tmat.overdraw = true;\n \t\t\t\t\t\t//mat.side = THREE.DoubleSide;\n \t\t\t\t\t\tmaterials0.push(mat);\n                    }else{\n \t\t\t\t\t\tmaterials0.push(materials[i]);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tvar mesh = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n \t\t\t\t\n \t\t\t\tvar light = new THREE.SpotLight( 0xffffff, 5 );\n\t\t\t\t//light.castShadow = true;\n\t\t\t\t//light.shadowCameraVisible=true;\n\t\t\t\t/*light.shadowDarkness = 1;\n\n\t\t\t\tlight.shadowCameraNear = 3;\n\t\t\t\tlight.shadowCameraFar = 20;\n\t\t\t\tlight.shadowCameraFov = 90;\n\t\t\t\tlight.shadowMapWidth = 1024;\n\t\t\t\tlight.shadowMapHeight = 1024;\n\t\t\t\t\n\t\t\t\tlight.shadowCascade = true;\n\t\t\t\tlight.shadowCascadeCount = 3;\n\t\t\t\tlight.shadowCascadeNearZ = [ -1.000, 0.995, 0.998 ];\n\t\t\t\tlight.shadowCascadeFarZ  = [  0.995, 0.998, 1.000 ];\n\t\t\t\tlight.shadowCascadeWidth = [ 1024, 1024, 1024 ];\n\t\t\t\tlight.shadowCascadeHeight = [ 1024, 1024, 1024 ];*/\n\t\t\t\tlight.position.set(0,0,2);\n\t\t\t\tlight.target=mesh;\n\t\t\t\t\n\t\t\t\tmesh.add(light);\n\n \t\t\t\tmesh.visible = false;\n \t\t\t\t$this.objectReady(mesh);\n\t\t\t});\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\txdv.createGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\tcreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\tcreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\t\t\n\t\t\n\t\tthis.xdInitExtra(xdv);\n\t}\n\t\n\tView.Game.HuntMakeCoord=function() {\n\n\t\tvar hl=this.g.huntLayout;\n\t\tvar width0=hl.left+hl.boardWidth+hl.right;\n\t\tvar height0=hl.header+hl.boardHeight+hl.footer;\n\n\t\tthis.g.Coord=[];\n\t\tfor(var i=0;i<this.g.RC.length;i++) {\n\t\t\tvar rc=this.g.RC[i];\n\t\t\tvar row=rc[0];\n\t\t\tvar col=rc[1];\n\t\t\trow+=this.g.huntGameData.boardRowOffset;\n\t\t\tcol+=this.g.huntGameData.boardColOffset;\n\t\t\tvar coord;\n\t\t\tif(this.mViewAs==JocGame.PLAYER_A)\n\t\t\t\tcoord=[\n\t\t\t\t       (col+1)*SSIZE-width0*SSIZE*.5,\n\t\t\t\t       (row+1)*SSIZE-height0*SSIZE*.5,\n\t\t               ];\n\t\t\telse\n\t\t\t\tcoord=[\n\t\t\t\t       width0*SSIZE*.5-(col+1)*SSIZE,\n\t\t\t\t       height0*SSIZE*.5-(row+1)*SSIZE,\n\t\t               ];\n\t\t\tthis.g.Coord.push(coord);\n\t\t}\n\t}\n\n\t\n\tView.Game.xdBuildScene = function(xdv) {\n\t\tvar $this=this;\n\t\tvar huntGameData=this.g.huntGameData;\n\t\t\n\t\tfor (var l=0;l<nbBoardLights;l++){\n\t\t\txdv.updateGadget(\"blight#\"+l, {\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tvisible: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tfor (var i=0;i<huntGameData.sceneXtras.length;i++){\n\t\t\txdv.updateGadget(\n\t\t\t\thuntGameData.sceneXtras[i].id, \n\t\t\t\thuntGameData.sceneXtras[i].gadgetUpdateData\n\t\t\t);\n\t\t}\n\t\txdv.updateGadget(\"boardframe\",{\n\t\t\t\"3d\":{\n\t\t\t\tvisible: true,\n\t\t\t}\n\t\t});\t\t\n\t\txdv.updateGadget(\"board\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t\t\"2d\": {\n\t\t\t\trotate: this.mViewAs==JocGame.PLAYER_A?0:180,\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: WIDTH,\n\t\t\t\theight: HEIGHT,\n\t\t\t\tfile : this.mViewOptions.fullPath + huntGameData.boardField2D,\n\t\t\t},\n\t\t\t\"3d\":{\n\t\t\t\treceiveShadow: true,\n\t\t\t\tvisible: !(huntGameData.fieldMap===undefined),\n\t\t\t}\n\t\t});\n\t\tfor(var pos=0;pos<this.g.Graph.length;pos++) {\n\t\t\txdv.updateGadget(\"text#\"+pos, {\n\t\t\t\t\"base\" : {\n\t\t\t\t\tvisible: this.mNotation,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\t\n\t\tvar screenZoom=huntGameData.screenScale;\n\t\txdv.updateGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tscale:[screenZoom,screenZoom,screenZoom],\n\t\t\t\trotate: this.mViewAs==1?180:0,\n\t\t\t\trotateX: this.mViewAs==1?30:-30,\n\t\t\t\tz: 3000,\n\t\t\t\ty: this.mViewAs==1?huntGameData.screenDist:-huntGameData.screenDist,\n\t\t\t\tplayerSide: 1,\n\t\t\t},\n\t\t});\n\n\t\txdv.updateGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tscale:[screenZoom,screenZoom,screenZoom],\n\t\t\t\trotate: this.mViewAs==1?0:180,\n\t\t\t\trotateX: this.mViewAs==1?-30:30,\n\t\t\t\tz: 3000,\n\t\t\t\ty: this.mViewAs==1?-huntGameData.screenDist:huntGameData.screenDist,\n\t\t\t\tplayerSide: -1,\n\t\t\t},\n\t\t});\n\t}\n\t\n\tView.Game.getCCoord=function(pos) {\n\t\treturn this.g.Coord[pos];\n\t}\n\t\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\tfor(var i=0;i<this.pieces.length;i++) {\n\t\t\tvar piece=this.pieces[i];\n\t\t\tswitch(piece.p) {\n\t\t\tcase -2:\n\t\t\t\tvar coord=aGame.GetOffBoardCoord(i,SSIZE);\n\t\t\t\txdv.updateGadget(\"piece#\"+i, {\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t\trotate:180,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase -1:\n\t\t\t\txdv.updateGadget(\"piece#\"+i, {\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar hunter= aGame.g.catcher!=piece.s;\n\t\t\t\tvar z0=hunter?aGame.g.huntGameData.hunterZ0:aGame.g.huntGameData.preyZ0;\n\t\t\t\tvar coord=aGame.getCCoord(piece.p);\n\t\t\t\txdv.updateGadget(\"piece#\"+i, {\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\trotate: piece.a,\n\t\t\t\t\t\tz: z0,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tView.Board.xdBuildHTStateMachine = function(xdv, htsm, aGame) {\n\t\tvar $this=this;\n\t\tvar move={p:[]};\n\t\tvar moves=[];\n\t\tif(aGame.g.useDrop)\n\t\t\tmoves=this.HuntGetAllDropMoves(aGame);\n\t\tif(moves.length==0)\n\t\t\tmoves=this.HuntGetAllMoves(aGame);\n\t\tvar pieceIndex=-1;\n\t\tvar killPieceIndex=-1;\n\n\t\tfunction Highlight(pos,capt,type) {\n\t\t\tvar piece=null;\n\t\t\tvar pieceIndex1=-1;\n\t\t\tif(pieceIndex>=0 && pos==move.p[move.p.length-1])\n\t\t\t\tpieceIndex1=pieceIndex;\n\t\t\telse if($this.board[pos])\n\t\t\t\tpieceIndex1=$this.board[pos].i;\n\t\t\tif(pieceIndex1>=0)\n\t\t\t\tpiece=$this.pieces[pieceIndex1];\n\t\t\tvar color;\n\t\t\tvar event;\n\t\t\tvar classes;\n\t\t\tswitch(type) {\n\t\t\tcase \"normal\": \n\t\t\t\tevent=\"E_CLICKED\";\n\t\t\t\tcolor=aGame.g.huntGameData.targetColorSelected\n\t\t\t\tclasses=\"highlight\";\n\t\t\t\tbreak;\n\t\t\tcase \"cancel\": \n\t\t\t\tevent=\"E_CANCEL\";\n\t\t\t\tcolor=0xff4400;\n\t\t\t\tclasses=\"back\";\n\t\t\t\tbreak;\n\t\t\tcase \"confirm\": \n\t\t\t\tevent=\"E_CONFIRM\";\n\t\t\t\tcolor=0x00ff00;\n\t\t\t\tclasses=\"confirm\";\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfunction SendEvent() {\n\t\t\t\thtsm.smQueueEvent(event, {pos:pos,capt:capt,type:type});\n\t\t\t}\n\t\t\tvar showTarget=(aGame.mShowMoves||(type==\"cancel\")||(type==\"confirm\"));\n\t\t\txdv.updateGadget(\"cell#\"+pos,{\n\t\t\t\t\"base\": {\n\t\t\t\t\tvisible: true,\n\t\t\t\t\tclick : SendEvent,\n\t\t\t\t},\n\t\t\t\t\"2d\": {\n\t\t\t\t\tclasses: classes,\n\t\t\t\t\topacity: (aGame.mShowMoves || type==\"cancel\" || type==\"confirm\")?.5:0,\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tcastShadow: false, //aGame.mShowMoves,\n\t\t\t\t\treceiveShadow: true,\n\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\"square\" : {\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\t//shininess : 0,\n\t\t\t\t\t\t\t//reflectivity: 0,\n\t\t\t\t\t\t\tcolor : color, //type==\"cancel\"?0xff4400:0x000000,\n\t\t\t\t\t\t\topacity: (showTarget)?1:0,\n\t\t\t\t\t\t\ttransparent: !showTarget,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(piece)\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex1,{\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tclick : function() {\n\t\t\t\t\t\t\tSendEvent();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t}\n\t\tfunction Init(args) {\n\t\t}\n\t\tfunction Clean(args) {\n\t\t\tfor ( var pos = 0; pos < aGame.g.Coord.length; pos++) {\n\t\t\t\txdv.updateGadget(\"cell#\" + pos, {\n\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\tvisible : false,\n\t\t\t\t\t\tclick : null,\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\tclasses: \"\",\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\tmaterials: {\t\t\t\t\t\t\n\t\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tfor( var i=0; i<$this.pieces.length; i++) {\n\t\t\t\tvar piece=$this.pieces[i];\n\t\t\t\txdv.updateGadget(\"piece#\"+i, {\n\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\tclick : null,\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfunction Select(args) {\n\t\t\tvar matchingMoves=[];\n\t\t\tfor(var i=0;i<moves.length;i++) {\n\t\t\t\tvar m=moves[i];\n\t\t\t\tvar keep=true;\n\t\t\t\tfor(var j=0;j<move.p.length;j++) {\n\t\t\t\t\tif(m.p[j]!=move.p[j]) {\n\t\t\t\t\t\tkeep=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(keep)\n\t\t\t\t\tmatchingMoves.push(m);\n\t\t\t}\n\t\t\tif(matchingMoves.length==1 && move.p.length==matchingMoves[0].p.length) {\n\t\t\t\thtsm.smQueueEvent(\"E_DONE\",{move:matchingMoves[0]});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(move.p.length>1){\n\t\t\t\tHighlight(move.p[move.p.length-2],null,\"cancel\");\n\t\t\t\tHighlight(move.p[move.p.length-1],null,\"confirm\");\n\t\t\t}\n\t\t\telse if(move.p.length>0)\n\t\t\t\tHighlight(move.p[move.p.length-1],null,\"cancel\");\t\t\t\t\n\t\t\t\n\t\t\tnextPoss={};\n\t\t\tfor(var i=0;i<matchingMoves.length;i++) {\n\t\t\t\tvar m=matchingMoves[i];\n\t\t\t\tnextPoss[m.p[move.p.length]]=move.p.length<1?null:(m.c!==undefined?m.c[move.p.length-1]:null);\n\t\t\t}\n\t\t\tfor(var pos in nextPoss)\n\t\t\t\tif(nextPoss.hasOwnProperty(pos))\n\t\t\t\t\tHighlight(pos,nextPoss[pos],\"normal\");\t\t\t\t\n\t\t\t\n\t\t}\n\t\tfunction Animate(args) {\n\t\t\tif(move.p.length<=1)\n\t\t\t\thtsm.smQueueEvent(\"E_ANIM_DONE\",{});\n\t\t\telse {\n\t\t\t\tvar angle=$this.HuntAngle(aGame,move.p[move.p.length-2],move.p[move.p.length-1]);\n\t\t\t\t$this.HuntAnimatePiece(xdv,aGame,pieceIndex,move.p[move.p.length-2],move.p[move.p.length-1],angle,killPieceIndex,function() {\n\t\t\t\t\thtsm.smQueueEvent(\"E_ANIM_DONE\",{});\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfunction SaveSegment(args) {\n\t\t\tif(pieceIndex<0)\n\t\t\t\tpieceIndex=$this.board[args.pos].i;\n\t\t\txdv.saveGadgetProps(\"piece#\"+pieceIndex,[\"x\",\"y\",\"z\",\"rotate\",\"opacity\"],\"piece-\"+move.p.length);\n\t\t\tmove.p.push(args.pos);\n\t\t\tif(args.capt!==null) {\n\t\t\t\tif(move.c===undefined)\n\t\t\t\t\tmove.c=[];\n\t\t\t\tkillPieceIndex=$this.board[args.capt].i;\n\t\t\t\txdv.saveGadgetProps(\"piece#\"+killPieceIndex,[\"z\"],\"alive\");\n\t\t\t\tmove.c.push(args.capt);\n\t\t\t}\n\t\t}\n\t\tfunction SendMove(args) {\n\t\t\taGame.MakeMove(move);\n\t\t}\n\t\tfunction CancelLastClick(args) {\n\t\t\tmove.p.splice(move.p.length-1);\n\t\t\txdv.restoreGadgetProps(\"piece#\"+pieceIndex,\"piece-\"+move.p.length);\n\t\t\tif(move.p.length==0)\n\t\t\t\tpieceIndex=-1;\n\t\t\tif(move.c!==undefined) {\n\t\t\t\tif(killPieceIndex>=0)\n\t\t\t\t\txdv.restoreGadgetProps(\"piece#\"+killPieceIndex,\"alive\");\n\t\t\t\tmove.c.splice(move.c.length-1);\n\t\t\t\tif(move.c.length==0) {\n\t\t\t\t\tkillPieceIndex=-1;\n\t\t\t\t\tdelete move.c;\n\t\t\t\t} else\n\t\t\t\t\tkillPieceIndex=$this.board[move.c[move.c.length-1]].i;\n\t\t\t}\n\t\t}\n\t\tfunction AnimateVanish(args) {\n\t\t\t$this.HuntAnimateVanish(xdv,aGame,move.c,function() {\n\t\t\t\thtsm.smQueueEvent(\"E_ANIM_DONE\",{});\t\t\t\t\t\n\t\t\t});\n\t\t}\n\n\t\thtsm.smTransition(\"S_INIT\", \"E_INIT\", \"S_SELECT\", [ Init ]);\n\t\thtsm.smEntering(\"S_SELECT\", [ Select ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CONFIRM\",\"S_ANIMATING_VANISH\", [ AnimateVanish ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_ENTER\",\"S_ANIMATING\", [ Animate ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICKED\",\"S_ANIMATING\", [ SaveSegment,Animate ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CANCEL\",null, [ Clean,CancelLastClick,Select ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_DONE\", \"S_ANIMATING_VANISH\", [ AnimateVanish ]);\n\t\thtsm.smLeaving(\"S_SELECT\", [ Clean ]);\n\t\thtsm.smTransition(\"S_ANIMATING\",\"E_ANIM_DONE\",\"S_SELECT\",[]);\n\t\thtsm.smTransition(\"S_ANIMATING_VANISH\",\"E_ANIM_DONE\",null,[SendMove]);\n\t\thtsm.smTransition([\"S_SELECT\",\"S_ANIMATING\",\"S_ANIMATING_VANISH\"],\"E_END\",\"S_DONE\",[]);\n\t\thtsm.smEntering(\"S_DONE\",[Clean]);\n\t}\n\t\n\tView.Board.xdPlayedMove = function(xdv, aGame, aMove) {\n\t\tvar $this=this;\n\t\tvar pieceIndex0=aGame.mOldBoard.board[aMove.p[0]].i;\n\t\tif(aMove.p.length==0)\n\t\t\tthis.HuntAnimateDrop(xdv,aGame,pieceIndex0,aMove.p[0],function() {\n\t\t\t\taGame.mOldBoard.HuntAnimateVanish(xdv,aGame,aMove.c,function() {\n\t\t\t\t\taGame.MoveShown();\t\t\t\t\t\n\t\t\t\t});\n\t\t\t});\n\t\telse {\n\t\t\tvar index=0;\n\t\t\tfunction AnimateSegment() {\n\t\t\t\tif(++index==aMove.p.length)\n\t\t\t\t\taGame.mOldBoard.HuntAnimateVanish(xdv,aGame,aMove.c,function() {\n\t\t\t\t\t\taGame.MoveShown();\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\telse {\n\t\t\t\t\tvar angle=$this.HuntAngle(aGame,aMove.p[index-1],aMove.p[index]);\n\t\t\t\t\tvar killPieceIndex=-1;\n\t\t\t\t\tif(aMove.c!==undefined && aMove.c.length>index-1)\n\t\t\t\t\t\tkillPieceIndex=aGame.mOldBoard.board[aMove.c[index-1]].i;\n\t\t\t\t\t$this.HuntAnimatePiece(xdv,aGame,pieceIndex0,aMove.p[index-1],aMove.p[index],angle,killPieceIndex,AnimateSegment);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAnimateSegment();\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tView.Board.HuntAnimatePiece=function(xdv,aGame,pieceIndex,from,to,angle,killPieceIndex,fnt) {\n\t\tvar coord=aGame.getCCoord(to);\n\n\t\tvar seqIndex=0;\n\t\tvar hunter= aGame.g.catcher!=this.mWho; \n\t\tvar huntGameData=aGame.g.huntGameData;\n\n\t\tvar sequence=huntGameData.sequences[hunter?\"hunter\":\"prey\"][((!hunter)&&(killPieceIndex>=0))?\"jump\":\"walk\"];\n\t\tvar endMorph=hunter?huntGameData.hunterMorph:huntGameData.preyMorph;\n\t\tvar nbSteps=sequence.length;\n\t\t\n\t\tvar z0=hunter?aGame.g.huntGameData.hunterZ0:aGame.g.huntGameData.preyZ0;\n\t\tvar z1=z0;\n\t\tvar jump=(killPieceIndex>=0);\n\t\tif(!hunter) {\n\t\t\tif(jump)\n\t\t\t\tz1+=SSIZE*huntGameData.jumpEatScale;\n\t\t\telse\n\t\t\t\tif (huntGameData.preyJumpsAtWalk)\n\t\t\t\t\tz1+=SSIZE*huntGameData.jumpMoveScale;\n\t\t}\n\t\tvar z2=z0;\n\t\tvar c=z0;\n\t\tvar S1=c-z1;\n\t\tvar S2=c-z2;\n\n\t\tvar A=-1;\n\t\tvar B=4*S1-2*S2;\n\t\tvar C=-S2*S2;\n\t\tvar D=B*B-4*A*C;\n\t\tvar a1=(-B-Math.sqrt(D))/(2*A);\n\t\tvar a2=(-B+Math.sqrt(D))/(2*A);\n\t\tvar a=a1;\n\t\tvar b=-a-S2;\n\t\tif(a==0 || -b/(2*a)<0 || -b/(2*a)>1) {\n\t\t\ta=a2;\n\t\t\tb=-a-S2;\n\t\t}\n\t\t\n\t\tvar coord0=aGame.getCCoord(from);\n\t\tvar morphTime=550/nbSteps;\n\t\tfunction Move() {\n\t\t\tvar morphStep=sequence[seqIndex++];\n\t\t\tif(seqIndex<=nbSteps) {\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex, {\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tx : coord0[0]+(coord[0]-coord0[0])*(seqIndex/sequence.length),\n\t\t\t\t\t\ty : coord0[1]+(coord[1]-coord0[1])*(seqIndex/sequence.length),\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\tpositionEasing: (typeof(TWEEN)==\"undefined\")?null:TWEEN.Easing.Linear.EaseNone,\n\t\t\t\t\t\tmorphingEasing: (typeof(TWEEN)==\"undefined\")?null:TWEEN.Easing.Linear.EaseNone,\n\t\t\t\t\t\tmorphing: morphStep,\n\t\t\t\t\t\tpositionEasingUpdate: function(ratio) {\n\t\t\t\t\t\t\tvar ratio0=(seqIndex-1)/nbSteps+ratio*1/nbSteps;\n\t\t\t\t\t\t\tvar y=(a*ratio0*ratio0+b*ratio0+c)*this.SCALE3D;\n\t\t\t\t\t\t\tthis.object3d.position.y=y;\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},morphTime,Move);\n\t\t\t} else {\n\t\t\t\tif (jump) aGame.PlaySound(huntGameData.soundEndJump);\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex, {\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\tmorphing: endMorph,\n\t\t\t\t\t\tz: z2,\n\t\t\t\t\t}\n\t\t\t\t},morphTime,fnt);\n\t\t\t}\n\t\t}\n\t\t\n\t\txdv.updateGadget(\"piece#\"+pieceIndex, {\n\t\t\t\"3d\":{\n\t\t\t\trotate: angle,\n\t\t\t}\n\t\t},250,function() {\n\t\t\tif(killPieceIndex>=0) {\n\t\t\t\txdv.updateGadget(\"piece#\"+killPieceIndex, {\n\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\t\"z\": huntGameData.killPieceZTempo*SSIZE,\n\t\t\t\t\t\tpositionEasingUpdate: null,\n\t\t\t\t\t}\n\t\t\t\t},400);\n\t\t\t}\n\t\t\tif (!jump) aGame.PlaySound(huntGameData.soundMove);\n\t\t\tMove();\n\t\t});\n\t\t\t\t\n\n\t}\n\n\tView.Board.HuntAnimateDrop=function(xdv,aGame,pieceIndex,to,fnt) {\n\t\tvar coord=aGame.getCCoord(to);\n\n\t\txdv.updateGadget(\"piece#\"+pieceIndex, {\n\t\t\t\"base\": {\n\t\t\t\tx: coord[0],\n\t\t\t\ty: coord[1],\n\t\t\t},\n\t\t},500,fnt);\n\t}\n\n\tView.Board.HuntAnimateVanish=function(xdv,aGame,capts0,fnt) {\n\t\tif(capts0===undefined || capts0.length==0)\n\t\t\tfnt();\n\t\telse {\n\t\t\tvar animCount=0;\n\t\t\tvar capts={};\n\t\t\tfor(var i=0;i<capts0.length;i++)\n\t\t\t\tcapts[capts0[i]]=true;\n\t\t\tfunction AnimEnd() {\n\t\t\t\tif(--animCount==0)\n\t\t\t\t\tfnt();\n\t\t\t}\n\t\t\tfor(var pos in capts) \n\t\t\t\tif(capts.hasOwnProperty(pos)) {\n\t\t\t\t\tanimCount++;\n\t\t\t\t\txdv.updateGadget(\"piece#\"+this.board[pos].i,{\n\t\t\t\t\t\t\"base\": {\n\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\tz: aGame.g.huntGameData.killPieceZFinal*SSIZE,\n\t\t\t\t\t\t}\n\t\t\t\t\t},500,AnimEnd);\n\t\t\t\t}\n\t\t}\n\t}\n\n})();\n\n"],"file":"decercarlaliebre-view.js"}