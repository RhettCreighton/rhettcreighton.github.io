{"version":3,"names":[],"mappings":"","sources":["shafran-model.js"],"sourcesContent":["\n(function() {\n\t\n\tvar posNames = {\n\t\t2:'a1',11:'b1',21:'c1',30:'d1',40:'e1',\n\t\t3:'a2',12:'b2',22:'c2',31:'d2',41:'e2',50:'f2',\n\t\t4:'a3',13:'b3',23:'c3',32:'d3',42:'e3',51:'f3',61:'g3',\n\t\t5:'a4',14:'b4',24:'c4',33:'d4',43:'e4',52:'f4',62:'g4',71:'h4',\n\t\t6:'a5',15:'b5',25:'c5',34:'d5',44:'e5',53:'f5',63:'g5',72:'h5',82:'i5',\n\t\t7:'a6',16:'b6',26:'c6',35:'d6',45:'e6',54:'f6',64:'g6',73:'h6',83:'i6',\n\t\t       17:'b7',27:'c7',36:'d7',46:'e7',55:'f7',65:'g7',74:'h7',84:'i7',\n\t\t               28:'c8',37:'d8',47:'e8',56:'f8',66:'g8',75:'h8',85:'i8',\n\t\t                       38:'d9',48:'e9',57:'f9',67:'g9',76:'h9',86:'i9',\n\t\t                               49:'e10',58:'f10',68:'g10',77:'h10',87:'i10',\n\t\t65:'f11',\n\t};\n\t\n\tvar geometry = Model.Game.cbBoardGeometryHex([ \n\n       '    # . + # . +     ',\n       '   . + # . + # .    ',\n       '  + # . + # . + #   ',\n       ' # . + # . + # . +  ',\n       '. + # . + # . + # . ',\n       ' # . + # . + # . +  ',\n       '  + # . + # . + #   ',\n       '   . + # . + # .    ',\n       '    # . + # . +     ',\n    ],posNames);\n\t\n\tvar promo = {\n\t\t\"1\": { 7:1, 17:1, 28:1, 38:1, 49:1, 58:1, 68:1, 77:1, 87:1 },\n\t\t\"-1\": { 2:1, 11:1, 21:1, 30:1, 40:1, 50:1, 61:1, 71:1, 82:1 },\n\t}\n\n\t// for each side and position, calculate distance to promotion line\n\tvar distPromo={\t\"1\": {}, \"-1\": {} };\n\tvar distance = geometry.GetDistances();\n\t[\"1\",\"-1\"].forEach(function(side) {\n\t\tfor(var pos in geometry.confine) {\n\t\t\tvar minDist=Infinity;\n\t\t\tfor(var pos1 in promo[side]) {\n\t\t\t\tvar dist=distance[pos][pos1];\n\t\t\t\tif(dist<minDist) {\n\t\t\t\t\tdistPromo[side][pos]=dist;\n\t\t\t\t\tminDist=dist;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t});\n\t\n\tModel.Game.cbDefine = function() {\n\t\t\n\t\treturn {\n\t\t\t\n\t\t\tgeometry: geometry,\n\t\t\t\n\t\t\tpieceTypes: {\n\n\t\t\t\t0: {\n\t\t\t\t\tname: 'pawn-w',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbMCPawnGraph(geometry,1,1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:1,p:3},{s:1,p:83}],\n\t\t\t\t\tepCatch: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t1: {\n\t\t\t\t\tname: 'ipawn-w',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbMCPawnGraph(geometry,1,2),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:1,p:12},{s:1,p:22},{s:1,p:62},{s:1,p:72}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t2: {\n\t\t\t\t\tname: 'pawn-b',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbMCPawnGraph(geometry,-1,1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:-1,p:6},{s:-1,p:86}],\n\t\t\t\t\tepCatch: true,\n\t\t\t\t},\n\n\t\t\t\t3: {\n\t\t\t\t\tname: 'ipawn-b',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbMCPawnGraph(geometry,-1,2),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:-1,p:16},{s:-1,p:27},{s:-1,p:76},{s:-1,p:67}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\t\t\t\t\n\t\t\t\t4: {\n\t\t\t\t\tname: 'knight',\n\t\t\t\t\tgraph: this.cbGLKnightGraph(geometry),\n\t\t\t\t\tvalue: 2.9,\n\t\t\t\t\tabbrev: 'N',\n\t\t\t\t\tinitial: [{s:1,p:11},{s:1,p:61},{s:-1,p:28},{s:-1,p:77}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t5: {\n\t\t\t\t\tname: 'bishop',\n\t\t\t\t\tgraph: this.cbGLBishopGraph(geometry),\n\t\t\t\t\tvalue: 3.1,\n\t\t\t\t\tabbrev: 'B',\n\t\t\t\t\tinitial: [{s:1,p:21},{s:1,p:50},{s:1,p:71},{s:-1,p:17},{s:-1,p:38},{s:-1,p:68}],\n\t\t\t\t},\n\n\t\t\t\t6: {\n\t\t\t\t\tname: 'rook',\n\t\t\t\t\tgraph: this.cbGLRookGraph(geometry),\n\t\t\t\t\tvalue: 5,\n\t\t\t\t\tabbrev: 'R',\n\t\t\t\t\tinitial: [{s:1,p:2},{s:1,p:82},{s:-1,p:7},{s:-1,p:87}],\n\t\t\t\t\tcastle: true,\n\t\t\t\t},\n\n\t\t\t\t7: {\n\t\t\t\t\tname: 'queen',\n\t\t\t\t\tgraph: this.cbGLQueenGraph(geometry),\n\t\t\t\t\tvalue: 9,\n\t\t\t\t\tabbrev: 'Q',\n\t\t\t\t\tinitial: [{s:1,p:30},{s:-1,p:58}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t8: {\n\t\t\t\t\tname: 'king',\n\t\t\t\t\tisKing: true,\n\t\t\t\t\tgraph: this.cbGLKingGraph(geometry),\n\t\t\t\t\tabbrev: 'K',\n\t\t\t\t\tinitial: [{s:1,p:40},{s:-1,p:49}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t9: {\n\t\t\t\t\tname: 'icpawn-w',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbMCPawnGraph(geometry,1,3),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:1,p:31},{s:1,p:41},{s:1,p:51}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t10: {\n\t\t\t\t\tname: 'icpawn-b',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbMCPawnGraph(geometry,-1,3),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:-1,p:37},{s:-1,p:48},{s:-1,p:57}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t\n\t\t\tcastle: {\n\t\t\t\t\"40/2\": {k:[30,21],r:[11,21,30],Xn:\"O-O\"},\n\t\t\t\t\"40/82\": {k:[50,61],r:[71,61,50],Xn:\"O-O\"},\n\t\t\t\t\n\t\t\t\t\"49/87\": {k:[58,68],r:[77,68,58],n:\"O-O\"},\n\t\t\t\t\"49/7\": {k:[38,28],r:[17,28,38],n:\"O-O\"},\n\t\t\t},\n\t\t\t\n\t\t\tpromote: function(aGame,piece,move) {\n\t\t\t\tif(piece.t==1 || piece.t==9)\n\t\t\t\t\treturn [0];\n\t\t\t\telse if(piece.t==3 || piece.t==10)\n\t\t\t\t\treturn [2];\n\t\t\t\telse if(piece.t==0 && (move.t in promo[1]))\n\t\t\t\t\treturn [4,5,6,7];\n\t\t\t\telse if(piece.t==2 && (move.t in promo[-1]))\n\t\t\t\t\treturn [4,5,6,7];\n\t\t\t\treturn [];\n\t\t\t},\n\n\t\t\tevaluate: function(aGame,evalValues,material) {\n\t\t\t\t\n\t\t\t\t// check lack of material to checkmate\n\t\t\t\tvar white=material[1].count;\n\t\t\t\tvar black=material[-1].count;\n\t\t\t\tif(!white[0] && !white[1] && !white[4] && !white[5] && !white[6] && !white[7]) { // white king single\n\t\t\t\t\tif(!black[2] && !black[3] && !black[6] && !black[7] && (black[4]+black[5]<2 || black[5]<2)) {\n\t\t\t\t\t\tthis.mFinished=true;\n\t\t\t\t\t\tthis.mWinner=JocGame.DRAW;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!black[2] && !black[3] && !black[4] && !black[5] && !black[6] && !black[7]) { // black king single\n\t\t\t\t\tif(!white[0] && !white[1] && !white[6] && !white[7] && (white[4]+white[5]<2 || white[5]<2)) {\n\t\t\t\t\t\tthis.mFinished=true;\n\t\t\t\t\t\tthis.mWinner=JocGame.DRAW;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// check 50 moves without capture\n\t\t\t\tif(this.noCaptCount>=100) {\n\t\t\t\t\tthis.mFinished=true;\n\t\t\t\t\tthis.mWinner=JocGame.DRAW;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// motivate pawns to reach the promotion line\n\t\t\t\tvar distPromo0=aGame.cbUseTypedArrays?new Int8Array(3):[0,0,0];\n\t\t\t\tvar pawns=material[1].byType[0],pawnsLength;\n\t\t\t\tif(pawns) {\n\t\t\t\t\tpawnsLength=pawns.length;\n\t\t\t\t\tfor(var i=0;i<pawnsLength;i++) {\n\t\t\t\t\t\tvar dProm=distPromo[1][pawns[i].p];\n\t\t\t\t\t\tif(dProm>0 && dProm<4)\n\t\t\t\t\t\t\tdistPromo0[dProm-1]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpawns=material[-1].byType[2],pawnsLength;\n\t\t\t\tif(pawns) {\n\t\t\t\t\tpawnsLength=pawns.length;\n\t\t\t\t\tfor(var i=0;i<pawnsLength;i++) {\n\t\t\t\t\t\tvar dProm=distPromo[-1][pawns[i].p];\n\t\t\t\t\t\tif(dProm>0 && dProm<4)\n\t\t\t\t\t\t\tdistPromo0[dProm-1]--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(distPromo0[0]!=0)\n\t\t\t\t\tevalValues['distPawnPromo1']=distPromo0[0];\n\t\t\t\tif(distPromo0[1]!=0)\n\t\t\t\t\tevalValues['distPawnPromo2']=distPromo0[1];\n\t\t\t\tif(distPromo0[2]!=0)\n\t\t\t\t\tevalValues['distPawnPromo3']=distPromo0[2];\n\t\t\t\t\n\t\t\t\t// motivate knights and bishops to deploy early\n\t\t\t\tvar minorPiecesMoved=0;\n\t\t\t\tfor(var t=4;t<=5;t++)\n\t\t\t\t\tfor(var s=1;s>=-1;s-=2) {\n\t\t\t\t\t\tvar pieces=material[s].byType[t];\n\t\t\t\t\t\tif(pieces)\n\t\t\t\t\t\t\tfor(var i=0;i<pieces.length;i++)\n\t\t\t\t\t\t\t\tif(pieces[i].m)\n\t\t\t\t\t\t\t\t\tminorPiecesMoved+=s;\n\t\t\t\t\t}\n\t\t\t\tif(minorPiecesMoved!=0) {\n\t\t\t\t\tevalValues['minorPiecesMoved']=minorPiecesMoved;\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t};\n\t}\n\t\n\tvar extraCastle={\n\t\t2:{k:[11],r:[11,21]},82:{k:[71],r:[61]},\n\t\t87:{k:[77],r:[68]},7:{k:[17],r:[28]}\n\t}\n\t\n\tvar SuperModelBoardGenerateMoves=Model.Board.GenerateMoves;\n\tModel.Board.GenerateMoves = function(aGame) {\n\t\tSuperModelBoardGenerateMoves.apply(this,arguments); // call regular GenerateMoves method\n\t\tif(!this.castled[this.mWho]) {\n\t\t\tfor(var i=0;i<this.mMoves.length;i++) {\n\t\t\t\tvar move=this.mMoves[i];\n\t\t\t\tvar extra = extraCastle[move.cg];\n\t\t\t\tif(extra) {\n\t\t\t\t\tvar kIndex=this.board[move.f];\n\t\t\t\t\tvar kPiece=this.pieces[kIndex];\n\t\t\t\t\tthis.board[move.f]=-1;\n\t\t\t\t\tthis.board[extra.k[0]]=kIndex;\n\t\t\t\t\tkPiece.p=extra.k[0];\n\t\t\t\t\t\n\t\t\t\t\tvar inCheck=this.cbGetAttackers(aGame,kPiece.p,this.mWho,true).length>0;\n\t\t\t\t\tif(!inCheck) {\n\t\t\t\t\t\tvar rIndex=this.board[move.cg];\n\t\t\t\t\t\tvar rPiece=this.pieces[rIndex];\n\t\t\t\t\t\tthis.board[move.cg]=-1;\n\t\t\t\t\t\tthis.board[extra.r[0]]=rIndex;\n\t\t\t\t\t\trPiece.p=extra.r[0];\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar oppInCheck=this.cbGetAttackers(aGame,this.kings[-this.mWho],-this.mWho,true).length>0;\n\t\t\t\t\t\tthis.mMoves.push({\n\t\t\t\t\t\t\tf: move.f,\n\t\t\t\t\t\t\tt: extra.k[0],\n\t\t\t\t\t\t\tc: null,\n\t\t\t\t\t\t\tck: oppInCheck,\n\t\t\t\t\t\t\ta: 'K',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.board[extra.r[0]]=-1;\n\t\t\t\t\t\tthis.board[move.cg]=rIndex;\n\t\t\t\t\t\trPiece.p=move.cg;\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tthis.board[extra.k[0]]=-1;\n\t\t\t\t\tthis.board[move.f]=kIndex;\n\t\t\t\t\tkPiece.p=move.f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tModel.Game.wbExtraCastleRook={ // rook identification and displacement from king destination\n\t\t11:{r0:2,r:21},71:{r0:82,r:61},\n\t\t17:{r0:7,r:28},77:{r0:87,r:68},\n\t}\n\t\n\tvar SuperModelBoardApplyMove=Model.Board.ApplyMove;\n\tModel.Board.ApplyMove = function(aGame,move) {\n\t\tif(move.a=='K' && !this.castled[this.mWho] && move.cg===undefined) {\n\t\t\tvar dc=aGame.g.distGraph[move.t][move.f];\n\t\t\tif(dc==3) {\n\t\t\t\tvar kPiece=this.pieces[this.board[move.f]];\n\t\t\t\tthis.board[move.f]=-1;\n\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",kPiece.i,move.f);\n\t\t\t\tthis.board[move.t]=kPiece.i;\n\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",kPiece.i,move.t);\n\t\t\t\tkPiece.p=move.t;\n\t\t\t\tthis.kings[this.mWho]=kPiece.p;\n\t\t\t\tvar extra=aGame.wbExtraCastleRook[move.t];\n\t\t\t\tvar rPiece=this.pieces[this.board[extra.r0]];\n\t\t\t\tthis.board[extra.r0]=-1;\n\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",rPiece.i,extra.r0);\n\t\t\t\tthis.board[extra.r]=rPiece.i;\n\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",rPiece.i,extra.r);\n\t\t\t\trPiece.p=extra.r;\t\t\t\t\n\t\t\t\tthis.check=!!move.ck;\n\t\t\t\tthis.castled[this.mWho]=true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSuperModelBoardApplyMove.apply(this,arguments);\n\t}\n\n\t\n})();"],"file":"shafran-chess-model.js"}