{"version":3,"names":[],"mappings":"","sources":["smess-geo-model.js"],"sourcesContent":["\n(function() {\n\t\n\tModel.Game.cbBoardGeometrySmess = function(width,height) {\n\t\tvar $this=this;\n\t\tvar distance;\n\t\t\n\t\tfunction C(pos) {\n\t\t\treturn pos%width;\n\t\t}\n\t\tfunction R(pos) {\n\t\t\treturn Math.floor(pos/width);\n\t\t}\n\t\tfunction POS(c,r) {\n\t\t\treturn r*width+c;\n\t\t}\n\t\tfunction Graph(pos,delta) {\n\t\t\tvar c0=C(pos);\n\t\t\tvar r0=R(pos);\n\t\t\tvar c=c0+delta[0];\n\t\t\tvar r=r0+delta[1];\n\t\t\tif(c<0 || c>=width || r<0 || r>=height)\n\t\t\t\treturn null;\n\t\t\treturn POS(c,r);\n\t\t}\n\t\tfunction PosName(pos) {\n\t\t\t return String.fromCharCode((\"a\".charCodeAt(0))+C(pos)) + (R(pos)+1);\n\t\t}\n\t\tfunction PosByName(str) {\n\t\t\tvar m=/^([a-z])([0-9]+)$/.exec(str);\n\t\t\tif(!m)\n\t\t\t\treturn -1;\n\t\t\tvar c=m[1].charCodeAt(0)-\"a\".charCodeAt(0);\n\t\t\tvar r=parseInt(m[2])-1;\n\t\t\treturn POS(c,r);\n\t\t}\n\t\tfunction CompactCrit(pos,index) {\n\t\t\tif(index==0)\n\t\t\t\treturn String.fromCharCode((\"a\".charCodeAt(0))+C(pos));\n\t\t\telse if(index==1)\n\t\t\t\treturn (R(pos)+1);\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\tfunction GetDistances() {\n\t\t\tif(distance!==undefined)\n\t\t\t\treturn distance;\n\t\t\tdistance={};\n\t\t\tfor(var pos=0;pos<width*height;pos++) {\n\t\t\t\tdistance[pos]={};\n\t\t\t\tdistance[pos][pos]=0;\t\t\t\t\n\t\t\t}\n\t\t\tvar graphDeltas={\n\t\t\t\t0:[-1,1],1:[0,1],2:[1,1],3:[1,0],4:[1,-1],5:[0,-1],6:[-1,-1],7:[-1,0],\n\t\t\t}\n\t\t\tvar modifs=true;\n\t\t\twhile(modifs) {\n\t\t\t\tmodifs=false;\n\t\t\t\tfor(var pos=0;pos<width*height;pos++) {\n\t\t\t\t\tvar deltas=[];\n\t\t\t\t\tfor(var i=0;i<8;i++) {\n\t\t\t\t\t\tif($this.cbSmessGraph[pos] & (1<<i))\n\t\t\t\t\t\t\tdeltas.push(graphDeltas[i]);\n\t\t\t\t\t}\n\t\t\t\t\tdeltas.forEach(function(delta) {\n\t\t\t\t\t\tvar pos1=Graph(pos,delta);\n\t\t\t\t\t\tif(pos1==null)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tif(distance[pos][pos1]!=1) {\n\t\t\t\t\t\t\tdistance[pos][pos1]=1;\n\t\t\t\t\t\t\tmodifs=true;\n\t\t\t\t\t\t} \n\t\t\t\t\t\tfor(var pos2=0;pos2<width*height;pos2++) {\n\t\t\t\t\t\t\tif(pos2==pos)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif(distance[pos][pos2]===undefined && distance[pos1][pos2]!==undefined) {\n\t\t\t\t\t\t\t\tdistance[pos][pos2]=distance[pos1][pos2]+1;\n\t\t\t\t\t\t\t\tmodifs=true;\n\t\t\t\t\t\t\t} else if(distance[pos][pos2]!==undefined && distance[pos1][pos2]!==undefined && distance[pos][pos2]>distance[pos1][pos2]+1) {\n\t\t\t\t\t\t\t\tdistance[pos][pos2]=distance[pos1][pos2]+1;\n\t\t\t\t\t\t\t\tmodifs=true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn distance;\n\t\t}\n\t\tfunction DistPromo() {\n\t\t\t// for each side and position, calculate distance to promotion line\n\t\t\tvar distPromo={\t\"1\": {}, \"-1\": {} };\n\t\t\tvar distance = GetDistances();\n\t\t\t[\"1\",\"-1\"].forEach(function(side) {\n\t\t\t\tfor(var pos=0;pos<width*height;pos++) {\n\t\t\t\t\tvar minDist=Infinity;\n\t\t\t\t\tfor(var pos1 in $this.cbSmessPromoPoss[side]) {\n\t\t\t\t\t\tvar dist=distance[pos][pos1];\n\t\t\t\t\t\tif(dist<minDist) {\n\t\t\t\t\t\t\tdistPromo[side][pos]=dist;\n\t\t\t\t\t\t\tminDist=dist;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\n\t\t\t});\n\t\t\treturn distPromo;\n\t\t}\n\t\tfunction DistEdges() {\n\t\t\tvar dist=[];\n\t\t\tfor(var pos=0;pos<width*height;pos++) {\n\t\t\t\tvar c=C(pos);\n\t\t\t\tvar r=R(pos);\n\t\t\t\tdist[pos]=Math.min(\n\t\t\t\t\tc, Math.abs(width-c-1),\n\t\t\t\t\tr, Math.abs(height-r-1)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn dist;\n\t\t}\n\t\tfunction Corners() {\n\t\t\tvar corners={};\n\t\t\tcorners[POS(0,0)]=1;\n\t\t\tcorners[POS(0,height-1)]=1;\n\t\t\tcorners[POS(width-1,0)]=1;\n\t\t\tcorners[POS(width-1,height-1)]=1;\n\t\t\treturn corners;\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tboardSize: width*height,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tC: C,\n\t\t\tR: R,\n\t\t\tPOS: POS,\n\t\t\tGraph: Graph, \n\t\t\tPosName: PosName,\n\t\t\tPosByName: PosByName,\n\t\t\tCompactCrit: CompactCrit,\n\t\t\tGetDistances: GetDistances,\n\t\t\tdistEdge: DistEdges(),\n\t\t\tcorners: Corners(),\n\t\t\tdistPromo: DistPromo(),\n\t\t};\n\t}\n\t\n\tModel.Game.cbSmessGraph=[\n\t    2, 128|2|8, 128|2|8, 128|2|8, 128|2|8, 128|2|8, 128|2,\n\t    2|32, 2|8, 2|8|32|128, 128|2|8, 2|8|32|128, 2|16|128, 2|32,\n\t    2|8|32, 8|32|128, 1|4|16|64, 8|128, 1|4|16|64, 2|8|32|128, 2|32|128,\n\t    2|32, 2|8|32|128, 2|32|128, 1|2|4|8|16|32|64|128, 2|32|128, 128, 1|64|128,\n\t    4|8|16, 8, 2|8|32, 1|2|4|8|16|32|64|128, 2|8|32, 2|8|32|128, 2|32,\n\t    2|8|32, 2|8|32|128, 1|4|16|64, 8|128, 1|4|16|64, 2|8|128, 2|32|128,\n\t    2|32, 1|8|32, 2|8|32|128, 8|32|128, 2|8|32|128, 32|128, 2|32,\n\t    8|32, 8|32|128, 8|32|128, 8|32|128, 8|32|128, 8|32|128, 32,\n\t];\n\t\n\tModel.Game.cbSmessPromoPoss={\n\t\t\"1\": { 50:1,51:1,53:1,54:1 },\n\t\t\"-1\": { 1:1,2:1,4:1,5:1 },\n\t}\n\t\n\tModel.Game.cbSmessPieceGraph = function(geometry,longRange) {\n\t\tvar $this=this;\n\t\tvar flags = this.cbConstants.FLAG_MOVE | this.cbConstants.FLAG_CAPTURE;\n\t\tvar graphDeltas={\n\t\t\t0:[-1,1],1:[0,1],2:[1,1],3:[1,0],4:[1,-1],5:[0,-1],6:[-1,-1],7:[-1,0],\n\t\t}\n\t\tvar graph={};\n\t\tfor(var pos=0;pos<geometry.boardSize;pos++) {\n\t\t\tgraph[pos]=[];\n\t\t\tvar deltas=[];\n\t\t\tfor(var i=0;i<8;i++) {\n\t\t\t\tif(this.cbSmessGraph[pos] & (1<<i))\n\t\t\t\t\tdeltas.push(graphDeltas[i]);\n\t\t\t}\n\t\t\tdeltas.forEach(function(delta) {\n\t\t\t\tvar line=[];\n\t\t\t\tvar pos1=geometry.Graph(pos,delta);\n\t\t\t\twhile(pos1!=null) {\n\t\t\t\t\tline.push(pos1 | flags);\n\t\t\t\t\tif(!longRange)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t\tpos1=geometry.Graph(pos1,delta);\n\t\t\t\t} \n\t\t\t\tif(line.length>0)\n\t\t\t\t\tgraph[pos].push($this.cbTypedArray(line));\n\t\t\t});\n\t\t}\n\t\treturn graph;\n\t}\n\n})();\n"],"file":"smess-model.js"}