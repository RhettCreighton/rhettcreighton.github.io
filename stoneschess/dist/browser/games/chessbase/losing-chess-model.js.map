{"version":3,"names":[],"mappings":"","sources":["losing-model.js"],"sourcesContent":["\n(function() {\n\t\n\tvar geometry = Model.Game.cbBoardGeometryGrid(8,8);\n\n\tvar USE_TYPED_ARRAYS = typeof Int32Array != \"undefined\";\n\tvar MASK = 0xffff;   // unreachable position\n\tvar FLAG_MOVE = 0x10000; // move to if target pos empty\n\tvar FLAG_CAPTURE = 0x20000; // capture if occupied by enemy\n\tvar FLAG_STOP = 0x40000; // stop if occupied\n\tvar FLAG_SCREEN_CAPTURE = 0x80000; // capture if occupied by and a piece has been jumped in the path (like cannon in xiangqi) \n\n\tModel.Game.cbDefine = function() {\n\t\t\n\t\treturn {\n\t\t\t\n\t\t\tgeometry: geometry,\n\t\t\t\n\t\t\tpieceTypes: {\n\n\t\t\t\t0: {\n\t\t\t\t\tname: 'pawn-w',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbPawnGraph(geometry,1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tepCatch: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t1: {\n\t\t\t\t\tname: 'ipawn-w',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbInitialPawnGraph(geometry,1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:1,p:8},{s:1,p:9},{s:1,p:10},{s:1,p:11},{s:1,p:12},{s:1,p:13},{s:1,p:14},{s:1,p:15}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t2: {\n\t\t\t\t\tname: 'pawn-b',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbPawnGraph(geometry,-1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tepCatch: true,\n\t\t\t\t},\n\n\t\t\t\t3: {\n\t\t\t\t\tname: 'ipawn-b',\n\t\t\t\t\taspect: 'pawn',\n\t\t\t\t\tgraph: this.cbInitialPawnGraph(geometry,-1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:-1,p:48},{s:-1,p:49},{s:-1,p:50},{s:-1,p:51},{s:-1,p:52},{s:-1,p:53},{s:-1,p:54},{s:-1,p:55}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t4: {\n\t\t\t\t\tname: 'knight',\n\t\t\t\t\tgraph: this.cbKnightGraph(geometry),\n\t\t\t\t\tvalue: 2.9,\n\t\t\t\t\tabbrev: 'N',\n\t\t\t\t\tinitial: [{s:1,p:1},{s:1,p:6},{s:-1,p:57},{s:-1,p:62}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t5: {\n\t\t\t\t\tname: 'bishop',\n\t\t\t\t\tgraph: this.cbBishopGraph(geometry),\n\t\t\t\t\tvalue: 3.1,\n\t\t\t\t\tabbrev: 'B',\n\t\t\t\t\tinitial: [{s:1,p:2},{s:1,p:5},{s:-1,p:58},{s:-1,p:61}],\n\t\t\t\t},\n\n\t\t\t\t6: {\n\t\t\t\t\tname: 'rook',\n\t\t\t\t\tgraph: this.cbRookGraph(geometry),\n\t\t\t\t\tvalue: 5,\n\t\t\t\t\tabbrev: 'R',\n\t\t\t\t\tinitial: [{s:1,p:0},{s:1,p:7},{s:-1,p:56},{s:-1,p:63}],\n\t\t\t\t},\n\n\t\t\t\t7: {\n\t\t\t\t\tname: 'queen',\n\t\t\t\t\tgraph: this.cbQueenGraph(geometry),\n\t\t\t\t\tvalue: 9,\n\t\t\t\t\tabbrev: 'Q',\n\t\t\t\t\tinitial: [{s:1,p:3},{s:-1,p:59}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t8: {\n\t\t\t\t\tname: 'king',\n\t\t\t\t\tgraph: this.cbKingGraph(geometry),\n\t\t\t\t\tabbrev: 'K',\n\t\t\t\t\tinitial: [{s:1,p:4},{s:-1,p:60}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\tpromote: function(aGame,piece,move) {\n\t\t\t\tif(piece.t==1)\n\t\t\t\t\treturn [0];\n\t\t\t\telse if(piece.t==3)\n\t\t\t\t\treturn [2];\n\t\t\t\telse if(piece.t==0 && geometry.R(move.t)==7)\n\t\t\t\t\treturn [4,5,6,7,8];\n\t\t\t\telse if(piece.t==2 && geometry.R(move.t)==0)\n\t\t\t\t\treturn [4,5,6,7,8];\n\t\t\t\treturn [];\n\t\t\t}\t\t\t\n\t\t};\n\t}\n\n\tModel.Board.Evaluate = function(aGame) {\n\t\tvar debug=arguments[3]==\"debug\";\n\t\tvar $this=this;\n\t\tthis.mEvaluation=0;\n\t\tvar who=this.mWho;\n\t\tvar g=aGame.g;\n\t\tvar material;\n\t\tif(USE_TYPED_ARRAYS)\n\t\t\tmaterial={ \n\t\t\t\t'1': {\n\t\t\t\t\tcount: new Uint8Array(g.pTypes.length),\n\t\t\t\t\tbyType: {},\n\t\t\t\t},\n\t\t\t\t'-1': {\n\t\t\t\t\tcount: new Uint8Array(g.pTypes.length), \n\t\t\t\t\tbyType: {},\n\t\t\t\t}\n\t\t\t}\n\t\telse {\n\t\t\tmaterial={ \n\t\t\t\t'1': {\n\t\t\t\t\tcount: [],\n\t\t\t\t\tbyType: {},\n\t\t\t\t},\n\t\t\t\t'-1': {\n\t\t\t\t\tcount: [], \n\t\t\t\t\tbyType: {},\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(var i=0;i<g.pTypes.length;i++)\n\t\t\t\tmaterial[\"1\"].count[i]=material[\"-1\"].count[i]=0;\n\t\t}\n\n\t\tif(aGame.mOptions.preventRepeat && aGame.GetRepeatOccurence(this)>2) {\n\t\t\tthis.mFinished=true;\n\t\t\tthis.mWinner=aGame.cbOnPerpetual?who*aGame.cbOnPerpetual:JocGame.DRAW;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar pieceValue={ '1': 0, '-1': 0 };\n\t\tvar pieceCount={ '1': 0, '-1': 0 };\n\t\tvar posValue={ '1': 0, '-1': 0 };\n\t\t\n\t\tvar pieces=this.pieces;\n\t\tvar piecesLength=pieces.length;\n\t\tfor(var i=0;i<piecesLength;i++) {\n\t\t\tvar piece=pieces[i];\n\t\t\tif(piece.p>=0) {\n\t\t\t\tvar s=piece.s;\n\t\t\t\tvar pType=g.pTypes[piece.t];\n\t\t\t\tpieceValue[s]+=pType.value;\n\t\t\t\tpieceCount[s]++;\n\t\t\t\tposValue[s]+=aGame.cbVar.geometry.distEdge[piece.p];\n\t\t\t\tvar mat=material[s];\n\t\t\t\tmat.count[piece.t]++;\n\t\t\t\tvar byType=mat.byType;\n\t\t\t\tif(byType[piece.t]===undefined)\n\t\t\t\t\tbyType[piece.t]=[piece];\n\t\t\t\telse\n\t\t\t\t\tbyType[piece.t].push(piece);\t\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\tif(pieceCount['1']==0) {\n\t\t\tthis.mFinished = true;\n\t\t\tthis.mWinner = 1;\n\t\t\treturn;\n\t\t}\n\n\t\tif(pieceCount['-1']==0) {\n\t\t\tthis.mFinished = true;\n\t\t\tthis.mWinner = -1;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(this.lastMove && this.lastMove.c!=null) {\n\t\t\tvar piece=this.pieces[this.board[this.lastMove.t]];\n\t\t\tpieceValue[-piece.s]+=this.cbStaticExchangeEval(aGame,piece.p,piece.s,{piece:piece})\n\t\t}\n\t\t\n\t\tvar evalValues={\n\t\t\t\"pieceValue\": pieceValue['-1']-pieceValue['1'],\n\t\t\t\"pieceValueRatio\": (pieceValue['-1']-pieceValue['1'])/(pieceValue['-1']+pieceValue['1']+1),\n\t\t\t\"posValue\": posValue['-1']-posValue['1']\n\t\t}\n\n\t\tvar evParams=aGame.mOptions.levelOptions;\n\t\tfor(var name in evalValues) {\n\t\t\tvar value=evalValues[name];\n\t\t\tvar factor=evParams[name+'Factor'] || 0;\n\t\t\tvar weighted=value*factor;\n\t\t\tif(debug)\n\t\t\t\tconsole.log(name,\"=\",value,\"*\",factor,\"=>\",weighted);\n\t\t\tthis.mEvaluation+=weighted;\n\t\t}\n\t\tif(debug)\n\t\t\tconsole.log(\"Evaluation\",this.mEvaluation);\n\t}\n\n\tModel.Board.cbGeneratePseudoLegalMoves = function(aGame) {\n\t\tvar $this=this;\n\t\tvar moves=[];\n\t\tvar cbVar=aGame.cbVar;\n\t\tvar who=this.mWho;\n\t\t\n\t\tfunction PromotedMoves(piece,move) {\n\t\t\tvar promoFnt=aGame.cbVar.promote;\n\t\t\tif(!promoFnt) {\n\t\t\t\tmoves.push(move);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar promo=promoFnt.call($this,aGame,piece,move);\n\t\t\tif(promo==null)\n\t\t\t\treturn;\n\t\t\tif(promo.length==0)\n\t\t\t\tmoves.push(move);\n\t\t\telse if(promo.length==1) {\n\t\t\t\tmove.pr=promo[0];\n\t\t\t\tmoves.push(move);\n\t\t\t} else {\n\t\t\t\tfor(var i=0;i<promo.length;i++) {\n\t\t\t\t\tvar pr=promo[i];\n\t\t\t\t\tmoves.push({\n\t\t\t\t\t\tf: move.f,\n\t\t\t\t\t\tt: move.t,\n\t\t\t\t\t\tc: move.c,\n\t\t\t\t\t\tpr: pr,\n\t\t\t\t\t\tept: move.ept,\n\t\t\t\t\t\tep: move.ep,\n\t\t\t\t\t\ta: move.a,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar piecesLength=this.pieces.length;\n\t\tfor(var i=0;i<piecesLength;i++) {\n\t\t\tvar piece=this.pieces[i];\n\t\t\tif(piece.p<0 || piece.s!=who)\n\t\t\t\tcontinue;\n\t\t\tvar pType=aGame.g.pTypes[piece.t];\n\t\t\t\n\t\t\tvar graph, graphLength;\n\t\t\tgraph=pType.graph[piece.p];\n\t\t\tgraphLength=graph.length;\n\t\t\tfor(var j=0;j<graphLength;j++) {\n\t\t\t\tvar line=graph[j];\n\t\t\t\tvar screen=false;\n\t\t\t\tvar lineLength=line.length;\n\t\t\t\tvar lastPos=null;\n\t\t\t\tfor(var k=0;k<lineLength;k++) {\n\t\t\t\t\tvar tg1=line[k];\n\t\t\t\t\tvar pos1=tg1 & MASK;\n\t\t\t\t\tvar index1=this.board[pos1];\n\t\t\t\t\tif(index1<0 && (!pType.epCatch || !this.epTarget || this.epTarget.p!=pos1)) {\n\t\t\t\t\t\tif((tg1 & FLAG_MOVE) && screen==false)\n\t\t\t\t\t\t\tPromotedMoves(piece,{\n\t\t\t\t\t\t\t\tf: piece.p,\n\t\t\t\t\t\t\t\tt: pos1,\n\t\t\t\t\t\t\t\tc: null,\n\t\t\t\t\t\t\t\ta: pType.abbrev,\n\t\t\t\t\t\t\t\tept: lastPos==null || !pType.epTarget?undefined:lastPos,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else if(tg1 & FLAG_SCREEN_CAPTURE) {\n\t\t\t\t\t\tif(screen) {\n\t\t\t\t\t\t\tvar piece1=this.pieces[index1];\n\t\t\t\t\t\t\tif(piece1.s!=piece.s)\n\t\t\t\t\t\t\t\tPromotedMoves(piece,{\n\t\t\t\t\t\t\t\t\tf: piece.p,\n\t\t\t\t\t\t\t\t\tt: pos1,\n\t\t\t\t\t\t\t\t\tc: piece1.i,\n\t\t\t\t\t\t\t\t\ta: pType.abbrev,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tscreen=true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar piece1;\n\t\t\t\t\t\tif(index1<0)\n\t\t\t\t\t\t\tpiece1=this.pieces[this.epTarget.i];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpiece1=this.pieces[index1];\n\t\t\t\t\t\tif(piece1.s!=piece.s && (tg1 & FLAG_CAPTURE))\n\t\t\t\t\t\t\tPromotedMoves(piece,{\n\t\t\t\t\t\t\t\tf: piece.p,\n\t\t\t\t\t\t\t\tt: pos1,\n\t\t\t\t\t\t\t\tc: piece1.i,\n\t\t\t\t\t\t\t\ta: pType.abbrev,\n\t\t\t\t\t\t\t\tep: index1<0,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlastPos=pos1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn moves;\n\t}\n\n\tModel.Board.GenerateMoves = function(aGame) {\n\t\tvar moves=this.cbGeneratePseudoLegalMoves(aGame);\n\t\tvar captMoves = [];\n\t\tvar nonCaptMoves = [];\n\t\tfor(var i=0; i<moves.length; i++) {\n\t\t\tvar move = moves[i];\n\t\t\tif(move.c!=null)\n\t\t\t\tcaptMoves.push(move);\n\t\t\telse\n\t\t\t\tnonCaptMoves.push(move);\n\t\t}\n\t\tif(captMoves.length>0)\n\t\t\tthis.mMoves = captMoves;\n\t\telse\n\t\t\tthis.mMoves = nonCaptMoves;\n\n\t\tif(this.mMoves.length==0) {\n\t\t\tthis.mFinished=true;\n\t\t\tthis.mWinner=this.mWho;\n\t\t}\n\t}\n\n})();"],"file":"losing-chess-model.js"}