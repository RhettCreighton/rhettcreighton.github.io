{"version":3,"names":[],"mappings":"","sources":["modern-model.js"],"sourcesContent":["/*\n * Copyright(c) 2013-2014 - jocly.com\n *\n * You are allowed to use and modify this source code as long as it is exclusively for use in the Jocly API. \n *\n * Original authors: Jocly team\n *\n */\n \n\n(function() {\n\t\n\tvar geometry = Model.Game.cbBoardGeometryGrid(9,9);\n\t\n\tModel.Game.cbDefine = function() {\n\t\t\n\t\treturn {\n\t\t\t\n\t\t\tgeometry: geometry,\n\t\t\t\n\t\t\tpieceTypes: {\n\n\t\t\t\t0: {\n\t\t\t\t\tname: 'pawn-w',\n\t\t\t\t\taspect: 'fr-pawn',\n\t\t\t\t\tgraph: this.cbPawnGraph(geometry,1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tepCatch: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t1: {\n\t\t\t\t\tname: 'ipawn-w',\n\t\t\t\t\taspect: 'fr-pawn',\n\t\t\t\t\tgraph: this.cbInitialPawnGraph(geometry,1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:1,p:9},{s:1,p:10},{s:1,p:11},{s:1,p:12},{s:1,p:13},{s:1,p:14},{s:1,p:15},{s:1,p:16},{s:1,p:17}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t2: {\n\t\t\t\t\tname: 'pawn-b',\n\t\t\t\t\taspect: 'fr-pawn',\n\t\t\t\t\tgraph: this.cbPawnGraph(geometry,-1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tepCatch: true,\n\t\t\t\t},\n\n\t\t\t\t3: {\n\t\t\t\t\tname: 'ipawn-b',\n\t\t\t\t\taspect: 'fr-pawn',\n\t\t\t\t\tgraph: this.cbInitialPawnGraph(geometry,-1),\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tabbrev: '',\n\t\t\t\t\tfenAbbrev: 'P',\n\t\t\t\t\tinitial: [{s:-1,p:63},{s:-1,p:64},{s:-1,p:65},{s:-1,p:66},{s:-1,p:67},{s:-1,p:68},{s:-1,p:69},{s:-1,p:70},{s:-1,p:71}],\n\t\t\t\t\tepTarget: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t4: {\n\t\t\t\t\tname: 'knight',\n\t\t\t\t\taspect: 'fr-knight',\n\t\t\t\t\tgraph: this.cbKnightGraph(geometry),\n\t\t\t\t\tvalue: 2.9,\n\t\t\t\t\tabbrev: 'N',\n\t\t\t\t\tinitial: [{s:1,p:1},{s:1,p:7},{s:-1,p:73},{s:-1,p:79}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t5: {\n\t\t\t\t\tname: 'bishop',\n\t\t\t\t\taspect: 'fr-bishop',\n\t\t\t\t\tgraph: this.cbBishopGraph(geometry),\n\t\t\t\t\tvalue: 3.1,\n\t\t\t\t\tabbrev: 'B',\n\t\t\t\t\tinitial: [{s:1,p:2},{s:1,p:6},{s:-1,p:74},{s:-1,p:78}],\n\t\t\t\t},\n\n\t\t\t\t6: {\n\t\t\t\t\tname: 'rook',\n\t\t\t\t\taspect: 'fr-rook',\n\t\t\t\t\tgraph: this.cbRookGraph(geometry),\n\t\t\t\t\tvalue: 5,\n\t\t\t\t\tabbrev: 'R',\n\t\t\t\t\tinitial: [{s:1,p:0},{s:1,p:8},{s:-1,p:72},{s:-1,p:80}],\n\t\t\t\t\tcastle: true,\n\t\t\t\t},\n\n\t\t\t\t7: {\n\t\t\t\t\tname: 'queen',\n\t\t\t\t\taspect: 'fr-queen',\n\t\t\t\t\tgraph: this.cbQueenGraph(geometry),\n\t\t\t\t\tvalue: 9,\n\t\t\t\t\tabbrev: 'Q',\n\t\t\t\t\tinitial: [{s:1,p:5},{s:-1,p:75}],\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t8: {\n\t\t\t\t\tname: 'king',\n\t\t\t\t\taspect: 'fr-king',\n\t\t\t\t\tisKing: true,\n\t\t\t\t\tgraph: this.cbKingGraph(geometry),\n\t\t\t\t\tabbrev: 'K',\n\t\t\t\t\tinitial: [{s:1,p:4},{s:-1,p:76}],\n\t\t\t\t},\n\t\t\t\t\t\t\t\t\n\t            10: {\n\t            \tname: 'minister',\n\t            \taspect: 'fr-cardinal',\n\t\t\t\t\tgraph: this.cbMergeGraphs(geometry,\n            \t\t\tthis.cbBishopGraph(geometry),\n\t\t\t\t\t\tthis.cbKnightGraph(geometry)),\n\t            \tvalue: 6,\n\t            \tabbrev: 'M',\n\t            \tinitial: [{s:1,p:3},{s:-1,p:77}],\n\t            },\t\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\tpromote: function(aGame,piece,move) {\n\t\t\t\tif(piece.t==1)\n\t\t\t\t\treturn [0];\n\t\t\t\telse if(piece.t==3)\n\t\t\t\t\treturn [2];\n\t\t\t\telse if(piece.t==0 && geometry.R(move.t)==8)\n\t\t\t\t\treturn [4,5,6,7,10];\n\t\t\t\telse if(piece.t==2 && geometry.R(move.t)==0)\n\t\t\t\t\treturn [4,5,6,7,10];\n\t\t\t\treturn [];\n\t\t\t},\n\t\t\tcastle: {\n\t\t\t\t\"4/0\": {k:[3,2],r:[1,2,3],n:\"O-O-O\"},\n\t\t\t\t\"4/8\": {k:[5,6],r:[7,6,5],n:\"O-O\"},\n\t\t\t\t\"76/72\": {k:[75,74],r:[73,74,75],n:\"O-O-O\"},\n\t\t\t\t\"76/80\": {k:[77,78],r:[79,78,77],n:\"O-O\"},\n\t\t\t},\n\t\t\t\n\t\t};\n\t}\n\n\tvar bishopPoss={ 2:[1,3], 6:[5,7], 74:[73,75], 78:[77,79] };\n\t\n\tvar SuperModelBoardGenerateMoves=Model.Board.GenerateMoves;\n\tModel.Board.GenerateMoves = function(aGame) {\n\t\tSuperModelBoardGenerateMoves.apply(this,arguments); // call regular GenerateMoves method\n\t\tif(!this.bishopSwap || !this.bishopSwap[this.mWho]) { // consider bishop swap rule\n\t\t\tfor(var pos in bishopPoss) {\n\t\t\t\tvar pieceIndex=this.board[pos];\n\t\t\t\tif(pieceIndex>=0) {\n\t\t\t\t\tvar piece=this.pieces[pieceIndex];\n\t\t\t\t\tif(piece.s==this.mWho && piece.m==false) { // piece of our side and not moved yet\n\t\t\t\t\t\tfor(var i=0;i<bishopPoss[pos].length;i++) {\n\t\t\t\t\t\t\tvar pos1=bishopPoss[pos][i];\n\t\t\t\t\t\t\tvar pieceIndex1=this.board[pos1];\n\t\t\t\t\t\t\tif(pieceIndex1>=0) {\n\t\t\t\t\t\t\t\tvar piece1=this.pieces[pieceIndex1];\n\t\t\t\t\t\t\t\tif(piece1.m==false) { // piece to swap bishop with has not moved yet\n\t\t\t\t\t\t\t\t\tthis.board[pos1]=pieceIndex;\n\t\t\t\t\t\t\t\t\tthis.board[pos]=pieceIndex1;\n\t\t\t\t\t\t\t\t\tthis.pieces[pieceIndex].p=pos;\n\t\t\t\t\t\t\t\t\tthis.pieces[pieceIndex1].p=pos1;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar oppInCheck=this.cbGetAttackers(aGame,this.kings[-this.mWho],-this.mWho,true).length>0;\n\t\t\t\t\t\t\t\t\tthis.board[pos]=pieceIndex;\n\t\t\t\t\t\t\t\t\tthis.board[pos1]=pieceIndex1;\n\t\t\t\t\t\t\t\t\tthis.pieces[pieceIndex1].p=pos1;\n\t\t\t\t\t\t\t\t\tthis.pieces[pieceIndex].p=pos;\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tthis.mMoves.push({\n\t\t\t\t\t\t\t\t\t\tf: piece.p,\n\t\t\t\t\t\t\t\t\t\tt: piece1.p,\n\t\t\t\t\t\t\t\t\t\tc: null,\n\t\t\t\t\t\t\t\t\t\tck: oppInCheck,\n\t\t\t\t\t\t\t\t\t\ta: 'B',\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar SuperModelBoardCopyFrom = Model.Board.CopyFrom;\n\tModel.Board.CopyFrom = function(aBoard) {\n\t\tSuperModelBoardCopyFrom.apply(this,arguments);\n\t\tif(aBoard.bishopSwap!==undefined)\n\t\t\tthis.bishopSwap = {\n\t\t\t\t\"1\": aBoard.bishopSwap[\"1\"],\n\t\t\t\t\"-1\": aBoard.bishopSwap[\"-1\"],\n\t\t\t}\n\t}\n\n\tvar SuperModelBoardApplyMove=Model.Board.ApplyMove;\n\tModel.Board.ApplyMove = function(aGame,move) {\n\t\tif(move.f in bishopPoss) {\n\t\t\tvar piece=this.pieces[this.board[move.f]];\n\t\t\tif(piece.m==false) {\n\t\t\t\tvar pieceIndex1=this.board[move.t];\n\t\t\t\tif(pieceIndex1>=0) {\n\t\t\t\t\tvar piece1=this.pieces[pieceIndex1];\n\t\t\t\t\tif(piece1.s==this.mWho && piece1.m==false) { // this is a bishop swap: special apply handler\n\t\t\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",piece.i,piece.p);\n\t\t\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",pieceIndex1,piece1.p);\n\t\t\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",piece.i,piece1.p);\n\t\t\t\t\t\tthis.zSign=aGame.zobrist.update(this.zSign,\"board\",pieceIndex1,piece.p);\n\t\t\t\t\t\tthis.board[move.f]=pieceIndex1;\n\t\t\t\t\t\tpiece1.p=move.f;\n\t\t\t\t\t\tthis.board[move.t]=piece.i;\n\t\t\t\t\t\tpiece.p=move.t;\n\t\t\t\t\t\tthis.check=!!move.ck;\n\t\t\t\t\t\tif(!this.bishopSwap)\n\t\t\t\t\t\t\tthis.bishopSwap={};\n\t\t\t\t\t\tthis.bishopSwap[this.mWho]=true; // make sure we don't swap twice\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSuperModelBoardApplyMove.apply(this,arguments);\n\t}\n\t\n})();"],"file":"modern-chess-model.js"}