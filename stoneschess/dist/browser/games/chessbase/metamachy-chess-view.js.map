{"version":3,"names":[],"mappings":"","sources":["metamachy-view.js"],"sourcesContent":["/*\n * Copyright(c) 2013-2014 - jocly.com\n *\n * You are allowed to use and modify this source code as long as it is exclusively for use in the Jocly API. \n *\n * Original authors: Jocly team\n *\n */\n \n\n(function() {\n\t\n\tView.Game.cbDefineView = function() {\n\n\t\tvar metamachyBoardDelta = {\n\t\t\t//notationMode: 'in',\n\t\t\t//notationDebug: true,\n\t\t};\t\t\n\t\tvar metamachyBoard3d = $.extend(true,{},this.cbGridBoardClassic3DMargin,metamachyBoardDelta);\n\t\tvar metamachyBoard2d = $.extend(true,{},this.cbGridBoardClassic2DNoMargin,metamachyBoardDelta);\n\t\t\n\t\treturn {\n\t\t\tcoords: {\n\t\t\t\t\"2d\": this.cbGridBoard.coordsFn.call(this,metamachyBoard2d),\n\t\t\t\t\"3d\": this.cbGridBoard.coordsFn.call(this,metamachyBoard3d),\n\t\t\t},\n\t\t\tboardLayout: [\n\t      \t\".#.#.#.#.#.#\",\n\t     \t\t\"#.#.#.#.#.#.\",\n\t      \t\".#.#.#.#.#.#\",\n\t     \t\t\"#.#.#.#.#.#.\",\n\t      \t\".#.#.#.#.#.#\",\n\t     \t\t\"#.#.#.#.#.#.\",\n\t      \t\".#.#.#.#.#.#\",\n\t     \t\t\"#.#.#.#.#.#.\",\n\t      \t\".#.#.#.#.#.#\",\n\t     \t\t\"#.#.#.#.#.#.\",\n\t\t\t\".#.#.#.#.#.#\",\n\t     \t\t\"#.#.#.#.#.#.\",\n\t\t\t],\n\t\t\tboard: {\n\t\t\t\t\"2d\": {\n\t\t\t\t\tdraw: this.cbDrawBoardFn(metamachyBoard2d),\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\"3d\": {\n\t\t\t\t\tdisplay: this.cbDisplayBoardFn(metamachyBoard3d),\t\t\t\t\t\n\t\t\t\t},\n\t\t\t},\n\t\t\tclicker: {\n\t\t\t\t\"2d\": {\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t},\n\t\t\t\t\"3d\": {\n\t\t\t\t\tscale: [.6,.6,.6],\n\t\t\t\t},\n\t\t\t},\n\t\t\tpieces: this.cbFairyPieceStyle({\n\t\t\t\t\"default\": {\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tscale: [.4,.4,.4],\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\twidth: 900,\n\t\t\t\t\t\theight: 900,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\t}\n\n\t/* \n\t * Make the knight & the camel jump when moving, the elephant & the lion when moving 2 squares, the cannon when capturing \n\t */\n\tView.Board.cbMoveMidZ = function(aGame,aMove,zFrom,zTo) {\n\t\tif(aMove.a=='N' || aMove.a=='M' || (aMove.a=='E' && aGame.g.distGraph[aMove.f][aMove.t]==2) || (aMove.a=='L' && aGame.g.distGraph[aMove.f][aMove.t]==2) || (aMove.a=='K' && aGame.g.distGraph[aMove.f][aMove.t]==2) || (aMove.a=='C' && aMove.c!=null))\n\t\t\treturn Math.max(zFrom,zTo)+1500;\n\t\telse\n\t\t\treturn (zFrom+zTo)/2;\n\t}\n\n\t/*\n\t * View.Game.xdInit overriding to create initial setup gadgets \n\t */\n\tvar SuperViewGameXdInit = View.Game.xdInit;\n\tView.Game.xdInit = function(xdv) {\n\t\tvar $this=this;\n\t\tSuperViewGameXdInit.apply(this,arguments);\n\t\tvar size=600;\n\t\txdv.createGadget(\"setup-board\",{\n\t\t\tbase: {\n\t\t\t\ttype: \"element\",\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: size*12,\n\t\t\t\theight: size*9,\n\t\t\t\tz: 108,\n\t\t\t\tcss: {\n\t\t\t\t\t\"background-color\": \"White\",\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\tvar setups={\n\t\t\t0: \"KQEL\",\n\t\t\t1: \"KQLE\",\n\t\t\t2: \"KEQL\",\n\t\t\t3: \"KLQE\",\n\t\t\t4: \"KELQ\",\n\t\t\t5: \"KLEQ\",\n\t\t\t6: \"QEKL\",\n\t\t\t7: \"QLKE\",\n\t\t\t8: \"EQKL\",\n\t\t\t9: \"LQKE\",\n\t\t\t10: \"ELKQ\",\n\t\t\t11: \"LEKQ\",\n\t\t}\n\t\tvar imageOffsets={\n\t\t\tK: 500, Q: 400, E: 1100, L: 1200,\n\t\t}\n\t\tfor(var setup in setups) {\n\t\t\t(function(setup) {\n\t\t\t\tvar x=((setup%4)-1.5)*3*size;\n\t\t\t\tvar y=(Math.floor(setup/4)-1)*3*size;\n\t\t\t\txdv.createGadget(\"setup#\"+setup,{\n\t\t\t\t\tbase: {\n\t\t\t\t\t\ttype: \"canvas\",\n\t\t\t\t\t\tx: x,\n\t\t\t\t\t\ty: y,\n\t\t\t\t\t\twidth: 2*size,\n\t\t\t\t\t\theight: 2*size,\n\t\t\t\t\t\tz: 109,\n\t\t\t\t\t\tdraw: function(ctx) {\n\t\t\t\t\t\t\tctx.fillStyle=\"#c0c0c0\";\n\t\t\t\t\t\t\tctx.rect(-size,-size,size*2,size*2);\n\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\t\tthis.getResource(\"image|\"+$this.g.fullPath+\"/res/fairy/wikipedia-fairy-sprites.png\",function(image) {\n\t\t\t\t\t\t\t\tfor(var i=0;i<4;i++) {\n\t\t\t\t\t\t\t\t\tvar x=i%2, y=Math.floor(i/2), p=setups[setup].charAt(i);\n\t\t\t\t\t\t\t\t\tctx.drawImage(image,imageOffsets[p],0,100,100,(x-1)*size,(y-1)*size,size,size);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t\t})(setup);\n\t\t}\n\t}\n\t\n\t/*\n\t * View.Board.xdInput overriding to handle setup phase\n\t */\n\tvar SuperViewBoardxdInput = View.Board.xdInput;\n\tView.Board.xdInput = function(xdv, aGame) {\n\t\tif(this.setupState===undefined) {\n\t\t\treturn {\n\t\t\t\tinitial: {},\n\t\t\t\tgetActions: function(moves,currentInput) { return null; },\n\t\t\t}\n\t\t} else if(this.setupState==\"setup\") {\n\t\t\treturn {\n\t\t\t\tinitial: {\n\t\t\t\t\tsetupDone: false,\n\t\t\t\t},\n\t\t\t\tgetActions: function(moves,currentInput) { \n\t\t\t\t\tvar actions={};\n\t\t\t\t\tif(!currentInput.setupDone) {\n\t\t\t\t\t\tmoves.forEach(function(move) {\n\t\t\t\t\t\t\tactions[move.setup]={\n\t\t\t\t\t\t\t\tview: [\"setup#\"+move.setup],\n\t\t\t\t\t\t\t\tclick: [\"setup#\"+move.setup],\n\t\t\t\t\t\t\t\tmoves: [move],\n\t\t\t\t\t\t\t\tvalidate: { setupDone: true },\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn actions;\n\t\t\t\t},\n\t\t\t\tfurnitures: [\"setup-board\"],\n\t\t\t}\n\t\t} else\n\t\t\treturn SuperViewBoardxdInput.apply(this,arguments);\n\t}\n\t\n\t/*\n\t * View.Board.cbAnimate overriding to prevent animation on setup\n\t */\n\tvar SuperViewBoardcbAnimate = View.Board.cbAnimate;\n\tView.Board.cbAnimate = function(xdv,aGame,aMove,callback) {\n\t\tif(this.setupState===undefined || this.setupState==\"setup\")\n\t\t\tcallback();\n\t\telse\n\t\t\tSuperViewBoardcbAnimate.apply(this,arguments);\n\t}\n\t\n\t/*\n\t * View.Board.xdDisplay overriding to prevent displaying KQEL before setup\n\t */\n\tvar SuperViewBoardxdDisplay = View.Board.xdDisplay;\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\tif(this.setupState===undefined || this.setupState==\"setup\") {\n\t\t\tvar $this=this;\n\t\t\tvar hidden={};\n\t\t\t[5,6,17,18,125,126,137,138].forEach(function(pos) {\n\t\t\t\tvar pIndex=$this.board[pos];\n\t\t\t\thidden[pos]=pIndex;\n\t\t\t\t$this.pieces[pIndex].p=-1;\n\t\t\t});\n\t\t\tSuperViewBoardxdDisplay.apply(this,arguments);\n\t\t\tfor(var pos in hidden)\n\t\t\t\tthis.pieces[hidden[pos]].p=parseInt(pos);\t\t\t\n\t\t} else\n\t\t\tSuperViewBoardxdDisplay.apply(this,arguments);\n\t}\n\t\n})();\n\n"],"file":"metamachy-chess-view.js"}