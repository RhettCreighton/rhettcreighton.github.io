{"version":3,"names":[],"mappings":"","sources":["wild-tamerlane-model.js"],"sourcesContent":["/*\n * Copyright(c) 2013-2014 - jocly.com\n *\n * You are allowed to use and modify this source code as long as it is exclusively for use in the Jocly API. \n *\n * Original authors: Jocly team\n *\n */\n(function() {\t\n\t\n\tvar firstRow=0;\n\tvar lastRow=10;\t\n\tvar firstCol=0;\n\tvar lastCol=10;\t\n\t\n\tvar geometry = Model.Game.cbBoardGeometryGrid(11,11);\n\t\n\t// graphs\n\t\n\t\n\tModel.Game.cbEagleGraph = function(geometry){\n\t\tvar $this=this;\n\n\t\tvar flags = $this.cbConstants.FLAG_MOVE | $this.cbConstants.FLAG_CAPTURE;\n\t\tvar graph={};\n\t\tfor(var pos=0;pos<geometry.boardSize;pos++) {\n\t\t\tgraph[pos]=[];\n\t\t\t[[-1,-1],[-1,1],[1,-1],[1,1]].forEach(function(delta) { // loop on all 4 diagonals\n\t\t\t\tvar pos1=geometry.Graph(pos,delta);\n\t\t\t\tif(pos1!=null) {\n\t\t\t\t\tfor(var dir=0;dir<2;dir++) { // dir=0 for row, dir=1 for column\n\t\t\t\t\t\tvar nbMax = (dir==0) ? lastRow : lastCol; \n\t\t\t\t\t\tvar away=[] // hold the sliding line\n\t\t\t\t\t\tfor(var n=1;n<nbMax;n++) { \n\t\t\t\t\t\t\tvar delta2=[];\n\t\t\t\t\t\t\tdelta2[dir]=delta[dir]*n;\n\t\t\t\t\t\t\tdelta2[1-dir]=0; // delta2 is now only about moving orthogonally, away from the piece\n\t\t\t\t\t\t\tvar pos2=geometry.Graph(pos1,delta2);\n\t\t\t\t\t\t\tif(pos2!=null) {\n\t\t\t\t\t\t\t\tif(n==1) // possible to slide at least 1 cell, make sure the diagonal cell is not occupied, but cannot move to this cell\n\t\t\t\t\t\t\t\t\taway.push(pos1 | $this.cbConstants.FLAG_STOP);\n\t\t\t\t\t\t\t\taway.push(pos2 | flags);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(away.length>0)\n\t\t\t\t\t\t\tgraph[pos].push($this.cbTypedArray(away));\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\t\n\t\t\t});\n\t\t}\n\t\treturn $this.cbMergeGraphs(geometry,\n\t\t   $this.cbShortRangeGraph(geometry,[[-1,-1],[-1,1],[1,-1],[1,1]]),\n\t\t   graph\n\t\t);\n\t}\n\t\t\n\t\n\tvar confine = {};\n \n\tfor(var pos=0;pos<geometry.boardSize;pos++) {\n\t\tconfine[pos]=1;\n\t}\n\t\n\tModel.Game.cbDefine = function() {\n\t\t\n\t\t// classic chess pieces\n\t\t\n\t\tvar piecesTypes = {\n                    \n                        \n            0: {\n            name : 'ipawnw',\n            abbrev : '',\n            fenAbbrev : 'P',\n            aspect : 'fr-pawn',\n            graph : this.cbInitialPawnGraph(geometry,1,confine),\n            value : 0.6,\n            initial: [{s:1,p:22},{s:1,p:23},{s:1,p:24},{s:1,p:25},{s:1,p:26},{s:1,p:27},{s:1,p:28},{s:1,p:29},{s:1,p:30},{s:1,p:31},{s:1,p:32}],\n            epTarget : true,\n            },\n\n            1: {\n            name : 'ipawnb',\n            abbrev : '',\n            fenAbbrev : 'P',\n            aspect : 'fr-pawn',\n            graph : this.cbInitialPawnGraph(geometry,-1,confine),\n            value : 0.6,\n            initial: [{s:-1,p:88},{s:-1,p:89},{s:-1,p:90},{s:-1,p:91},{s:-1,p:92},{s:-1,p:93},{s:-1,p:94},{s:-1,p:95},{s:-1,p:96},{s:-1,p:97},{s:-1,p:98}],\n            epTarget : true,\n            },\n\n            2: {\n            name : 'pawnw',\n            abbrev : '',\n            fenAbbrev : 'P',\n            aspect : 'fr-pawn',\n            graph : this.cbPawnGraph(geometry,1,confine),\n            value : 0.6,\n            initial: [],\n            epCatch : true,\n            },\n\n            3: {\n            name : 'pawnb',\n            abbrev : '',\n            fenAbbrev : 'P',\n            aspect : 'fr-pawn',\n            graph : this.cbPawnGraph(geometry,-1,confine),\n            value : 0.6,\n            initial: [],\n            epCatch : true,\n            },\n\n            4: {\n            name : 'rook',\n            abbrev : 'R',\n            aspect : 'fr-rook',\n            graph : this.cbRookGraph(geometry,confine),\n            value : 5,\n            initial: [{s:1,p:11},{s:1,p:21},{s:-1,p:99},{s:-1,p:109}],\n            },\n\n            5: {\n            name : 'bishop',\n            abbrev : 'B',\n            aspect : 'fr-bishop',\n            graph : this.cbBishopGraph(geometry,confine),\n            value : 3.4,\n            initial: [{s:1,p:13},{s:1,p:19},{s:-1,p:101},{s:-1,p:107}],\n            },\n\n            6: {\n            name : 'knight',\n            abbrev : 'N',\n            aspect : 'fr-knight',\n            graph : this.cbKnightGraph(geometry,confine),\n            value : 2.5,\n            initial: [{s:1,p:12},{s:1,p:20},{s:-1,p:100},{s:-1,p:108}],\n            },\n\n            7: {\n            name : 'queen',\n            abbrev : 'Q',\n            aspect : 'fr-queen',\n            graph : this.cbQueenGraph(geometry,confine),\n            value : 8.2,\n            initial: [{s:1,p:15},{s:1,p:17},{s:-1,p:103},{s:-1,p:105}],\n            },\n\n            8: {\n            name : 'king',\n            abbrev : 'K',\n            aspect : 'fr-king',\n            graph : this.cbKingGraph(geometry,confine),\n            isKing : true,\n            initial: [{s:1,p:16},{s:-1,p:104}],\n            },\n\n            9: {\n            name : 'elephant',\n            abbrev : 'E',\n            aspect : 'fr-elephant',\n            graph : this.cbShortRangeGraph(geometry,[[-1,-1],[-1,1],[1,-1],[1,1],[-2,-2],[-2,2],[2,-2],[2,2]],confine),\n            value : 2.5,\n            initial: [{s:1,p:0},{s:1,p:10},{s:-1,p:110},{s:-1,p:120}],\n            },\n\n            10: {\n            name : 'cannon',\n            abbrev : 'C',\n            aspect : 'fr-cannon2',\n            graph : this.cbXQCannonGraph(geometry),\n            value : 4.9,\n            initial: [{s:1,p:4},{s:1,p:6},{s:-1,p:114},{s:-1,p:116}],\n            },\n\n            11: {\n            name : 'gryphon',\n            abbrev : 'G',\n            aspect : 'fr-eagle',\n            graph : this.cbEagleGraph(geometry),\n            value : 7.7,\n            initial: [{s:1,p:14},{s:1,p:18},{s:-1,p:102},{s:-1,p:106}],\n            },\n\n            12: {\n            name : 'camel',\n            abbrev : 'J',\n            aspect : 'fr-camel',\n            graph : this.cbShortRangeGraph(geometry,[[-3,-1],[-3,1],[3,-1],[3,1],[1,3],[1,-3],[-1,3],[-1,-3]]),\n            value : 2.2,\n            initial: [{s:1,p:2},{s:1,p:8},{s:-1,p:112},{s:-1,p:118}],\n            },\n\t\t\t\t\t\n\t\t}\n\t\t\n\t\t// defining types for readable promo cases\n\t\tvar T_ipawnw=0\n        var T_ipawnb=1\n        var T_pawnw=2\n        var T_pawnb=3\n        var T_rook=4\n        var T_bishop=5\n        var T_knight=6\n        var T_queen=7\n        var T_king=8\n        var T_elephant=9\n        var T_cannon=10\n        var T_gryphon=11\n        var T_camel=12\n\n\t\treturn {\n\t\t\t\n\t\t\tgeometry: geometry,\n\t\t\t\n\t\t\tpieceTypes: piecesTypes,\n\n\t\t\tpromote: function(aGame,piece,move) {\n\t\t\t\t// initial pawns promote to pawn\n\t\t\t\tif (piece.t==T_ipawnw)\n\t\t\t\t\treturn [T_pawnw];\n\t\t\t\tif (piece.t==T_ipawnb)\n\t\t\t\t\treturn [T_pawnb];\n\t\t\t\t// pawns promote to Queen\n\t\t\t\tif( ((piece.t==T_pawnw) && geometry.R(move.t)==lastRow) || ((piece.t==T_pawnb) && geometry.R(move.t)==firstRow)) \n\t\t\t\t\treturn [T_gryphon,T_queen];\n\t\t\t\treturn [];\n\t\t\t},\t\t\t\n\t\t};\n\t}\n\t\n})();\n"],"file":"wild-tamerlane-chess-model.js"}