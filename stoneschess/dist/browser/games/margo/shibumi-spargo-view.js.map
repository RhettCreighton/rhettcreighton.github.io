{"version":3,"names":[],"mappings":"","sources":["spbase-xd-view.js"],"sourcesContent":["/*\n *\n * Copyright (c) 2013 - Jocly - www.jocly.com\n * \n * This file is part of the Jocly game platform and cannot be used outside of this context without the written permission of Jocly.\n * \n */\n\n(function() {\n\n\tvar SIZE,RADIUS,fullPath;\n\tvar CLASSIC_WHITE = 0xbbaa99;\n\tvar CLASSIC_BLACK = 0x222222;\n\tvar colors=[\"\",\"white\",\"black\",\"red\"];\n\tvar reflexivities=[0,0.1,0.9,0.7];\n\t//var reflexivities=[0,0,1,1];\n\tvar sphereGeometry, textureCube;\n\t\n\tView.Game.xdInitExtra = function(xdv) {\n\t}\n\n\tView.Game.xdPreInit = function(xdv) {\n\t}\n\n\tView.Game.xdInit = function(xdv) {\n\t\t\t\t\n\t\tfullPath=this.mViewOptions.fullPath;\n\t\tif(typeof THREE!=\"undefined\") {\n\t\t\tsphereGeometry = new THREE.SphereGeometry(1,32,16);\n\t\t\tvar path = fullPath+\"/res/xd-view/meshes/skybox/\";\n\t\t\tvar format = '.jpg';\n\t\t\tvar urls = [\n\t\t\t\tpath + 'px' + format, path + 'nx' + format,\n\t\t\t\tpath + 'py' + format, path + 'ny' + format,\n\t\t\t\tpath + 'pz' + format, path + 'nz' + format\n\t\t\t];\n\t\t\ttextureCube = new THREE.CubeTextureLoader().load( urls );\n\t\t}\n\n\t\tthis.xdPreInit();\n\t\t\n\n\t\tSIZE = this.mOptions.size;\n\t\tRADIUS = Math.round(5800/SIZE);\n\t\t\n\t\txdv.createGadget(\"lightside\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar backlight = new THREE.PointLight( 0xaaaaff, 1, 30 );\n\t\t\t\t\treturn backlight;\n\t\t\t\t},\n\t\t\t\tz: 10000,\n\t\t\t\tx: 10000,\n\t\t\t\tcastShadow: false,\n\t\t\t}\n\t\t});\n\t\txdv.createGadget(\"lightback\", {\n\t\t\t\"3d\": {\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar backlight = new THREE.PointLight( 0xaaccff, 1, 30 );\n\t\t\t\t\treturn backlight;\n\t\t\t\t},\n\t\t\t\tz: -10000,\n\t\t\t\t//y: -4000,\n\t\t\t\tcastShadow: false,\n\t\t\t}\n\t\t});\n\t\t\n\t\txdv.createGadget(\"skyball\", {\n\t\t\t\"classic3d\" : {\n\t\t\t\tharbor: false,\n\t\t\t\ttype : \"custommesh3d\",\t\t\n\t\t\t\trotate: 135,\n\t\t\t\trotateX: -60,\n\t\t\t\tcreate: function() {\n\t\t\t\t\t\n\t\t\t\t\tvar graphGeometry = new THREE.SphereGeometry( 40 , 50, 50 );\n\t\t\t\t\tvar material = new THREE.MeshBasicMaterial( { \n\t\t\t\t        color: 0x00ff00, \n\t\t\t\t        wireframe: false,\n\t\t\t\t        side: THREE.DoubleSide\n\t\t\t\t    } );\n\t\t\t\t    //var modifier = new THREE.SubdivisionModifier( 2 );\n\t\t\t\t\t//modifier.modify( graphGeometry );\n\t\t\t\t\t\n\t\t\t\t\t///////////////////////////////////////////////\n\t\t\t\t\t// calculate vertex colors based on Z values //\n\t\t\t\t\t///////////////////////////////////////////////\n\t\t\t\t\tgraphGeometry.computeBoundingBox();\n\t\t\t\t\tzMin = graphGeometry.boundingBox.min.z;\n\t\t\t\t\tzMax = graphGeometry.boundingBox.max.z;\n\t\t\t\t\tzRange = zMax - zMin;\n\t\t\t\t\tvar color, point, face, numberOfSides, vertexIndex;\n\t\t\t\t\t// faces are indexed using characters\n\t\t\t\t\tvar faceIndices = [ 'a', 'b', 'c', 'd' ];\n\t\t\t\t\t// first, assign colors to vertices as desired\n\t\t\t\t\tfor ( var i = 0; i < graphGeometry.vertices.length; i++ ) \n\t\t\t\t\t{\n\t\t\t\t\t\tpoint = graphGeometry.vertices[ i ];\n\t\t\t\t\t\tcolor = new THREE.Color( 0x000000 );\n\t\t\t\t\t\t//color.setHSL( 0.7 * (zMax - point.z) / zRange, 1, 0.5 );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*var delta=(zMax - point.z)/zRange;\n\t\t\t\t\t\tcolor.b = 1+delta;\n\t\t\t\t\t\tcolor.g = 0.5+0.3*delta;\n\t\t\t\t\t\tcolor.r = 0.2*delta;*/\n\n\t\t\t\t\t\tvar delta=(zMax - point.z)/zRange;\n\t\t\t\t\t\tcolor.b = 1+delta;\n\t\t\t\t\t\tcolor.g = 0.5+0.4*delta;\n\t\t\t\t\t\tcolor.r = 0.3*delta;\n\n\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tgraphGeometry.colors[i] = color; // use this array for convenience\n\t\t\t\t\t}\n\t\t\t\t\t// copy the colors as necessary to the face's vertexColors array.\n\t\t\t\t\tfor ( var i = 0; i < graphGeometry.faces.length; i++ ) \n\t\t\t\t\t{\n\t\t\t\t\t\tface = graphGeometry.faces[ i ];\n\t\t\t\t\t\tnumberOfSides = ( face instanceof THREE.Face3 ) ? 3 : 4;\n\t\t\t\t\t\tfor( var j = 0; j < numberOfSides; j++ ) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvertexIndex = face[ faceIndices[ j ] ];\n\t\t\t\t\t\t\tface.vertexColors[ j ] = graphGeometry.colors[ vertexIndex ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t///////////////////////\n\t\t\t\t\t// end vertex colors //\n\t\t\t\t\t///////////////////////\n\t\t\t\t\t// \"wireframe texture\"\n\n\t\t\t\t\tvar $this=this;\n\n\t\t\t\t\tvar textureLoader = new THREE.TextureLoader();\n\t\t\t\t\ttextureLoader.setCrossOrigin(\"anonymous\");\n\t\t\t\t\ttextureLoader.load(fullPath + \"/res/xd-view/meshes/square.png\",\n\t\t\t\t\t\tfunction(wireTexture){\n\t\t\t\t\t\t\twireTexture.wrapS = wireTexture.wrapT = THREE.RepeatWrapping; \n\t\t\t\t\t\t\twireTexture.repeat.set( 40, 40 );\n\t\t\t\t\t\t\tvar wireMaterial = new THREE.MeshBasicMaterial( { map: wireTexture, vertexColors: THREE.VertexColors, side:THREE.DoubleSide } );\n\t\n\t\t\t\t\t\t\twireMaterial.map.repeat.set( 20, 60 );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar mesh = new THREE.Mesh( graphGeometry , wireMaterial );\n\t\t\t\t\t\t\tmesh.doubleSided = true;\n\t\t\t\t\t\t\t$this.objectReady(mesh);\n\t\t\t\t\t\t},\t\t\t\n\t\t\t\t\t\t// Function called when download progresses\n\t\t\t\t\t\tfunction ( xhr ) {\n\t\t\t\t\t\t\t//console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// Function called when download errors\n\t\t\t\t\t\tfunction ( xhr ) {\n\t\t\t\t\t\t\tconsole.log( \"error loading texture\" );\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t\topacity:1,\n\t\t\t},\n\t\t});\n\n\t\tfunction createScreen(videoTexture) {\n\t\t\tvar $this=this;\n\t\t\tvar smooth=0;\n\t\t\tthis.getResource(\"smoothedfilegeo|\"+smooth+\"|\"+fullPath+\"/res/xd-view/meshes/flatscreen.js\",function(geometry , materials) {\n \t\t\t\tvar materials0=[];\n \t\t\t\t\n \t\t\t\tfor(var i=0;i<materials.length;i++){\n                    if (materials[i].name==\"screen\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n \t\t\t\t\t\tmat.map=videoTexture;\n \t\t\t\t\t\tmat.overdraw = true;\n \t\t\t\t\t\t//mat.side = THREE.DoubleSide;\n \t\t\t\t\t\tmaterials0.push(mat);\n                    }else if (materials[i].name==\"boomer\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n\t \t\t\t\t\tmat.shading=THREE.FlatShading;\n\t \t\t\t\t\tmaterials0.push(mat);\n                    }else if (materials[i].name==\"tv\"){\n\t \t\t\t\t\tvar mat=materials[i].clone();\n\t \t\t\t\t\tmat.shading=THREE.FlatShading;\n\t \t\t\t\t\tmaterials0.push(mat);\n \t\t\t\t\t}else{\n \t\t\t\t\t\tmaterials0.push(materials[i]);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tvar mesh = new THREE.Mesh( geometry , new THREE.MultiMaterial( materials0 ) );\n \t\t\t\t\n \t\t\t\tmesh.visible = false;\n \t\t\t\t$this.objectReady(mesh);\n\t\t\t});\n\t\t\treturn null;\n\t\t};\n\t\txdv.createGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\tcreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\tcreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t\n\n\t\t/*\n\t\tfor(var pos=0; pos<this.g.Coord.length;pos++) {\n\t\t\t(function(pos) {\n\t\t\t\txdv.createGadget(\"text#\"+pos, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\twidth : SIZE*.2,\n\t\t\t\t\t\theight : SIZE*.2,\n\t\t\t\t\t\tinitialClasses: \"notation\",\n\t\t\t\t\t\tcss : {\n\t\t\t\t\t\t\t\"text-align\" : \"center\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tz : 4,\n\t\t\t\t\t\tdisplay : function(element, width, height) {\n\t\t\t\t\t\t\telement.css({\n\t\t\t\t\t\t\t\t\"font-size\" : (height * .6) + \"pt\",\n\t\t\t\t\t\t\t\t\"line-height\" : (height * 1) + \"px\",\n\t\t\t\t\t\t\t}).text(pos+1);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\tz: -SIZE*.05,\n\t\t\t\t\t\trotateX: -90,\n\t\t\t\t\t\tcreate: function() {\n\t\t\t\t\t\t\tvar gg=new THREE.TextGeometry(\"\"+(pos+1),{\n\t\t\t\t\t\t\t\tsize: 0.2,\n\t\t\t\t\t\t\t\theight: 0.05,\n\t\t\t\t\t\t\t\tcurveSegments: 6,\n\t\t\t\t\t\t\t\tfont: \"helvetiker\",\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tvar gm=new THREE.MeshBasicMaterial();\n\t\t\t\t\t\t\tvar mesh= new THREE.Mesh( gg , gm );\n\t\t\t\t\t\t\treturn mesh;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\t//var sphereMaterial = new THREE.MeshPhongMaterial( { color: 0xff0000 } );\n\t\t\t})(pos);\n\t\t}\n\t\t*/\n\n\t\txdv.createGadget(\"board\", {\n\t\t\t\"wood\" : {\n\t\t\t\ttype : \"image\",\n\t\t\t\tfile: fullPath + \"/res/images/wood.png\",\n\t\t\t\tz: 0,\n\t\t\t},\n\t\t});\n\t\t\n\t\tthis.xdInitExtra(xdv);\n\t\t\n\t}\n\t\n\tvar gadgetIds={};\n\n\tView.Game.isGadgetId = function(nid,type) {\n\t\treturn gadgetIds[type+\"#\"+nid]!==undefined;\n\t}\n\n\tView.Game.spGadgetId = function(xdv,nid,type) {\n\t\tvar id=type+\"#\"+nid;\n\t\tif(gadgetIds[id]===undefined) {\n\t\t\tgadgetIds[id]=true;\n\t\t\tvar scaleFactor=RADIUS*.001*1.01;\n\t\t\tvar transparent=false;\n\t\t\tvar opacity=1;\n\t\t\tvar makeSphere=true;\n\t\t\tvar color2d=\"red\", z2d=1, file2d=null;\n\t\t\tvar scaleFactorWood=null;\n\t\t\tswitch(type) {\n\t\t\tcase \"piece\":\n\t\t\t\ttransparent=true;\n\t\t\t\tz2d=4;\n\t\t\t\tbreak;\n\t\t\tcase \"cell\":\n\t\t\t\tscaleFactor=RADIUS*.001*.5;\n\t\t\t\ttransparent=true;\n\t\t\t\topacity=.5;\n\t\t\t\tcolor2d=\"green\";\n\t\t\t\tz2d=2;\n\t\t\t\tbreak;\n\t\t\tcase \"plot\":\n\t\t\t\tscaleFactor=RADIUS*.001*.2;\n\t\t\t\ttransparent=true;\n\t\t\t\topacity=.7;\n\t\t\t\tcolor2d=\"blue\";\n\t\t\t\tfile2d=\"plot\";\n\t\t\t\tscaleFactorWood=RADIUS*.001*.6;\n\t\t\t\tbreak;\n\t\t\tcase \"text\":\n\t\t\t\tmakeSphere=false;\n\t\t\t\txdv.createGadget(\"text#\"+nid, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\twidth : RADIUS*.2,\n\t\t\t\t\t\theight : RADIUS*.2,\n\t\t\t\t\t\tinitialClasses: \"notation\",\n\t\t\t\t\t\tcss : {\n\t\t\t\t\t\t\t\"color\": \"#808080\",\n\t\t\t\t\t\t\t\"text-align\" : \"center\",\n\t\t\t\t\t\t\t\"font-weight\" : \"bold\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tz : 2,\n\t\t\t\t\t\tdisplay : function(element, width, height) {\n\t\t\t\t\t\t\telement.css({\n\t\t\t\t\t\t\t\t\"font-size\" : (height * 1) + \"pt\",\n\t\t\t\t\t\t\t\t\"line-height\" : (height * 1) + \"px\",\n\t\t\t\t\t\t\t}).text(nid/*pos+1*/);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\tz: 0,\n\t\t\t\t\t\tcreate: function() {\n                            var $this = this;\n                            this.getResource('font|'+fullPath+\n                                '/res/xd-view/fonts/helvetiker_regular.typeface.json',\n                                function(font) {\n                                    var gg=new THREE.TextGeometry(\"\"+(nid+/*1*/0),{\n                                        size: RADIUS*$this.SCALE3D*.3,\n                                        height: 0.05,\n                                        curveSegments: 6,\n                                        font: font,\n                                    });\n                                    var gm=new THREE.MeshPhongMaterial({\n                                        //ambient: 0xff0000,\n\n                                    });\n                                    var mesh= new THREE.Mesh( gg , gm );\n                                    $this.objectReady(mesh);                        \n                                });\n                            return null;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t}\n\t\t\tif(makeSphere)\n\t\t\t\txdv.createGadget(type+\"#\"+nid, {\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\ttype : \"image\",\n\t\t\t\t\t\tfile: fullPath + \"/res/images/\"+(file2d?file2d:\"ball_\"+color2d)+\".png\",\n\t\t\t\t\t\tinitialClasses: \"xd-choice\",\n\t\t\t\t\t\twidth: RADIUS*2*scaleFactor,\n\t\t\t\t\t\theight: RADIUS*2*scaleFactor,\n\t\t\t\t\t\tz: z2d,\n\t\t\t\t\t\topacity: opacity,\n\t\t\t\t\t\tclasses: \"sp-disk\",\n\t\t\t\t\t},\n\t\t\t\t\t\"wood\": {\n\t\t\t\t\t\twidth: RADIUS*2*(scaleFactorWood?scaleFactorWood:scaleFactor),\n\t\t\t\t\t\theight: RADIUS*2*(scaleFactorWood?scaleFactorWood:scaleFactor),\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\tscale: [scaleFactor,scaleFactor,scaleFactor],\n\t\t\t\t\t\t//opacity: opacity,\n\t\t\t\t\t\tcreate: function() {\n\t                        \n\t                        var shininess = 500, specular = 0xffffff, shading = THREE.SmoothShading;\n\t                        var sphereMaterial = new THREE.MeshPhongMaterial( {\n\t                                //map: imgTexture,\n\t                        \t\tname: \"ball\",\n\t                                //color: 0xffffff,\n\t                                //ambient: 0x000000,\n\t                                specular: specular,\n\t                                shininess: shininess,\n\t                                shading: shading,\n\t                                opacity: opacity,\n\t                                transparent: transparent,\n\t                                envMap: textureCube,\n\t                                reflectivity: 0.2,\n\t                                combine: THREE.MixOperation, \n\t                                //combine: THREE.AddOperation, \n\t                           \t    //combine: THREE.MultiplyOperation,\n\t                        } );\n\t                        var geometry=sphereGeometry.clone();\n\t                        for(var i=0;i<geometry.faces.length;i++) {\n\t                        \tgeometry.faces[i].materialIndex=0;\n\t                        }\n\t                        var sphere = new THREE.Mesh(geometry,new THREE.MultiMaterial( [sphereMaterial] ));\n\t                        return sphere;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t}\n\t\treturn id;\n\t}\n\t\n\tView.Game.xdBuildScene = function(xdv) {\n\t\tvar $this=this;\n\n\t\txdv.updateGadget(\"board\",{\n\t\t\t\"wood\": {\n\t\t\t\tvisible: true,\n\t\t\t\twidth: RADIUS*2*(SIZE+.3),\n\t\t\t\theight: RADIUS*2*(SIZE+.3),\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"lightside\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"lightback\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"skyball\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\t\n\t\tvar screenZoom=2;\n\t\txdv.updateGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tscale:[screenZoom,screenZoom,screenZoom],\n\t\t\t\trotate: this.mViewAs==1?180:0,\n\t\t\t\trotateX: this.mViewAs==1?30:-30,\n\t\t\t\tz: 3000,\n\t\t\t\ty: this.mViewAs==1?12000:-12000,\n\t\t\t\tplayerSide: 1,\n\t\t\t},\n\t\t});\n\n\t\txdv.updateGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tscale:[screenZoom,screenZoom,screenZoom],\n\t\t\t\trotate: this.mViewAs==1?0:180,\n\t\t\t\trotateX: this.mViewAs==1?-30:30,\n\t\t\t\tz: 3000,\n\t\t\t\ty: this.mViewAs==1?-12000:12000,\n\t\t\t\tplayerSide: -1,\n\t\t\t},\n\t\t});\n\n\t\tfor(var pos=0;pos<SIZE*SIZE;pos++) {\n\t\t\tvar coord=this.getVCoord(pos);\n\t\t\txdv.updateGadget(this.spGadgetId(xdv,pos,\"plot\"),{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: true,\n\t\t\t\t\tx: coord[0],\n\t\t\t\t\ty: coord[1],\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\"ball\": {\n\t\t\t\t\t\t\tmap: fullPath+\"/res/xd-view/meshes/grey.png\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t}\n\t\t\n\t\tfor(var pos=0; pos<this.g.Graph.length;pos++) {\n\t\t\tvar coord=this.getVCoord(pos);\n\t\t\txdv.updateGadget(this.spGadgetId(xdv,pos,\"text\"),{\n\t\t\t\tbase : {\n\t\t\t\t\tvisible: this.mNotation,\n\t\t\t\t\tx: coord[0],\n\t\t\t\t\ty: coord[1],\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tx: coord[0]-RADIUS*.25,\n\t\t\t\t\tz: coord[2]-RADIUS*.15,\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t}\n\n\t}\n\t\n\tView.Game.getVCoord = function() {\n\t\tvar r,c,h;\n\t\tif(arguments.length==1) {\n\t\t\tvar pos=arguments[0];\n\t\t\tvar rcCoord=this.g.Coord[pos];\n\t\t\tr=rcCoord[0];\n\t\t\tc=rcCoord[1];\n\t\t\th=rcCoord[2];\n\t\t} else {\n\t\t\tr=arguments[0];\n\t\t\tc=arguments[1];\n\t\t\th=arguments[1];\n\t\t}\n\t\tvar vx=((c-(SIZE-1)/2)+h/2);\n\t\tvar vy=((r-(SIZE-1)/2)+h/2);\n\t\tvar vz=(h)*Math.sqrt(2)/2;\n\t\treturn [vx*2*RADIUS,vy*2*RADIUS,vz*2*RADIUS];\n\t}\n\t\n\tView.Game.getCCoord=function(pos) {\n\t\tvar rcCoord=this.g.Coord[pos];\n\t\tvar r=rcCoord[0];\n\t\tvar c=rcCoord[1];\n\t\tvar h=rcCoord[2];\n\t\treturn this.getVCoord(r,c,h);\n\t}\n\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\t//console.log(\"xdDisplay board\",this);\n\t\tvar scaleFactor=RADIUS*.001*1.01;\n\t\tfor(var pos=0;pos<aGame.g.Coord.length;pos++) {\n\t\t\tif(this.board[pos]==0 && aGame.isGadgetId(pos,\"piece\"))\n\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos,\"piece\"),{\n\t\t\t\t\tbase : {\n\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\telse if(this.board[pos]) {\n\t\t\t\tvar coord=aGame.getVCoord(pos);\n\t\t\t\tvar coordInt=aGame.g.Coord[pos];\n\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos,\"piece\"),{\n\t\t\t\t\tbase : {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\tfile: fullPath + \"/res/images/ball_\"+colors[this.board[pos]]+\".png\",\n\t\t\t\t\t\twidth: RADIUS*2,\n\t\t\t\t\t\theight: RADIUS*2,\n\t\t\t\t\t\tz: coordInt[2]*2+4,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\" : {\n\t\t\t\t\t\tz: coord[2],\n\t\t\t\t\t\tscale: [scaleFactor,scaleFactor,scaleFactor],\n\t\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\t\"ball\": {\n\t\t\t\t\t\t\t\tmap: fullPath+\"/res/xd-view/meshes/\"+colors[this.board[pos]]+\".png\",\n\t\t\t\t\t\t\t\treflectivity: reflexivities[this.board[pos]],\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t\t}\n\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos,\"text\"),{\n\t\t\t\t\"2d\" : {\n\t\t\t\t\tvisible: aGame.mNotation && this.board[pos]==0 && aGame.g.Beneath[pos]==null,\n\t\t\t\t},\n\t\t\t});\t\n\t\t}\n\t\txdv.updateGadget(\"videoa\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"tv\" : {\n\t\t\t\t\t\tcolor : CLASSIC_WHITE,\n\t\t\t\t\t}, \n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videob\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"tv\" : {\n\t\t\t\t\t\tcolor : CLASSIC_BLACK,\n\t\t\t\t\t}, \n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\t\n\tView.Board.xdBuildHTStateMachine = function(xdv, htsm, aGame) {\n\t\tvar $this = this;\n\t\tvar clickPos;\n\t\tvar selfColor=(1-this.mWho)/2+1;\n\t\tvar moves=this.GenerateAllMoves(aGame);\n\t\tvar moveFrom=null, moveTo=null, selMove;\n\t\t\n\t\tfunction Highlight(pos,type) {\n\t\t\t//console.log(\"Highlight\",pos,type);\n\t\t\tfunction Click() {\n\t\t\t\thtsm.smQueueEvent(\"E_CLICK\",{pos:pos,type:type});\t\t\t\t\n\t\t\t}\n\t\t\tvar coord=aGame.getVCoord(pos);\n\t\t\tvar coordInt=aGame.g.Coord[pos];\n\t\t\tvar color=\"green\";\n\t\t\tvar gtype=\"piece\";\n\t\t\tif(type==\"normal\") {\n\t\t\t\tif($this.board[pos]==0) \n\t\t\t\t\tgtype=\"cell\";\n\t\t\t\telse gtype=null;\n\t\t\t} else if(type==\"moveto\") {\n\t\t\t\tgtype=\"cell\";\n\t\t\t} else if(type==\"cancel\") {\n\t\t\t\tcolor=\"red\";\n\t\t\t}\n\t\t\tif(gtype)\n\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos,gtype),{\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tx: coord[0],\n\t\t\t\t\t\ty: coord[1],\n\t\t\t\t\t\tclick: Click,\n\t\t\t\t\t\tz: coordInt[2]*2+5,\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\tfile: fullPath+\"/res/images/ball_\"+color+\".png\",\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tz: coord[2],\n\t\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\t\"ball\": {\n\t\t\t\t\t\t\t\tmap: fullPath+\"/res/xd-view/meshes/\"+color+\".png\",\n\t\t\t\t\t\t\t\treflectivity: color==\"red\"||color==\"green\"?.1:reflexivities[selfColor],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\tfunction Init(args) {\n\t\t\t//console.log(\"moves\",moves);\n\t\t}\n\t\tfunction Clean(args) {\n\t\t\tfor(var pos=0;pos<aGame.g.Graph.length;pos++) {\n\t\t\t\tif(aGame.isGadgetId(pos,\"cell\")) {\n\t\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos,\"cell\"),{\n\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t\t\tclick: null,\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif(aGame.isGadgetId(pos,\"piece\")) {\n\t\t\t\t\tif($this.board[pos]) {\n\t\t\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos,\"piece\"),{\n\t\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\t\tclick: null,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\tfile: fullPath+\"/res/images/ball_\"+colors[$this.board[pos]]+\".png\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\t\t\t\"ball\": {\n\t\t\t\t\t\t\t\t\t\tmap: fullPath+\"/res/xd-view/meshes/\"+colors[$this.board[pos]]+\".png\",\n\t\t\t\t\t\t\t\t\t\treflexivity:reflexivities[$this.board[pos]],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\tfunction Select(args) {\n\t\t\tvar typeNormal={}, typeMoveFrom={}\n\t\t\tfor(var i=0;i<moves.length;i++) {\n\t\t\t\tvar move=moves[i];\n\t\t\t\tif(move.act==\"+\")\n\t\t\t\t\ttypeNormal[move.pos]=true;\n\t\t\t\telse if(move.act==\">\")\n\t\t\t\t\ttypeMoveFrom[move.from]=true;\n\t\t\t}\n\t\t\tfor(var pos in typeNormal)\n\t\t\t\tif(typeNormal.hasOwnProperty(pos))\n\t\t\t\t\tHighlight(pos,\"normal\");\n\t\t\tfor(var pos in typeMoveFrom)\n\t\t\t\tif(typeMoveFrom.hasOwnProperty(pos))\n\t\t\t\t\tHighlight(pos,\"movefrom\");\n\t\t}\n\t\tfunction SelectTo(args) {\n\t\t\tHighlight(moveFrom,\"cancel\");\n\t\t\tfor(var i=0;i<moves.length;i++) {\n\t\t\t\tvar move=moves[i];\n\t\t\t\tif(moveFrom==move.from) {\n\t\t\t\t\tHighlight(move.to,\"moveto\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction Save(args) {\n\t\t\tclickPos=args.pos;\n\t\t\tfor(var i=0;i<moves.length;i++) {\n\t\t\t\tvar move=moves[i];\n\t\t\t\tif(moveFrom===null) {\n\t\t\t\t\tif(move.pos==clickPos) {\n\t\t\t\t\t\tmove0=move;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else if(move.from==moveFrom && move.to==moveTo) {\n\t\t\t\t\tmove0=move;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.error(\"move not found\",clickPos,moves);\n\t\t}\n\t\tfunction Animate(args) {\n\t\t\t$this.spAnimateMove(xdv,aGame,move0,function() {\n\t\t\t\thtsm.smQueueEvent(\"E_ANIM_DONE\",{});\t\t\t\t\n\t\t\t});\n\t\t}\n\t\tfunction SendMove(args) {\n\t\t\taGame.MakeMove(move0);\n\t\t}\n\t\tfunction Click(args) {\n\t\t\tswitch(args.type) {\n\t\t\tcase \"normal\":\n\t\t\t\thtsm.smQueueEvent(\"E_CLICK_ADD\",args);\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"movefrom\":\n\t\t\t\tmoveFrom=args.pos;\n\t\t\t\thtsm.smQueueEvent(\"E_CLICK_FROM\",args);\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"moveto\":\n\t\t\t\tmoveTo=args.pos;\n\t\t\t\thtsm.smQueueEvent(\"E_CLICK_TO\",args);\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"cancel\":\n\t\t\t\thtsm.smQueueEvent(\"E_CLICK_CANCEL\",args);\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfunction Cancel(args) {\n\t\t\tmoveFrom=null;\n\t\t}\n\n\t\thtsm.smTransition(\"S_INIT\", \"E_INIT\", \"S_SELECT\", [ Init ]);\n\t\thtsm.smEntering(\"S_SELECT\", [ Select ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICK\",null, [ Clean, Click ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICK_FROM\",null, [ SelectTo ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICK_TO\",\"S_ANIMATING\", [ Save, Animate ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICK_ADD\",\"S_ANIMATING\", [ Save, Animate ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICK_CANCEL\",null, [ Clean, Cancel, Select ]);\n\t\t//htsm.smTransition(\"S_SELECT\", \"E_ANIM_DONE\",null, [ ]);\n\t\thtsm.smLeaving(\"S_SELECT\", [ Clean ]);\n\t\thtsm.smTransition(\"S_ANIMATING\",\"E_ANIM_DONE\",\"S_DONE\",[SendMove])\n\n\t\thtsm.smTransition([\"S_SELECT\",\"S_DONE\"],\"E_END\",\"S_DONE\",[]);\n\t\thtsm.smEntering(\"S_DONE\",[Clean]);\n\t}\n\t\n\tView.Board.xdPlayedMove = function(xdv, aGame, aMove) {\n\t\taGame.mOldBoard.spAnimateMove(xdv,aGame,aMove,function() {\n\t\t\taGame.MoveShown();\n\t\t})\n\t\treturn false;\n\t}\n\n\tView.Board.spAnimateMove = function(xdv, aGame, aMove, callback) {\n\t\tif(aMove.act==\"+\")\n\t\t\tthis.spAnimateMoveAdd.apply(this,arguments);\n\t\telse if(aMove.act==\">\")\n\t\t\tthis.spAnimateMoveShift.apply(this,arguments);\n\t}\n\t\n\tView.Board.spAnimateMoveAdd = function(xdv, aGame, aMove, callback) {\n\t\tvar selfColor=(1-this.mWho)/2+1;\n\t\tvar coord=aGame.getVCoord(aMove.pos);\n\t\tvar coordInt=aGame.g.Coord[aMove.pos];\n\t\tvar scaleFactor0=RADIUS*.001*0.001;\n\t\tvar scaleFactor=RADIUS*.001*1.01;\n\t\txdv.updateGadget(aGame.spGadgetId(xdv,aMove.pos,\"piece\"),{\n\t\t\tbase: {\n\t\t\t\tvisible: true,\n\t\t\t\tx: coord[0],\n\t\t\t\ty: coord[1],\n\t\t\t}, \n\t\t\t\"2d\": {\n\t\t\t\twidth: RADIUS*2*scaleFactor0, \n\t\t\t\theight: RADIUS*2*scaleFactor0,\n\t\t\t\tz: coordInt[2]*2+4,\n\t\t\t\tfile: fullPath + \"/res/images/ball_\"+colors[selfColor]+\".png\",\n\t\t\t},\n\t\t\t\"3d\": {\n\t\t\t\tz: coord[2],\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tscale: [scaleFactor0,scaleFactor0,scaleFactor0],\n\t\t\t\tmaterials: {\n\t\t\t\t\t\"ball\": {\n\t\t\t\t\t\tmap: fullPath+\"/res/xd-view/meshes/\"+colors[selfColor]+\".png\",\n\t\t\t\t\t\treflectivity: reflexivities[selfColor],\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t},\n\t\t\t\t\ttransparent: true,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(aGame.spGadgetId(xdv,aMove.pos,\"piece\"),{\n\t\t\tbase: {\n\t\t\t},\n\t\t\t\"2d\": {\n\t\t\t\twidth: RADIUS*2, \n\t\t\t\theight: RADIUS*2, \n\t\t\t},\n\t\t\t\"3d\": {\n\t\t\t\tscale: [scaleFactor,scaleFactor,scaleFactor],\n\t\t\t}\n\t\t},800,function() {\n\t\t\tif(aMove.remove!==undefined && aMove.remove.length>0)\n\t\t\t\t\tDeleteBalls(aMove.remove);\n\t\t\telse\n\t\t\t\tcallback();\n\t\t});\n\t\tvar animCount;\n\t\tfunction EndAnim() {\n\t\t\tif(--animCount==0)\n\t\t\t\tcallback();\n\t\t} \n\t\tfunction DeleteBalls(del) {\n\t\t\tanimCount=del.length;\n\t\t\tfor(var i=0;i<del.length;i++) {\n\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,del[i],\"piece\"),{\n\t\t\t\t\tbase: {\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\twidth: RADIUS*2*scaleFactor0, \n\t\t\t\t\t\theight: RADIUS*2*scaleFactor0, \t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tscale: [scaleFactor0,scaleFactor0,scaleFactor0],\n\t\t\t\t\t}\n\t\t\t\t},800,function() {\n\t\t\t\t\tEndAnim();\n\t\t\t\t});\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\tView.Board.spAnimateMoveShift = function(xdv, aGame, aMove, callback) {\n\t\t//console.log(\"spAnimateMoveShift\",aMove,this);\n\t\tvar animCount=0;\n\t\tfunction EndAnim() {\n\t\t\tif(--animCount==0)\n\t\t\t\tcallback();\n\t\t} \n\t\tvar down=[];\n\t\tfor(var i=aMove.down.length-1;i>=0;i--)\n\t\t\tdown.push(aMove.down[i]);\n\t\tdown.push(aMove.from);\n\t\tdown.push(aMove.to);\n\t\ttry{\n\t\tfor(var i=1;i<down.length;i++) {\n\t\t\tvar pos0=down[i-1];\n\t\t\tvar coord0=aGame.getVCoord(pos0);\n\t\t\tvar coord1=aGame.getVCoord(down[i]);\n\t\t\tvar coord1Int=aGame.g.Coord[down[i]];\n\t\t\tvar distance=Math.sqrt((coord0[0]-coord1[0])*(coord0[0]-coord1[0])+(coord0[1]-coord1[1])*(coord0[1]-coord1[1]))\n\t\t\tvar jump=i==down.length-1 && distance>2*RADIUS*1.1;\n\t\t\tanimCount++;\n\t\t\t(function(coord0,coord1,jump) {\n\t\t\t\txdv.updateGadget(aGame.spGadgetId(xdv,pos0,\"piece\"),{\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tx: coord1[0],\n\t\t\t\t\t\ty: coord1[1],\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\tz: coord1Int[2]*2+4,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tz: coord1[2],\n\t\t\t\t\t\tpositionEasingUpdate: function(ratio) {\n\t\t\t\t\t\t\tif(jump) {\n\t\t\t\t\t\t\t\tvar y=((.25-(ratio-.5)*(ratio-.5))*4*RADIUS*2+coord0[2])*this.SCALE3D;\n\t\t\t\t\t\t\t\tthis.object3d.position.y=y;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},800,function() {\n\t\t\t\t\tEndAnim();\n\t\t\t\t});\n\t\t\t})(coord0,coord1,jump);\n\t\t}\n\t\t} catch(e) { debugger; }\n\t}\n\t\n})();\n\n"],"file":"shibumi-spargo-view.js"}