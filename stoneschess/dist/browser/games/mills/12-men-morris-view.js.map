{"version":3,"names":[],"mappings":"","sources":["mills-xd-view.js"],"sourcesContent":["/*\n *\n * Copyright (c) 2013 - Jocly - www.jocly.com\n * \n * This file is part of the Jocly game platform and cannot be used outside of this context without the written permission of Jocly.\n * \n */\n\n(function() {\n\n\tvar WIDTH, HEIGHT, SIZE, PCOUNT, SWIDTH;\n\tvar CLASSIC_WHITE = 0xbbaa99;\n\tvar CLASSIC_BLACK = 0x222222;\n\t\n\tView.Game.xdInitExtra = function(xdv) {\n\t}\n\n\tView.Game.xdPreInit = function(xdv) {\n\t}\n\t// useful to initialize pieces and board while the real meshes aren't loaded yet\n\tView.Game.millsMakeDummyMesh = function(xdv) {\n\t\tif(typeof THREE != \"undefined\")\n\t\t    return new THREE.Mesh( new THREE.CubeGeometry( .001,.001,.001 ), \n\t\t\t\t\t      new THREE.MeshLambertMaterial() );\n\t\telse\n\t\t\treturn null;\n\t}\n\t\n\tvar currentGame;\t\n\tvar pieces = {};\n\t\n\tView.Game.millsMakeTokenPiece = function(avatar,who,callback) {\n\t\t\n\t\tvar fullPath=this.mViewOptions.fullPath;\n\t\t\n\t\tfunction loadResources(who,callback){\n\t\t\tvar bumpMap;\n\t\t\tvar diffuseMap;\n\t\t\tvar pieceGeo;\n\t\t\tvar nbRes=3;\n\t\t\tvar TEXTURE_CANVAS_SZ=256;\n\t\t\t\n\t\t\tfunction checkLoaded(){\n\t\t\t\tnbRes--;\n\t\t\t\tif (nbRes==0){\n\t\t\t\t\tfunction blackenCtxIfNeeded(ctx){\n\t\t\t\t\t\tif(who<0){\n\t\t\t\t\t\t\t//ctx.globalCompositeOperation=\"multiply\";\n\t\t\t\t\t\t\tctx.fillStyle=\"rgba(0,0,0,0.9)\";\n\t\t\t\t\t\t\tctx.fillRect(0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// piecetop\n\t\t\t\t\tvar canvasDiffuse=document.createElement('canvas');\n\t\t\t\t\tcanvasDiffuse.width=canvasDiffuse.height=TEXTURE_CANVAS_SZ;\n\t\t\t\t\tvar textureDiff =  new THREE.Texture(canvasDiffuse);\n\t\t\t\t\tvar canvasBump=document.createElement('canvas');\n\t\t\t\t\tcanvasBump.width=canvasBump.height=TEXTURE_CANVAS_SZ;\n\t\t\t\t\tvar textureBump =  new THREE.Texture(canvasBump);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar ctx=canvasDiffuse.getContext(\"2d\");\n\t\t\t\t\tctx.drawImage(diffuseMap,0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\tblackenCtxIfNeeded(ctx);\n\t\t\t\t\t\n\t\t\t\t\tvar ctxBump=canvasBump.getContext(\"2d\");\n\t\t\t\t\tctxBump.drawImage(bumpMap,0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\t\n\t\t\t\t\ttextureDiff.needsUpdate=true;\n\t\t\t\t\ttextureBump.needsUpdate=true;\n\t\t\t\t\t\n\t\t\t\t\t// piece border\n\t\t\t\t\tvar canvasDiffuseB=document.createElement('canvas');\n\t\t\t\t\tcanvasDiffuseB.width=canvasDiffuseB.height=TEXTURE_CANVAS_SZ;\n\t\t\t\t\tvar textureDiffB =  new THREE.Texture(canvasDiffuseB);\n\t\t\t\t\tvar ctxB=canvasDiffuseB.getContext(\"2d\");\n\t\t\t\t\tctxB.drawImage(diffuseMap,0,0,TEXTURE_CANVAS_SZ,TEXTURE_CANVAS_SZ);\n\t\t\t\t\tblackenCtxIfNeeded(ctxB);\n\t\t\t\t\ttextureDiffB.needsUpdate=true;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar specular=\"#222222\",shininess=20;\n\t\t\t\t\tif (who<0) {\n\t\t\t\t\t\tspecular=\"#333333\";\n\t\t\t\t\t\tshininess=10;\n\t\t\t\t\t}\n\t\t\t\t\tvar mattop=new THREE.MeshPhongMaterial({name:\"piecetop\",\n\t\t\t\t\t\tspecular:specular,\n\t\t\t\t\t\tshininess:shininess,\n\t\t\t\t\t\tmap:textureDiff,\n\t\t\t\t\t\tbumpMap:textureBump,\n\t\t\t\t\t\tbumpScale:0.03\n\t\t\t\t\t\t});\n\t\t\t\t\tvar matborder=new THREE.MeshPhongMaterial({name:\"pieceborders\",\n\t\t\t\t\t\tspecular:specular,\n\t\t\t\t\t\tshininess:shininess,\n\t\t\t\t\t\tmap:textureDiffB});\n\t\t\t\t\t\n\t\t\t\t\tvar pieceMat=new THREE.MultiMaterial([matborder,mattop]);\n\t\t\t\t\t\n\t\t\t\t\tcallback({geometry:pieceGeo,material:pieceMat});\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tavatar.getResource(\"smoothedfilegeo|0|\"+fullPath+\"/res/xd-view/meshes/piece-v2.js\",\n\t\t\t\tfunction(geometry , materials){\n\t\t\t\t\tpieceGeo=geometry;\n\t\t\t\t\t//pieceMat=materials;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t\tavatar.getResource(\"image|\"+fullPath+\"/res/xd-view/meshes/piecetop-bump.jpg\",\n\t\t\t\tfunction(img){\n\t\t\t\t\tbumpMap=img;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t\tavatar.getResource(\"image|\"+fullPath+\"/res/xd-view/meshes/piecediff.jpg\",\n\t\t\t\tfunction(img){\n\t\t\t\t\tdiffuseMap=img;\n\t\t\t\t\tcheckLoaded();\n\t\t\t\t});\n\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\tvar key=\"_\"+who+\"_\";\n\t\t\t\n\t\tvar piece=pieces[key];\n\t\tif(Array.isArray(piece))\n\t\t\tpiece.push(callback);\n\t\telse if(!piece) {\n\t\t\tpieces[key] = [ callback ];\n\t\t\tloadResources(who,function(resources) {\n\t\t\t\tvar callbacks = pieces[key];\n\t\t\t\tpieces[key] = {\n\t\t\t\t\tgeometry: resources.geometry,\n\t\t\t\t\tmaterial: resources.material,\n\t\t\t\t}\n\t\t\t\tcallbacks.forEach(function(callback) {\n\t\t\t\t\tcallback(new THREE.Mesh(resources.geometry,resources.material));\n\t\t\t\t});\n\t\t\t});\n\t\t} else \n\t\t\tcallback(new THREE.Mesh(piece.geometry,piece.material));\t\t\t\t\n\t}\n\n\tView.Game.xdInit = function(xdv) {\n\t\t\t\n\t\tvar $this = this;\n\t\tthis.xdPreInit();\n\t\t\n\t\tvar fullPath=this.mViewOptions.fullPath;\n\t\tWIDTH=this.mOptions.width;\n\t\tSWIDTH=this.mOptions.width+2;\n\t\tHEIGHT=this.mOptions.height;\n\t\tSIZE=Math.floor(Math.min(12000/SWIDTH,12000/HEIGHT));\n\t\t\n\t\txdv.createGadget(\"board\", {\n\t\t\t\"2d\" : {\n\t\t\t\ttype : \"image\",\n\t\t\t},\n\t\t});\n\n\t\txdv.createGadget(\"skyball\", {\n\t\t\t\"3d\" : {\n                harbor: false,\n\t\t\t\ttype : \"custommesh3d\",\t\t\n\t\t\t\trotate: 135,\n\t\t\t\trotateX: -60,\n\t\t\t\tcreate: function() {\n\t\t\t\t\t\n\t\t\t\t\tvar graphGeometry = new THREE.SphereGeometry( 40 , 50, 50 );\n\t\t\t\t\tvar material = new THREE.MeshBasicMaterial( { \n\t\t\t\t        color: 0x00ff00, \n\t\t\t\t        wireframe: false,\n\t\t\t\t        side: THREE.DoubleSide\n\t\t\t\t    } );\n\t\t\t\t\t\n\t\t\t\t\t///////////////////////////////////////////////\n\t\t\t\t\t// calculate vertex colors based on Z values //\n\t\t\t\t\t///////////////////////////////////////////////\n\t\t\t\t\tgraphGeometry.computeBoundingBox();\n\t\t\t\t\tzMin = graphGeometry.boundingBox.min.z;\n\t\t\t\t\tzMax = graphGeometry.boundingBox.max.z;\n\t\t\t\t\tzRange = zMax - zMin;\n\t\t\t\t\tvar color, point, face, numberOfSides, vertexIndex;\n\t\t\t\t\t// faces are indexed using characters\n\t\t\t\t\tvar faceIndices = [ 'a', 'b', 'c', 'd' ];\n\t\t\t\t\t// first, assign colors to vertices as desired\n\t\t\t\t\tfor ( var i = 0; i < graphGeometry.vertices.length; i++ ) \n\t\t\t\t\t{\n\t\t\t\t\t\tpoint = graphGeometry.vertices[ i ];\n\t\t\t\t\t\tcolor = new THREE.Color( 0x000000 );\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar delta=(zMax - point.z)/zRange;\n\t\t\t\t\t\t/*color.b = 1+delta;\n\t\t\t\t\t\tcolor.g = 0.5+0.4*delta;\n\t\t\t\t\t\tcolor.r = 0.3*delta;*/\n\t\t\t\t\t\tcolor.g = color.b = color.r = delta/6;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgraphGeometry.colors[i] = color; // use this array for convenience\n\t\t\t\t\t}\n\t\t\t\t\t// copy the colors as necessary to the face's vertexColors array.\n\t\t\t\t\tfor ( var i = 0; i < graphGeometry.faces.length; i++ ) \n\t\t\t\t\t{\n\t\t\t\t\t\tface = graphGeometry.faces[ i ];\n\t\t\t\t\t\tnumberOfSides = ( face instanceof THREE.Face3 ) ? 3 : 4;\n\t\t\t\t\t\tfor( var j = 0; j < numberOfSides; j++ ) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvertexIndex = face[ faceIndices[ j ] ];\n\t\t\t\t\t\t\tface.vertexColors[ j ] = graphGeometry.colors[ vertexIndex ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t///////////////////////\n\t\t\t\t\t// end vertex colors //\n\t\t\t\t\t///////////////////////\n\t\t\t\t\t// \"wireframe texture\"\n\t\t\t\t\tvar $this=this;\n\n\t\t\t\t\tvar textureLoader = new THREE.TextureLoader();\n\t\t\t\t\ttextureLoader.setCrossOrigin(\"anonymous\");\n\t\t\t\t\ttextureLoader.load(fullPath + \"/res/xd-view/meshes/square.png\",\n\t\t\t\t\t\tfunction(wireTexture){\n\t\t\t\t\t\t\twireTexture.wrapS = wireTexture.wrapT = THREE.RepeatWrapping; \n\t\t\t\t\t\t\twireTexture.repeat.set( 40, 40 );\n\t\t\t\t\t\t\tvar wireMaterial = new THREE.MeshBasicMaterial( { map: wireTexture, vertexColors: THREE.VertexColors, side:THREE.DoubleSide } );\n\t\n\t\t\t\t\t\t\twireMaterial.map.repeat.set( 20, 60 );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar mesh = new THREE.Mesh( graphGeometry , wireMaterial );\n\t\t\t\t\t\t\tmesh.doubleSided = true;\n\t\t\t\t\t\t\t$this.objectReady(mesh);\n\t\t\t\t\t\t},\t\t\t\n\t\t\t\t\t\t// Function called when download progresses\n\t\t\t\t\t\tfunction ( xhr ) {\n\t\t\t\t\t\t\t//console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// Function called when download errors\n\t\t\t\t\t\tfunction ( xhr ) {\n\t\t\t\t\t\t\tconsole.log( \"error loading texture\" );\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t\topacity:1,\n\t\t\t},\n\t\t});\n\n\t\tfor(var pos=0; pos<this.g.Coord.length;pos++) {\n\t\t\t(function(pos) {\n\t\t\t\txdv.createGadget(\"text#\"+pos, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\twidth : SIZE*.2,\n\t\t\t\t\t\theight : SIZE*.2,\n\t\t\t\t\t\tinitialClasses: \"notation\",\n\t\t\t\t\t\tcss : {\n\t\t\t\t\t\t\t\"text-align\" : \"center\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tz : 4,\n\t\t\t\t\t\tdisplay : function(element, width, height) {\n\t\t\t\t\t\t\telement.css({\n\t\t\t\t\t\t\t\t\"font-size\" : (height * .6) + \"pt\",\n\t\t\t\t\t\t\t\t\"line-height\" : (height * 1) + \"px\",\n\t\t\t\t\t\t\t}).text(pos+1);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\tz: -SIZE*.05,\n\t\t\t\t\t\trotateX: -90,\n\t\t\t\t\t\tcreate: function() {\n                            var $this = this;\n                            this.getResource('font|'+fullPath+\n                                '/res/xd-view/fonts/helvetiker_regular.typeface.json',\n                                function(font) {\n                                var gg=new THREE.TextGeometry(\"\"+(pos+1),{\n                                    size: 0.2,\n                                    height: 0.05,\n                                    curveSegments: 6,\n                                    font: font,\n\n                                });\n                                var gm=new THREE.MeshBasicMaterial();\n                                var mesh= new THREE.Mesh( gg , gm );\n                                $this.objectReady(mesh);\n                            });\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\txdv.createGadget(\"cell#\"+pos, {\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\ttype : \"element\",\n\t\t\t\t\t\tinitialClasses: \"xd-choice\",\n\t\t\t\t\t\twidth: SIZE*1.1,\n\t\t\t\t\t\theight: SIZE*1.1,\n\t\t\t\t\t\tz: 1,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"meshfile\",\n\t\t\t\t\t\tfile : fullPath+\"/res/xd-view/meshes/ring-target.js\",\n\t\t\t\t\t\tscale: [.8,.8,.8],\n\t\t\t\t\t\tsmooth : 0,\n\t\t\t\t\t\tflatShading: true,\n\t\t\t\t\t\tz : -100,\t\t\n\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\"square\" : {\n\t\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\t\tcolor : 0xffcc00,\n\t\t\t\t\t\t\t\tshininess : 10,\n\t\t\t\t\t\t\t\t//reflectivity: 0.5,\n\t\t\t\t\t\t\t\t//transparent: true,\n\t\t\t\t\t\t\t\t//opacity: 0.5,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\t\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t\t})(pos);\n\t\t}\n\t\t\n\t\tfunction createFrame(avatar,cx,cy){\n\t\t\t\n\t\t\tfunction setupShapeSquare(cx,cy){\n\t\t\t\tvar sh = new THREE.Shape();\n\t\t\t\tsh.moveTo(-cx/2 , -cy/2);\n\t\t\t\tsh.lineTo(cx/2 , -cy/2);\n\t\t\t\tsh.lineTo(cx/2 , cy/2);\n\t\t\t\tsh.lineTo(-cx/2 , cy/2);\n\t\t\t\treturn sh;\t\t\n\t\t\t}\t\t\t\t\t\n\t\t\tvar bevelSize = .1;\n\t\t\tvar frameWidth=0.5;\n\t\t\tvar frameShape = setupShapeSquare(cx+frameWidth+bevelSize, cy+frameWidth+bevelSize);\n\t\t\tvar holeShape = setupShapeSquare(cx+bevelSize,cy+bevelSize);\n\t\t\tframeShape.holes.push(holeShape);\n\n\t\t\tvar extrudeSettings = {\n\t\t\t\tamount: .4 , // main extrusion thickness\n\t\t\t\tsteps: 1 , // nb of main extrusion steps\n\t\t\t\tbevelSize: bevelSize, \n\t\t\t\tbevelThickness:.04,\n\t\t\t\tbevelSegments: 1, // nb of bevel segment\n\t\t\t};\n\n\t\t\tvar frameGeo = new THREE.ExtrudeGeometry( frameShape, extrudeSettings );\n\t\t\t\n\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\tmatrix.makeRotationX(-Math.PI/2)\n\t\t\tframeGeo.applyMatrix(matrix);\n\t\t\tvar frameColor=\"#000000\";\n\t\t\tif (avatar.options.frameColorFill) frameColor=avatar.options.frameColorFill;\n\t\t\tframeMat = new THREE.MeshPhongMaterial({\n\t\t\t\tcolor: frameColor,\n\t\t\t\tshininess: 500,\n\t\t\t\tspecular: '#444444',\n\t\t\t});\n\t\t\tvar frameObj = new THREE.Mesh( frameGeo , frameMat);\n\t\t\tframeObj.position.y=-extrudeSettings.amount-.01;\n\t\t\treturn frameObj;\n\t\t}\n\t\t\n\t\tfunction CreatePiece(side,index) {\n\t\t\txdv.createGadget(\"piece#\"+index, {\n\t\t\t\t\"2d\" : {\n\t\t\t\t\ttype : \"sprite\",\n\t\t\t\t\tz : 4,\n\t\t\t\t\tfile : fullPath+\"/res/images/basic2.png\",\n\t\t\t\t\tclipx: 0,\n\t\t\t\t\tclipy: side==1?0:100,\n\t\t\t\t\tclipwidth: 100,\n\t\t\t\t\tclipheight: 100,\n\t\t\t\t\twidth: SIZE*.9,\n\t\t\t\t\theight: SIZE*.9,\n\t\t\t\t\topacity: 1,\n\t\t\t\t},\n\t\t\t\t\"classic3d\" : {\n\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\tcreate: function(callback){\n\t\t\t\t\t\tthis._pKey=\"dummy\";\n\t\t\t\t\t\treturn $this.millsMakeDummyMesh(xdv);\n\t\t\t\t\t},\n\t\t\t\t\tdisplay: function(force,options,delay){\n\t\t\t\t\t\tvar key=\"_\"+options.playerSide+\"_\";\n\t\t\t\t\t\tif (key!=this._pKey){\n\t\t\t\t\t\t\tthis._pKey=key;\n\t\t\t\t\t\t\tvar avat=this;\n\t\t\t\t\t\t\tcurrentGame.millsMakeTokenPiece(avat,options.playerSide,function(mesh){\n\t\t\t\t\t\t\t\tavat.replaceMesh(mesh,options,delay);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tscale: [0.3*10/SWIDTH,0.3*10/SWIDTH,0.3*10/SWIDTH],\n\t\t\t\t\tz : 1,\t\t\t\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t}\n\n\t\tvar index=0;\n\t\tfor(var side=1;side>=-1;side-=2)\n\t\t\tfor(var m=0;m<this.mOptions.mencount;m++)\n\t\t\t\tCreatePiece(side,index++);\n\t\tPCOUNT=this.mOptions.menCount*2;\n\t\t\n\t\tvar coords=this.g.Coord;\n\t\tvar graph=this.g.Graph;\n\t\txdv.createGadget(\"boardframe\", {\n\t\t\t\"classic3d\": {\n\t\t\t\ttype : \"custommesh3d\",\n\t\t\t\tcolor: 0xaaffaa,\t\t\n\t\t\t\tscale: [1.65,1.65,1.65],\n\t\t\t\topacity : 1,\n\t\t\t\t//flatShading: true,\n\t\t\t\tz : -320,\n\t\t\t\tcreate: function() {\t\t\t\t\t\n\t\t\t\t\tvar $this=this;\n\t\t\t\t\tthis.getResource(\"smoothedfilegeo|\"+0+\"|\"+fullPath+\"/res/xd-view/meshes/boardoriented.js\",function(geometry , materials) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar zoom=0.81;\n\t\t\t\t\t\tswitch(WIDTH){\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.log(\"3D error: unhandled size \"+WIDTH);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\t\tzoom=0.81;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\t\tzoom=1.05;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tzoom=1.40;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfunction xyPos(position){\n\t\t\t\t\t\t\treturn [zoom*(-WIDTH/2+coords[position][0]+0.5),zoom*(-HEIGHT/2+coords[position][1]+0.5)];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var m in materials) \n\t\t\t\t\t\t\tif(materials.hasOwnProperty(m)) {\n\t\t\t\t\t\t\t\tvar mat=materials[m];\n\t\t\t\t\t\t\t\tif (mat.name==\"mainframe\"){\n\t\t\t\t\t\t\t\t\tmat.specular={r:.05,g:.05,b:.05}\n\t\t\t\t\t\t\t\t\tmat.shininess=40;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tvar board=new THREE.Mesh(geometry,new THREE.MultiMaterial( materials ));\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar cylGeo=new THREE.SphereGeometry(0.15, 32, 32);\t\t\n\t\t\t\t\t\tvar cylMat=new THREE.MeshPhongMaterial( { color: 0x000000 , specular: 0x030303, shininess  : 500 } );\n\t\t\t\t\t\tfor (var i=0;i< coords.length;i++){\n\t\t\t\t\t\t\tvar cyl=new THREE.Mesh(cylGeo,cylMat);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcyl.castShadow=true;\n\t\t\t\t\t\t\tcyl.position.y=0.16;\n\t\t\t\t\t\t\tvar xy=xyPos(i);\n\t\t\t\t\t\t\tcyl.position.x=xy[0];\n\t\t\t\t\t\t\tcyl.position.z=xy[1];\n\t\t\t\t\t\t\tcyl.castShadow=true;\n\t\t\t\t\t\t\tcyl.scale.y=.2;\n\t\t\t\t\t\t\tboard.add(cyl);\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n    \t\t\t\t\t\n\t\t\t\t\t\tvar tubeMat = new THREE.MeshPhongMaterial( { color: 0x000000 , specular: 0x050505, shininess  : 500  } );\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar doneSegments=[];\n\t\t\t\t\t\tfunction JoinPositions(p1,p2){\n\t\t\t\t\t\t\tvar signature=(p1<p2)?p1+\"-\"+p2:p2+\"-\"+p1;\n\t\t\t\t\t\t\tif (doneSegments[signature]) \n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tdoneSegments[signature]=true;\n\t\t\t\t\t\t\t//alert(\"JoinPositions: p1=\"+p1+\" ,p2=\"+p2);\n\t\t\t\t\t\t\tvar xy1=xyPos(p1);\n\t\t\t\t\t\t\tvar xy2=xyPos(p2);\n\t\t\t\t\t\t\tvar curve = new THREE.CatmullRomCurve3([\n\t\t\t\t\t\t\t\tnew THREE.Vector3(xy1[0], 0, xy1[1]),\n\t\t\t\t\t\t\t\tnew THREE.Vector3(xy2[0], 0, xy2[1])\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tvar tubeGeo = new THREE.TubeGeometry(curve, 1, 0.1, 10, false);\n\t\t\t\t\t\t\tvar tube = new THREE.Mesh(tubeGeo,tubeMat);\n\t\t\t\t\t\t\ttube.position.y=0.15;\n\t\t\t\t\t\t\ttube.scale.y=0.2;\n\t\t\t\t\t\t\ttube.castShadow=false;\n\t\t\t\t\t\t\tboard.add(tube);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*for (var p=0;p<graph.length;p++){\n\t\t\t\t\t\t\tfor(var q=0;q<graph[p].length;q++){*/\n\t\t\t\t\t\tfor (var p=0;p<graph.length;p++){\n\t\t\t\t\t\t\tfor(var q=0;q<graph[p].length;q++){\n\t\t\t\t\t\t\t\tif (graph[p][q]!=null) \n\t\t\t\t\t\t\t\t\tJoinPositions(p,graph[p][q]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// add border frame\n\t\t\t\t\t\tvar margin=-8;\n\t\t\t\t\t\tvar cx=7.83;//(1+2*margin/100)*WIDTH*SIZE/1000;\n\t\t\t\t\t\tvar cy=7.83;//(1+2*margin/100)*HEIGHT*SIZE/1000;\n\t\t\t\t\t\tvar frameObj = createFrame($this,cx,cy);\n\t\t\t\t\t\tframeObj.position.y=-.15;\n\t\t\t\t\t\tboard.add(frameObj);\n\t\t\t\t\t\tvar bottom=new THREE.Mesh(new THREE.BoxGeometry(cx,.5,cy),frameObj.material);\n\t\t\t\t\t\tbottom.position.y=-.3;\n\t\t\t\t\t\tboard.add(bottom);\n\t\t\t\t\t\tboard.receiveShadow=true;\n\t\t\t\t\t\t$this.objectReady(board);\n\t\t\t\t\t});\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t\n\t\tvar millsCreateScreen = function(videoTexture) {\n\t\t\t// flat screens\n\t\t\tvar gg=new THREE.PlaneGeometry(4,3,1,1);\n\t\t\tvar gm=new THREE.MeshPhongMaterial({color:0xffffff,map:videoTexture,shading:THREE.FlatShading,emissive:{r:1,g:1,b:1}});\n\t\t\tvar mesh = new THREE.Mesh( gg , gm );\n\t\t\tthis.objectReady(mesh); \n\t\t\treturn null;\n\t\t}\t\t\n\t\t\n\t\txdv.createGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn millsCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videoabis\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn millsCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn millsCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\t\n\t\txdv.createGadget(\"videobbis\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn millsCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t\n\t\t\n\t\txdv.createGadget(\"spacefield\",{\n\t\t\t\"3d\" : {\n                harbor: false,\n\t\t\t\ttype : \"custommesh3d\",\t\t\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar $this=this;\n\t\t\t\t\tvar container=new THREE.Object3D();\n\t\t\t\t\tvar catCount=10;\n\t\t\t\t\tvar partSys=[];\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvar textureLoader = new THREE.TextureLoader();\n\t\t\t\t\ttextureLoader.setCrossOrigin(\"anonymous\");\n\t\t\t\t\ttextureLoader.load(fullPath + \"/res/xd-view/meshes/star.png\" ,\n\t\t\t\t\t\tfunction(starSprite){\n\t\t\t\t\t\t\tfor(var i=0;i<catCount;i++) {\n\t\t\t\t\t\t\t\tvar material = new THREE.PointsMaterial( { size: 1-i/catCount, map: starSprite, blending: THREE.AdditiveBlending,  depthTest: true, transparent : true } );\n\t\t\t\t\t\t\t\tvar geometry = new THREE.Geometry();\n\t\t\t\t\t\t\t\tmaterial.color.setHex( 0xffffff );\n\t\t\t\t\t\t\t\tvar particles = new THREE.Points( geometry, material);\n\t\t\t\t\t\t\t\tpartSys.push({\n\t\t\t\t\t\t\t\t\tobject: particles,\n\t\t\t\t\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tcontainer.add(particles)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$this.getResource(\"json2|\"+fullPath + \"/res/xd-view/meshes/starsdb.json\",function(data) {\n\t\t\t\t\t\t\t\tfor(var i=0;i<data.length;i++) {\n\t\t\t\t\t\t\t\t\tvar star=data[i];\n\t\t\t\t\t\t\t\t\tvar r=30;\n\t\t\t\t\t\t\t\t\tvar rot=(star.az-90)*Math.PI/180;\n\t\t\t\t\t\t\t\t\tvar elev=star.al*Math.PI/180;\n\t\t\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\t\t\t\tvertex.x = r*Math.cos(elev)*Math.cos(rot);\n\t\t\t\t\t\t\t\t\tvertex.z = r*Math.cos(elev)*Math.sin(rot);\n\t\t\t\t\t\t\t\t\tvertex.y = r*Math.sin(elev);\n\t\t\t\t\t\t\t\t\tvar cat=Math.floor(i*catCount/data.length);\n\t\t\t\t\t\t\t\t\tvar catObj=partSys[cat];\n\t\t\t\t\t\t\t\t\tcatObj.geometry.vertices.push( vertex );\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this.objectReady(container);\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t\t\t\t\n\t\t\n\t\t\n\t\tthis.xdInitExtra(xdv);\n\t}\n\t\n\tView.Game.xdBuildScene = function(xdv) {\n\n\t\tcurrentGame=this;\n\t\tvar $this=this;\n\n\t\tvar scaleScreen=3;\n\t\tvar zScreen=3000;\n\t\tvar zScreenVignette=1500;\n\t\tvar yScreen=10000;\n\t\tvar screenAngle=0;\n\t\tvar thumbDist=.89;\n\t\tvar thumbOffset=5500;\t\t\n\t\tvar inclination=25;\n\t\t\n\t\txdv.updateGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: 1,\n\t\t\t\tz: zScreen,\n\t\t\t\ty: this.mViewAs==1?yScreen:-yScreen,\n\t\t\t\trotate: this.mViewAs==1?-(180+screenAngle):-screenAngle,\n\t\t\t\trotateX: this.mViewAs==1?inclination:-inclination,\n\t\t\t\tscale: [scaleScreen,scaleScreen,scaleScreen],\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videoabis\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: -1,\n\t\t\t\tz: zScreenVignette,\n\t\t\t\tx: this.mViewAs==1?-thumbOffset:thumbOffset,\n\t\t\t\ty: this.mViewAs==1?thumbDist*yScreen:-thumbDist*yScreen,\n\t\t\t\trotate: this.mViewAs==1?-(180+screenAngle):-screenAngle,\n\t\t\t\trotateX: this.mViewAs==1?inclination:-inclination,\n\t\t\t\tscale: [scaleScreen/4,scaleScreen/4,scaleScreen/4],\n\t\t\t},\n\t\t});\n\n\t\txdv.updateGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: -1,\n\t\t\t\tz: zScreen,\n\t\t\t\ty: this.mViewAs==1?-yScreen:yScreen,\n\t\t\t\trotate: this.mViewAs==1?-screenAngle:-(180+screenAngle),\n\t\t\t\trotateX: this.mViewAs==1?-inclination:inclination,\n\t\t\t\tscale: [scaleScreen,scaleScreen,scaleScreen],\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videobbis\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: 1,\n\t\t\t\tz: zScreenVignette,\n\t\t\t\tx: this.mViewAs==1?thumbOffset:-thumbOffset,\n\t\t\t\ty: this.mViewAs==1?-thumbDist*yScreen:thumbDist*yScreen,\n\t\t\t\trotate: this.mViewAs==1?-screenAngle:-(180+screenAngle),\n\t\t\t\trotateX: this.mViewAs==1?-inclination:inclination,\n\t\t\t\tscale: [scaleScreen/4,scaleScreen/4,scaleScreen/4],\n\t\t\t},\n\t\t});\t\t\n\n\n\t\txdv.updateGadget(\"board\",{\n\t\t\t\"2d\": {\n\t\t\t\tvisible: true,\n\t\t\t\trotate: this.mViewAs==JocGame.PLAYER_A?0:180,\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: SWIDTH*SIZE,\n\t\t\t\theight: HEIGHT*SIZE,\n\t\t\t},\n\t\t});\n\t\t\n\t\txdv.updateGadget(\"boardframe\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\treceiveShadow:true,\n\t\t\t}\n\t\t});\n\n\t\txdv.updateGadget(\"skyball\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"spacefield\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t});\t\t\n\t\t\n\t\tfor(var pos=0;pos<this.g.Coord.length;pos++) {\n\t\t\tvar coord=this.getCCoord(pos);\n\t\t\txdv.updateGadget(\"text#\"+pos, {\n\t\t\t\tbase : {\n\t\t\t\t\tvisible: this.mNotation,\n\t\t\t\t},\n\t\t\t\t\"2d\" : {\n\t\t\t\t\tx: coord[0]-SIZE*.42,\n\t\t\t\t\ty: coord[1]-SIZE*.42,\n\t\t\t\t},\n\t\t\t\t\"3d\" : {\n\t\t\t\t\tx: coord[0]-SIZE*.47,\n\t\t\t\t\ty: coord[1]+SIZE*.47,\n\t\t\t\t}\n\t\t\t});\n\t\t\txdv.updateGadget(\"cell#\"+pos,{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: false,\n\t\t\t\t\tx: coord[0],\n\t\t\t\t\ty: coord[1],\n\t\t\t\t},\n\t\t\t\t\"2d\" : {\n\t\t\t\t\twidth: SIZE * .95,\n\t\t\t\t\theight: SIZE * .95,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\t\n\tView.Game.getVCoord = function() {\n\t\tvar r,c;\n\t\tif(arguments.length==1) {\n\t\t\tvar pos=arguments[0];\n\t\t\tvar rcCoord=this.g.Coord[pos];\n\t\t\tr=rcCoord[0];\n\t\t\tc=rcCoord[1];\n\t\t} else {\n\t\t\tr=arguments[0];\n\t\t\tc=arguments[1];\n\t\t}\n\t\tr=HEIGHT-1-r;\n\t\tif (this.mViewAs == JocGame.PLAYER_B) {\n\t\t\tr=HEIGHT-1-r;\n\t\t\tc=WIDTH-1-c;\n\t\t}\n\t\tvar vx=(c-(WIDTH-1)/2)*SIZE;\n\t\tvar vy=(r-(HEIGHT-1)/2)*SIZE;\n\t\treturn [vx,vy, - SIZE * .04];\n\t}\n\t\n\tView.Game.getCCoord=function(pos) {\n\t\tvar rcCoord=this.g.Coord[pos];\n\t\tvar r=rcCoord[0];\n\t\tvar c=rcCoord[1];\n\t\treturn this.getVCoord(r,c);\n\t}\n\n\tView.Game.getPieceCoord=function(piece) {\n\t\tif(piece.p<0) {\n\t\t\tvar x=(piece.s==1?-5500:5500)*this.mViewAs;\n\t\t\tvar height=12000*WIDTH/SWIDTH;\n\t\t\tvar dy=height/this.mOptions.mencount;\n\t\t\tvar y2d=((piece.d+.5)*dy-height/2)*piece.s*this.mViewAs;\n\t\t\tvar z2d=10+piece.d;\n\t\t\tvar y3d=(piece.s==1?SIZE*WIDTH/2:-SIZE*WIDTH/2)*this.mViewAs;\n\t\t\tvar z3d=-SIZE*.04 + piece.d*SIZE*.17;\n\t\t\treturn {\n\t\t\t\t\"2d\": [x,y2d,z2d], \n\t\t\t\t\"3d\": [x,y3d,z3d], \n\t\t\t}\n\t\t} else {\n\t\t\tvar coord=this.getCCoord(piece.p);\n\t\t\treturn {\n\t\t\t\t\"2d\": coord,\n\t\t\t\t\"3d\": coord,\n\t\t\t}\n\t\t}\n\t}\n\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\tfor(var i=0;i<this.pieces.length;i++) {\n\t\t\tvar piece=this.pieces[i];\n\t\t\tif(!piece.a)\n\t\t\t\txdv.updateGadget(\"piece#\"+i,{\n\t\t\t\t\tbase : {\n\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\telse {\n\t\t\t\tvar coord=aGame.getPieceCoord(piece);\n\t\t\t\txdv.updateGadget(\"piece#\"+i,{\n\t\t\t\t\tbase : {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\topacity : 1,\n\t\t\t\t\t\tx: coord[\"2d\"][0],\n\t\t\t\t\t\ty: coord[\"2d\"][1],\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\" : {\n\t\t\t\t\t\tz : coord[\"3d\"][2],\n\t\t\t\t\t\tscale: [SIZE*.00045,SIZE*.00045,SIZE*.00045],\n\t\t\t\t\t\topacity : 1,\t\t\t\t\t\t\n\t\t\t\t\t\tx: coord[\"3d\"][0],\n\t\t\t\t\t\ty: coord[\"3d\"][1],\n\t\t\t\t\t\tplayerSide: piece.s,\n\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\txdv.updateGadget(\"boardframe\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"playera\" : {\n\t\t\t\t\t\tcolor : aGame.mViewAs==JocGame.PLAYER_A?CLASSIC_WHITE:CLASSIC_BLACK,\n\t\t\t\t\t}, \n\t\t\t\t\t\"playerb\" : {\n\t\t\t\t\t\tcolor : aGame.mViewAs==JocGame.PLAYER_B?CLASSIC_WHITE:CLASSIC_BLACK,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videoa\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"tv\" : {\n\t\t\t\t\t\tcolor : CLASSIC_WHITE,\n\t\t\t\t\t}, \n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videob\", {\n\t\t\t\"3d\": {\t\t\t\n\t\t\t\tmaterials: { \n\t\t\t\t\t\"tv\" : {\n\t\t\t\t\t\tcolor : CLASSIC_BLACK,\n\t\t\t\t\t}, \n\t\t\t\t},\n\t\t\t},\n\t\t});\t\t\n\t}\n\t\n\tView.Board.xdBuildHTStateMachine = function(xdv, htsm, aGame) {\n\t\tvar $this = this;\n\t\tvar moves=this.mMoves;\n\t\tvar pieceIndex=-1;\n\t\tvar uMove={f:-2,t:-2,c:-2},move;\n\t\tvar matchingMoves=[];\n\t\t\n\t\tfunction Highlight(pos,type) {\t\t\n\t\t\tvar piece=null;\n\t\t\tvar pieceIndex1;\n\t\t\tpieceIndex1=$this.board[pos];\n\t\t\tif(pieceIndex1<0 && pos==uMove.t)\n\t\t\t\tpieceIndex1=pieceIndex;\n\t\t\tif(pieceIndex1>=0)\n\t\t\t\tpiece=$this.pieces[pieceIndex1];\n\t\t\tvar color;\n\t\t\tvar event;\n\t\t\tvar classes;\n\t\t\tswitch(type) {\n\t\t\tcase \"normal\": \n\t\t\t\tevent=\"E_CLICKED\";\n\t\t\t\tcolor=0xffff00;\n\t\t\t\tclasses=\"xd-choice-view\";\n\t\t\t\tbreak;\n\t\t\tcase \"cancel\": \n\t\t\t\tevent=\"E_CANCEL\";\n\t\t\t\tcolor=0xff0000;\n\t\t\t\tclasses=\"xd-cancel\";\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfunction SendEvent() {\n\t\t\t\thtsm.smQueueEvent(event, {pos:pos,type:type});\n\t\t\t}\n\t\t\txdv.updateGadget(\"cell#\"+pos,{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: true,\n\t\t\t\t\tclick : SendEvent,\n\t\t\t\t},\n\t\t\t\t\"2d\": {\n\t\t\t\t\tclasses: classes,\n\t\t\t\t\topacity: (aGame.mShowMoves || type==\"cancel\")?.5:0,\n\t\t\t\t},\n\t\t\t\t\"3d\": {\n\t\t\t\t\tcolor: color,\n\t\t\t\t\tscale: [SIZE * .0006,SIZE * .0006, SIZE * .0006],\n\t\t\t\t\topacity: type==\"cancel\"?.5:0,\n\t\t\t\t\tcastShadow: true,\n\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\"square\" : {\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\tcolor : type==\"cancel\"?0xff4400:0xffffff,\n\t\t\t\t\t\t\tshininess : 10,\n\t\t\t\t\t\t\ttransparent: false,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\t\n\n\t\t\t\t},\n\t\t\t});\n\t\t\tvar rcCoord=aGame.g.Coord[pos];\n\t\t\tvar r=rcCoord[0];\n\t\t\tvar c=rcCoord[1];\n\t\t\tvar darkCell=(c%2==r%2);\n\t\t\tif(piece)\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex1,{\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tclick : SendEvent,\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\tclasses: \"choice\",\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t}\n\t\tfunction Init(args) {\n\t\t}\n\t\tfunction Clean(args) {\n\t\t\tfor ( var pos = 0; pos < aGame.g.Coord.length; pos++) {\n\t\t\t\txdv.updateGadget(\"cell#\" + pos, {\n\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\tvisible : false,\n\t\t\t\t\t\tclick : null,\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\tclasses: \"\",\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tfor( var i=0;i<$this.pieces.length;i++) {\n\t\t\t\tvar piece=$this.pieces[i];\n\t\t\t\txdv.updateGadget(\"piece#\"+i, {\n\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\tclick : null,\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfunction Select(args) {\n\t\t\tmatchingMoves=[];\n\t\t\tfor(var i=0;i<moves.length;i++) {\n\t\t\t\tvar move=moves[i];\n\t\t\t\tvar keep=true;\n\t\t\t\tif(uMove.f!=-2 && uMove.f!=move.f)\n\t\t\t\t\tkeep=false;\n\t\t\t\tif(uMove.t!=-2 && uMove.t!=move.t)\n\t\t\t\t\tkeep=false;\n\t\t\t\tif(uMove.c!=-2 && uMove.c!=move.c)\n\t\t\t\t\tkeep=false;\n\t\t\t\tif(keep)\n\t\t\t\t\tmatchingMoves.push(move);\n\t\t\t}\n\n\t\t\tif(matchingMoves.length==1) {\n\t\t\t\tvar mMove=matchingMoves[0];\n\t\t\t\tif(uMove.f==-2 && mMove.f>=0) {\n\t\t\t\t\tuMove.f=mMove.f;\n\t\t\t\t\thtsm.smQueueEvent(\"E_CLICKED\",{pos:mMove.f,type:\"normal\"});\n\t\t\t\t} else if(uMove.t==-2 && mMove.t>=0) {\n\t\t\t\t\tuMove.t=mMove.t;\n\t\t\t\t\thtsm.smQueueEvent(\"E_CLICKED\",{pos:mMove.t,type:\"normal\"});\n\t\t\t\t} else if(uMove.c==-2 && mMove.c>=0) {\n\t\t\t\t\tuMove.c=mMove.c;\n\t\t\t\t\thtsm.smQueueEvent(\"E_CLICKED\",{pos:mMove.c,type:\"normal\"});\n\t\t\t\t} else \n\t\t\t\t\thtsm.smQueueEvent(\"E_DONE\",{move:mMove});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(uMove.f>-2 && uMove.t==-2)\n\t\t\t\tHighlight(uMove.f,\"cancel\");\n\t\t\telse if(uMove.t>=0 && uMove.c==-2)\n\t\t\t\tHighlight(uMove.t,\"cancel\");\n\t\t\tfor(var i=0;i<matchingMoves.length;i++) {\n\t\t\t\tvar move=matchingMoves[i];\n\t\t\t\tif(uMove.t>=0)\n\t\t\t\t\tHighlight(move.c,\"normal\");\n\t\t\t\telse if(uMove.f>=0 || move.f==-1)\n\t\t\t\t\tHighlight(move.t,\"normal\");\n\t\t\t\telse\n\t\t\t\t\tHighlight(move.f,\"normal\");\n\t\t\t}\n\t\t}\n\t\tfunction Animate(args) {\n\t\t\tvar from=-1,to=-1,capt=-1;\n\t\t\tif(uMove.c>=0)\n\t\t\t\tcapt=uMove.c;\n\t\t\telse {\n\t\t\t\tto=uMove.t;\n\t\t\t\tif(uMove.f>=0)\n\t\t\t\t\tfrom=uMove.f\n\t\t\t}\n\t\t\t$this.millsAnimateMove(xdv,aGame,from,to,capt,function() {\n\t\t\t\thtsm.smQueueEvent(\"E_ANIM_DONE\",{});\t\t\t\t\t\n\t\t\t});\n\t\t}\n\t\tfunction SaveClick(args) {\n\t\t\tfor(var i=0;i<matchingMoves.length;i++) {\n\t\t\t\tvar move=matchingMoves[i];\n\t\t\t\tif(move.f==args.pos) {\n\t\t\t\t\tuMove.f=args.pos;\n\t\t\t\t\tpieceIndex=$this.board[args.pos];\n\t\t\t\t} else if(move.t==args.pos) {\n\t\t\t\t\tif(uMove.f<0)\n\t\t\t\t\t\tpieceIndex=$this.dock[$this.mWho][0];\n\t\t\t\t\tuMove.t=args.pos;\n\t\t\t\t} else if(move.c==args.pos)\n\t\t\t\t\tuMove.c=args.pos;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfunction SaveMove(args) {\n\t\t\tmove=args.move;\n\t\t}\n\t\tfunction SendMove(args) {\n\t\t\taGame.MakeMove(move);\n\t\t}\n\t\tfunction CancelLastClick(args) {\n\t\t\tif(uMove.t>-2) {\n\t\t\t\tuMove.t=-2;\n\t\t\t\tvar piece=$this.pieces[pieceIndex];\n\t\t\t\tvar coord=aGame.getPieceCoord(piece);\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex,{\n\t\t\t\t\t\"2d\" : {\n\t\t\t\t\t\tx: coord[\"2d\"][0],\n\t\t\t\t\t\ty: coord[\"2d\"][1],\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\" : {\n\t\t\t\t\t\tz : coord[\"3d\"][2],\n\t\t\t\t\t\tx: coord[\"3d\"][0],\n\t\t\t\t\t\ty: coord[\"3d\"][1],\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t} else if(uMove.f>-2) {\n\t\t\t\tpieceIndex=-1;\n\t\t\t\tuMove.f=-2;\n\t\t\t}\n\t\t}\n\n\t\thtsm.smTransition(\"S_INIT\", \"E_INIT\", \"S_SELECT\", [ Init ]);\n\t\thtsm.smEntering(\"S_SELECT\", [ Select ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CLICKED\",\"S_ANIMATING\", [ SaveClick,Animate ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_CANCEL\",null, [ Clean,CancelLastClick,Select ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_DONE\",null, [ SaveMove, SendMove  ]);\n\t\thtsm.smTransition(\"S_SELECT\", \"E_ANIM_DONE\",null, [ ]);\n\t\thtsm.smLeaving(\"S_SELECT\", [ Clean ]);\n\t\thtsm.smTransition(\"S_ANIMATING\",\"E_ANIM_DONE\",\"S_SELECT\",[])\n\n\t\thtsm.smTransition([\"S_SELECT\"],\"E_END\",\"S_DONE\",[]);\n\t\thtsm.smEntering(\"S_DONE\",[Clean]);\n\n\t}\n\t\n\tView.Board.millsAnimateMove = function(xdv, aGame, from, to, capture, callback) {\n\t\tvar $this=this;\n\t\tvar pieceIndex, fly=false;\n\t\tfunction Capture() {\n\t\t\tif(capture<0)\n\t\t\t\tcallback();\n\t\t\telse {\n\t\t\t\tpieceIndex=$this.board[capture];\n\t\t\t\t\n\t\t\t\taGame.PlaySound(\"capture\");\n\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex,{\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tz: 7*SIZE,\n\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\"base\" : {\n\t\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmaterialEasing: (typeof TWEEN===\"undefined\")?null:TWEEN.Easing.Cubic.EaseOut,\n\t\t\t\t\t},\n\t\t\t\t},800,function() {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif(to>=0) {\n\t\t\tif(from>=0) { \n\t\t\t\tpieceIndex=this.board[from];\n\t\t\t\tfly=true;\n\t\t\t\tfor(var i=0;i<aGame.g.Graph[from].length;i++)\n\t\t\t\t\tif(aGame.g.Graph[from][i]==to) {\n\t\t\t\t\t\tfly=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpieceIndex=this.dock[this.mWho][0];\n\t\t\t\tfly=true;\n\t\t\t}\n\t\t\tvar coord=aGame.getCCoord(to);\n\t\t\tvar coord0=aGame.getPieceCoord(this.pieces[pieceIndex]);\n\t\t\tvar z0=coord0[\"3d\"][2];\n\t\t\tvar z1=z0+SIZE;\n\t\t\tvar z2=-SIZE*.04;\n\t\t\tvar c=z0;\n\t\t\tvar S1=c-z1;\n\t\t\tvar S2=c-z2;\n\n\t\t\tvar A=-1;\n\t\t\tvar B=4*S1-2*S2;\n\t\t\tvar C=-S2*S2;\n\t\t\tvar D=B*B-4*A*C;\n\t\t\tvar a1=(-B-Math.sqrt(D))/(2*A);\n\t\t\tvar a2=(-B+Math.sqrt(D))/(2*A);\n\t\t\tvar a=a1;\n\t\t\tvar b=-a-S2;\n\t\t\tif(a==0 || -b/(2*a)<0 || -b/(2*a)>1) {\n\t\t\t\ta=a2;\n\t\t\t\tb=-a-S2;\n\t\t\t}\n\t\t\t\n\t\t\tif (fly){\n\t\t\t}else{\n\t\t\t\taGame.PlaySound(\"move\"+(1+Math.floor(Math.random()*4)));\n\t\t\t}\n\t\t\txdv.updateGadget(\"piece#\"+pieceIndex,{\n\t\t\t\t\"2d\": {\n\t\t\t\t\tx: coord[0],\n\t\t\t\t\ty: coord[1],\n\t\t\t\t},\n\t\t\t\t\"3d\": {\n\t\t\t\t\tx: coord[0],\n\t\t\t\t\ty: coord[1],\n\t\t\t\t\tpositionEasingUpdate: function(ratio) {\n\t\t\t\t\t\tif(fly) {\n\t\t\t\t\t\t\tvar y=(a*ratio*ratio+b*ratio+c)*this.SCALE3D;\n\t\t\t\t\t\t\tthis.object3d.position.y=y;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},400,function() {\n\t\t\t\txdv.updateGadget(\"piece#\"+pieceIndex,{ \"3d\": {\tpositionEasingUpdate: null,\t}});\n\t\t\t\tif (fly)\n\t\t\t\t\taGame.PlaySound(\"tac\"+(1+Math.floor(Math.random()*3)));\n\t\t\t\tCapture();\n\t\t\t});\n\t\t} else \n\t\t\tCapture();\n\t}\n\t\n\tView.Board.xdPlayedMove = function(xdv, aGame, aMove) {\n\t\tvar board=aGame.mOldBoard;\n\t\tboard.millsAnimateMove(xdv,aGame,aMove.f,aMove.t,aMove.c, function() {\n\t\t\taGame.MoveShown();\n\t\t});\n\t\treturn false;\n\t}\n\t\n})();\n\n"],"file":"12-men-morris-view.js"}